[
  {
    "objectID": "presentations/distributions.html#types-of-data",
    "href": "presentations/distributions.html#types-of-data",
    "title": "Distributions and statistics",
    "section": "Types of Data",
    "text": "Types of Data\n\nNumerical data: Continuous (e.g., height) or discrete (e.g., number of leaves).\nCategorical data: Nominal (e.g., species, gender) or ordinal (e.g., rankings)."
  },
  {
    "objectID": "presentations/distributions.html#sampling",
    "href": "presentations/distributions.html#sampling",
    "title": "Distributions and statistics",
    "section": "Sampling",
    "text": "Sampling\nUsually we cannot take the whole population for a study.\n\nFor example, it is physically impossible to do a study using blood samples from all the people in the world. Sometimes the population is small, but it is extremely expensive to collect the material.\n\nTherefore, researchers use samples - random and representative groups taken from the general population that can be analysed to provide information about the whole population.\nThis is where statistics come to the rescue."
  },
  {
    "objectID": "presentations/distributions.html#sampling-1",
    "href": "presentations/distributions.html#sampling-1",
    "title": "Distributions and statistics",
    "section": "Sampling",
    "text": "Sampling\nAre these samples are representative?\n\n20 ITMO Biology students to study average marks of students in ITMO\n100 ITMO first-year students to study students workload in their first ever exam\nEmail survey on student parents’ opinion of ITMO\nThe double-blind, randomized, placebo-controlled trial in 1990"
  },
  {
    "objectID": "presentations/distributions.html#sampling-2",
    "href": "presentations/distributions.html#sampling-2",
    "title": "Distributions and statistics",
    "section": "Sampling",
    "text": "Sampling"
  },
  {
    "objectID": "presentations/distributions.html#sampling-3",
    "href": "presentations/distributions.html#sampling-3",
    "title": "Distributions and statistics",
    "section": "Sampling",
    "text": "Sampling"
  },
  {
    "objectID": "presentations/distributions.html#distributions-1",
    "href": "presentations/distributions.html#distributions-1",
    "title": "Distributions and statistics",
    "section": "Distributions",
    "text": "Distributions\n\n\nDiscrete\nCountable number of values\n\nBernoulli\nPoisson\nBinomial\n\n\nContinious\n\\(\\infty\\) number of values\n\nNormal\nUniform\nChi-squared\n\n\n[Discrete \\(\\rightarrow\\) Continuous] if [number of values \\(\\rightarrow \\infty\\)]"
  },
  {
    "objectID": "presentations/distributions.html#probability-of-discrete-variable",
    "href": "presentations/distributions.html#probability-of-discrete-variable",
    "title": "Distributions and statistics",
    "section": "Probability of discrete variable",
    "text": "Probability of discrete variable\n\n\n\n\n\n\n\n\n\n\n\n\nIncreasing the discreteness\n\n\n\n\n\n\n\n\n\n\nThe probability of each value \\(\\rightarrow 0\\)"
  },
  {
    "objectID": "presentations/distributions.html#probability-of-continious-variable",
    "href": "presentations/distributions.html#probability-of-continious-variable",
    "title": "Distributions and statistics",
    "section": "Probability of continious variable",
    "text": "Probability of continious variable\n\\(\\infty\\) values and \\(\\infty\\) discreteness\nProbability of each value = 0 ???"
  },
  {
    "objectID": "presentations/distributions.html#probability-of-continious-variable-1",
    "href": "presentations/distributions.html#probability-of-continious-variable-1",
    "title": "Distributions and statistics",
    "section": "Probability of continious variable",
    "text": "Probability of continious variable\n\\(\\infty\\) values and \\(\\infty\\) discreteness\nNO!\nbut Probability of each particular value \\(\\rightarrow 0\\)"
  },
  {
    "objectID": "presentations/distributions.html#probability-density",
    "href": "presentations/distributions.html#probability-density",
    "title": "Distributions and statistics",
    "section": "Probability density",
    "text": "Probability density\nThe way how continious distributions are described\nArea under the plot should be = 1\n\nDensity value in some point can be way greater than 1!"
  },
  {
    "objectID": "presentations/distributions.html#normal-distribution",
    "href": "presentations/distributions.html#normal-distribution",
    "title": "Distributions and statistics",
    "section": "Normal distribution",
    "text": "Normal distribution\n\n\nNormal distribution is bell shaped, have equal mean (\\(\\mu\\)), median, mode.\n“Width” depends on standard deviation (\\(\\sigma\\)). Continious (!)\n\n\\(P(x) = \\frac{1}{{\\sigma \\sqrt{2\\pi} }}e^{{\\frac{ -\\left( {x - \\mu } \\right)^2 }{2\\sigma ^2 }}}\\),\nparameters: mean (\\(\\mu\\)) and sigma (\\(\\sigma\\)) (it does not exist in nature)"
  },
  {
    "objectID": "presentations/distributions.html#normal-distribution-1",
    "href": "presentations/distributions.html#normal-distribution-1",
    "title": "Distributions and statistics",
    "section": "Normal distribution",
    "text": "Normal distribution\nParameters of normal distribution"
  },
  {
    "objectID": "presentations/distributions.html#normal-distribution-2",
    "href": "presentations/distributions.html#normal-distribution-2",
    "title": "Distributions and statistics",
    "section": "Normal distribution",
    "text": "Normal distribution\nThree sigma rule"
  },
  {
    "objectID": "presentations/distributions.html#uniform-distribution",
    "href": "presentations/distributions.html#uniform-distribution",
    "title": "Distributions and statistics",
    "section": "Uniform distribution",
    "text": "Uniform distribution\n\n\nSimple distribution of equally possible values. Continious (!).\n\n\\(P(x) = \\frac{1}{a-b}\\)\n\n\\(a\\) - starting point\n\\(b\\) - end point"
  },
  {
    "objectID": "presentations/distributions.html#exponential-distribution",
    "href": "presentations/distributions.html#exponential-distribution",
    "title": "Distributions and statistics",
    "section": "Exponential distribution",
    "text": "Exponential distribution\n\n\n\n\n\n\n\n\n\n\n\n\n\\(P(X) = \\lambda e^{-\\lambda x}\\)\nHow fast something appears (mortality)\nContinious"
  },
  {
    "objectID": "presentations/distributions.html#binomial-distribution",
    "href": "presentations/distributions.html#binomial-distribution",
    "title": "Distributions and statistics",
    "section": "Binomial distribution",
    "text": "Binomial distribution\n\n\n\n\n\n\n\n\n\n\n\n\n\\(P(x) = \\binom{n}{k}p^k(1-p)^{n-k}\\),\n\n\\(n\\) - number of trials (fixed)\n\\(p\\) - probability of success (fixed)\n\\(k\\) - observed successes\n\n\nDistribution is based on the number of successes in a sequence of experiments. Discrete (!)\nIf we flip a coin, the binomial distribution represents the number of successes after we flip the coin a certain number of times (e.g. 10).\nThe histogram above shows the distribution of 10000 experiments on trying to get an head coin \\(k\\) times by flipping it 10 times"
  },
  {
    "objectID": "presentations/distributions.html#binomial-distribution-1",
    "href": "presentations/distributions.html#binomial-distribution-1",
    "title": "Distributions and statistics",
    "section": "Binomial distribution",
    "text": "Binomial distribution\nParameters of binomial distribution"
  },
  {
    "objectID": "presentations/distributions.html#poisson-distribution",
    "href": "presentations/distributions.html#poisson-distribution",
    "title": "Distributions and statistics",
    "section": "Poisson distribution",
    "text": "Poisson distribution\nBinomial, but \\(n \\rightarrow \\infty\\),, therefore we don’t utilize number of trials (\\(n\\)).\nNow we use “time interval” and expected number of successes (\\(\\lambda\\)) during this interval.\nStill Discrete (!)\n\n\n\n\n\n\n\n\n\n\n\n\n\\(P(x) = \\dfrac{\\lambda^k}{k!}e^{-\\lambda}\\), where\n\n\\(\\lambda\\) - mean or expected number of successes during the interval (fixed)\n\\(k\\) - “observed” successes"
  },
  {
    "objectID": "presentations/distributions.html#poisson-distribution-1",
    "href": "presentations/distributions.html#poisson-distribution-1",
    "title": "Distributions and statistics",
    "section": "Poisson distribution",
    "text": "Poisson distribution\nParameters of poisson distribution"
  },
  {
    "objectID": "presentations/distributions.html#functions-for-normal-distribution",
    "href": "presentations/distributions.html#functions-for-normal-distribution",
    "title": "Distributions and statistics",
    "section": "Functions (for normal distribution)",
    "text": "Functions (for normal distribution)\n\n\n\n\nRandom values from distribution\n\n\nrnorm(n=5, mean=100, sd=10)\n\n[1]  93.62246  92.73408 101.94970  96.10679 110.98832\n\n\n\nDensity (the height of histogram) at the point\n\n\ndnorm(x=100, mean=100, sd=10)\n\n[1] 0.03989423"
  },
  {
    "objectID": "presentations/distributions.html#functions-for-normal-distribution-1",
    "href": "presentations/distributions.html#functions-for-normal-distribution-1",
    "title": "Distributions and statistics",
    "section": "Functions (for normal distribution)",
    "text": "Functions (for normal distribution)\n\nCumulative probability at the point: prob-ty to obtain value less than specified\n\n\npnorm(q = 80, mean=100, sd=10) # prob to obtain any value less than 80\n\n[1] 0.02275013\n\npnorm(q = c(70,80,90,110,120,130), mean=100, sd=10)\n\n[1] 0.001349898 0.022750132 0.158655254 0.841344746 0.977249868 0.998650102\n\n\n\nValue corresponding to specified cumulative probability\n\n\nqnorm(p = c(0.003, 0.05, 0.16, 0.84, 0.95, 0.997), mean=100, sd=10)\n\n[1]  72.52219  83.55146  90.05542 109.94458 116.44854 127.47781"
  },
  {
    "objectID": "presentations/distributions.html#functions-for-other-distributions",
    "href": "presentations/distributions.html#functions-for-other-distributions",
    "title": "Distributions and statistics",
    "section": "Functions (for other distributions)",
    "text": "Functions (for other distributions)\nUniform\n\nrunif(n, min, max)\ndunif(n, min, max)\npunif(n, min, max)\nqunif(n, min, max)\n\nBinomial\n\nrbinom(n, size, prob)\ndbinom(n, size, prob)\npbinom(n, size, prob)\nqbinom(n, size, prob)\n\nPoisson\n\nrpois(n, lambda)\ndpois(n, lambda)\nppois(n, lambda)\nqpois(n, lambda)"
  },
  {
    "objectID": "presentations/distributions.html#descriptive-statistics",
    "href": "presentations/distributions.html#descriptive-statistics",
    "title": "Distributions and statistics",
    "section": "Descriptive statistics",
    "text": "Descriptive statistics\nCentral tendency\n\nSample mean - \\(\\bar{X} \\ or\\ \\hat\\mu = \\frac{x_1 + x_2 + ... x_N}{N}\\)\nPopulation mean - \\(E(X) = x_1*p_1 + x_2*p_2 + ... x_N * p_N = \\sum^N_{i=1} x_i*p_i\\)\n\n\nmean(x)\nsum(x * p) # x and p are vectors\n\n\nMedian - the \\(N/2\\)-th element in list of sorted values \\(\\{x_1, x_2, ..., \\pmb{x_{N/2}},...,x_{N-1}, x_N\\}\\), where for any \\(i\\): \\(x_{i-1} &lt; x_i\\)\n\n\nmedian(x)\n\n\nMode - The most frequent value one of the methods: only for discrete data:\n\n\nx %&gt;% table() %&gt;% sort(decreasing = T) %&gt;% head(1) %&gt;% names() %&gt;% as.numeric()\n\n\n\n\nThey are equal for a normal distribution"
  },
  {
    "objectID": "presentations/distributions.html#descriptive-statistics-1",
    "href": "presentations/distributions.html#descriptive-statistics-1",
    "title": "Distributions and statistics",
    "section": "Descriptive statistics",
    "text": "Descriptive statistics\nBimodal data"
  },
  {
    "objectID": "presentations/distributions.html#descriptive-statistics-2",
    "href": "presentations/distributions.html#descriptive-statistics-2",
    "title": "Distributions and statistics",
    "section": "Descriptive statistics",
    "text": "Descriptive statistics\nExponential distribution"
  },
  {
    "objectID": "presentations/distributions.html#descriptive-statistics-3",
    "href": "presentations/distributions.html#descriptive-statistics-3",
    "title": "Distributions and statistics",
    "section": "Descriptive statistics",
    "text": "Descriptive statistics\nOutliers\nMean is more sensitive to outliers"
  },
  {
    "objectID": "presentations/distributions.html#by-the-way-what-to-do-about-outliers",
    "href": "presentations/distributions.html#by-the-way-what-to-do-about-outliers",
    "title": "Distributions and statistics",
    "section": "By the way, what to do about outliers?",
    "text": "By the way, what to do about outliers?\nNothing\n\nIf they still contain some information. \n\nDelete\n\nIf there are few of them.\nThis is an obvious error and you are sure they do not contain valuable information"
  },
  {
    "objectID": "presentations/distributions.html#descriptive-statistics-4",
    "href": "presentations/distributions.html#descriptive-statistics-4",
    "title": "Distributions and statistics",
    "section": "Descriptive statistics",
    "text": "Descriptive statistics\nVariance and Standard deviation\n\\(Var(X) = S^2 = \\dfrac{((x_1 - \\bar{X})^2 + (x_2 - \\bar{X})^2 + ... + (x_N - \\bar{X})^2)}{N-1} = \\dfrac{\\sum{(x_i - \\bar{X})^2}}{N-1}\\)\n\nvar(x)\n\n\\(SD(X) = S = \\sqrt{\\dfrac{\\sum{(x_i - \\bar{X})^2}}{N-1}}\\)\n\nsd(x)\n\n\nFor the population variance in the denominator of the formula is \\(N\\), not \\(N-1\\)"
  },
  {
    "objectID": "presentations/distributions.html#descriptive-statistics-5",
    "href": "presentations/distributions.html#descriptive-statistics-5",
    "title": "Distributions and statistics",
    "section": "Descriptive statistics",
    "text": "Descriptive statistics\nQuantiles\nQuantiles - values less than which \\(X\\)% of the data in the distribution is found\nFor example, 0.75 quntile is the value that is greater of 75% of values in sample, but lower than another 25% of sample values\n\nquantile(x, probs = 0.75)\n\n\nQuartiles are 0.25,0.5,0.75 quantiles\n\n\nquantile(x, probs = c(0.25, 0.5, 0.75))\n\n\nPercentiles are 1-100% qunatiles\n\n\nquantile(x, probs = seq(0.01, 1, 0.01))\n\n\nMedian is a 0.5 quantile (2nd quartile)"
  },
  {
    "objectID": "presentations/distributions.html#standard-error-se",
    "href": "presentations/distributions.html#standard-error-se",
    "title": "Distributions and statistics",
    "section": "Standard error (SE)",
    "text": "Standard error (SE)\n“SD of means of samples”\n\n\n\\(SE = \\dfrac{SD}{\\sqrt n}\\)\n\n\nSeveral samples\nCalculate mean in each sample\nBuild the means distribution\nCalculate resulting distribution’s SD"
  },
  {
    "objectID": "presentations/distributions.html#standard-error-se-1",
    "href": "presentations/distributions.html#standard-error-se-1",
    "title": "Distributions and statistics",
    "section": "Standard error (SE)",
    "text": "Standard error (SE)\n“SD of means of samples”\n\n\n\\(SE = \\dfrac{SD}{\\sqrt n}\\)"
  },
  {
    "objectID": "presentations/distributions.html#magic-of-central-limit-theorem",
    "href": "presentations/distributions.html#magic-of-central-limit-theorem",
    "title": "Distributions and statistics",
    "section": "Magic of Central Limit Theorem",
    "text": "Magic of Central Limit Theorem\nThis means’ distribution was built from uniform distribution samples! \\(a=0, b=10 \\Rightarrow \\hat\\mu=5\\)\n\nMean is also = 5!"
  },
  {
    "objectID": "presentations/distributions.html#magic-of-central-limit-theorem-1",
    "href": "presentations/distributions.html#magic-of-central-limit-theorem-1",
    "title": "Distributions and statistics",
    "section": "Magic of Central Limit Theorem",
    "text": "Magic of Central Limit Theorem\nLet’s do it with exponential distribution samples (\\(\\lambda=2\\))\n\nLooks familiar…"
  },
  {
    "objectID": "presentations/distributions.html#magic-of-central-limit-theorem-2",
    "href": "presentations/distributions.html#magic-of-central-limit-theorem-2",
    "title": "Distributions and statistics",
    "section": "Magic of Central Limit Theorem",
    "text": "Magic of Central Limit Theorem\n\nSeveral samples\nCalculate mean (\\(\\bar{X}\\)) in each sample\nBuild the means distribution\n\nIt is normally distributed! (almost)\n\nIf samples are small, distribution of means may not look like normal.\n\n\nCalculate resulting distribution’s SD\\(^*\\) and mean ( \\(\\hat\\mu\\) )\nObtained mean is “real mean” and SD is Standard error"
  },
  {
    "objectID": "presentations/distributions.html#standartization-or-normalization..",
    "href": "presentations/distributions.html#standartization-or-normalization..",
    "title": "Distributions and statistics",
    "section": "Standartization (or normalization..?)",
    "text": "Standartization (or normalization..?)\nSetting mean=0 and sd=1\n\n\n\\(Z = \\dfrac{\\bar{X} - \\mu}{SE}\\)"
  },
  {
    "objectID": "presentations/distributions.html#looks-familiar",
    "href": "presentations/distributions.html#looks-familiar",
    "title": "Distributions and statistics",
    "section": "Looks familiar?",
    "text": "Looks familiar?\n\nThree sigma rule!"
  },
  {
    "objectID": "presentations/distributions.html#three-sigma-rule-2",
    "href": "presentations/distributions.html#three-sigma-rule-2",
    "title": "Distributions and statistics",
    "section": "Three sigma rule!",
    "text": "Three sigma rule!\n\n\nWe know that ~95% of the data lies between the two orange lines (\\(\\mu_z \\pm 2 \\sigma\\))\nMore precisely: \\(\\mu_z \\pm 1.96 \\ \\sigma\\)\nHere \\(\\sigma_z\\) is SE = 1\n\\(\\mu_z = 0\\) (standardisized mean of means)\n\nDistribution of means"
  },
  {
    "objectID": "presentations/distributions.html#three-sigma-rule-confidence-interval",
    "href": "presentations/distributions.html#three-sigma-rule-confidence-interval",
    "title": "Distributions and statistics",
    "section": "Three sigma rule –> confidence interval",
    "text": "Three sigma rule –&gt; confidence interval\n\n\nThus, with probability of 0.95\n\\[ -1.96 \\sigma_z \\leq \\dfrac{\\bar{X} - \\mu}{SE} \\leq 1.96 \\sigma_z \\]\n\\[-1.96 \\leq \\dfrac{\\bar{X} - \\mu}{SE} \\leq 1.96\\]\n\\[-1.96 \\ SE \\leq \\bar{X} - \\mu \\leq 1.96 \\ SE \\]\n\\[\\bar{X} - 1.96 \\ SE \\leq \\mu \\leq  \\bar{X} + 1.96 \\ SE \\]\n\nDistribution of means"
  },
  {
    "objectID": "presentations/distributions.html#confidence-interval",
    "href": "presentations/distributions.html#confidence-interval",
    "title": "Distributions and statistics",
    "section": "Confidence interval",
    "text": "Confidence interval\n\n\n\n\n\nThus, with probability of 0.95\n\\[ -1.96 \\sigma_z \\leq \\dfrac{\\bar{X} - \\mu}{SE} \\leq 1.96 \\sigma_z \\]\n\\[-1.96 \\leq \\dfrac{\\bar{X} - \\mu}{SE} \\leq 1.96\\]\n\\[-1.96 \\ SE \\leq \\bar{X} - \\mu \\leq 1.96 \\ SE \\]\n\\[\\bar{X} - 1.96 \\ SE \\leq \\mu \\leq  \\bar{X} + 1.96 \\ SE \\]\n\nWe may never know the true value of the population mean (\\(\\mu\\)), but we can estimate it from a sample and build an interval with a certain degree of confidence (e.g., 0.95)\n\\[ \\bar X - x_{\\alpha/2} * SE  \\leq \\mu_{true} \\leq \\bar X + x_{\\alpha/2} * SE\\]\n\n\\(\\alpha\\) - Significance level (e.g. 0.05)\n\\(1 - \\alpha\\) - Confidence level (e.g. 0.95)\n\\(x_{\\alpha/2}\\) - values of \\(\\alpha/2\\) quantile in standart. normal distribution (mean=0, sd=1)\n\n(e.g. 0.025 and 0.975 quantiles for \\(\\alpha=0.05\\))\n((they are equal))\n\nLet’s calculate it in R!"
  },
  {
    "objectID": "presentations/distributions.html#what-does-confidence-level-mean",
    "href": "presentations/distributions.html#what-does-confidence-level-mean",
    "title": "Distributions and statistics",
    "section": "What does confidence level mean?",
    "text": "What does confidence level mean?\n\n\nGenerating 1000 samples and 1000 95% CIs\n\n\n\n\n\n\n\n\n\n\nHow many CIs do cover true mean?\n\n\n\nmissed     ok \n    61    939 \n\n\nSo, 95% of new generated CIs will cover true mean\nTry to change size of samples"
  },
  {
    "objectID": "presentations/distributions.html#students-t--distribution",
    "href": "presentations/distributions.html#students-t--distribution",
    "title": "Distributions and statistics",
    "section": "Student’s (t-) distribution",
    "text": "Student’s (t-) distribution\nComparing to standard (!) normal distribution, t-distribution have heavier tails.\n\nIt means that t-distribution’s quantiles have bigger values comparing to normal"
  },
  {
    "objectID": "presentations/distributions.html#students-t--distribution-1",
    "href": "presentations/distributions.html#students-t--distribution-1",
    "title": "Distributions and statistics",
    "section": "Student’s (t-) distribution",
    "text": "Student’s (t-) distribution\nComparing to standard (!) normal distribution, t-distribution have heavier tails.\nIt means that t-distribution’s quantiles have bigger values comparing to normal\nStandard Normal:\n\nqnorm(c(0.025, 0.975), mean=0, sd=1)\n\n[1] -1.959964  1.959964\n\n\nStudent df=13:\n\nqt(c(0.025, 0.975), df=13)\n\n[1] -2.160369  2.160369\n\n\nStudent df=50:\n\nqt(c(0.025, 0.975), df=50)\n\n[1] -2.008559  2.008559"
  },
  {
    "objectID": "presentations/distributions.html#students-t--distribution-2",
    "href": "presentations/distributions.html#students-t--distribution-2",
    "title": "Distributions and statistics",
    "section": "Student’s (t-) distribution",
    "text": "Student’s (t-) distribution\nDegrees of freedom (df) - the only parameter of distribution!\nIt always have mean = 0 and “width” defined by df\n\nDegrees of freedom = N - 1\nN - size of sample"
  },
  {
    "objectID": "presentations/distributions.html#confidence-interval-using-quantiles-from-t-distribution",
    "href": "presentations/distributions.html#confidence-interval-using-quantiles-from-t-distribution",
    "title": "Distributions and statistics",
    "section": "Confidence interval using quantiles from t-distribution",
    "text": "Confidence interval using quantiles from t-distribution\n\\[ \\bar X - t_{\\alpha/2} * SE  \\leq \\mu_{true} \\leq \\bar X + t_{\\alpha/2} * SE\\]\n\n\\(\\alpha\\) - Significance level (e.g. 0.05)\n\\(1 - \\alpha\\) - Confidence level (e.g. 0.95)\n\\(t_{\\alpha/2}\\) - values of \\(\\alpha/2\\) quantile in t-distribution"
  },
  {
    "objectID": "presentations/distributions.html#confidence-interval-using-quantiles-from-t-distribution-1",
    "href": "presentations/distributions.html#confidence-interval-using-quantiles-from-t-distribution-1",
    "title": "Distributions and statistics",
    "section": "Confidence interval using quantiles from t-distribution",
    "text": "Confidence interval using quantiles from t-distribution\n\\[ \\bar X - t_{\\alpha/2} * SE  \\leq \\mu_{true} \\leq \\bar X + t_{\\alpha/2} * SE\\]\n\nBecause of heavier tails, such CI can be more accurate for small \\(n\\)\nAnd for large \\(n\\) it looks like standard normal\n\nLet’s calculate it in R!"
  },
  {
    "objectID": "code/stats_corr_regr.html",
    "href": "code/stats_corr_regr.html",
    "title": "Statistics",
    "section": "",
    "text": "Correlation analysis measures the strength and direction of a linear relationship between two variables. The most commonly used correlation measure is the Pearson’s correlation coefficient which indicates linear relationship\n\n\n\nPearson’s correlation coefficient:\n\\(\\rho = \\dfrac{\\sum (X_i - \\bar{X})(Y_i - \\bar{Y})}{\\sqrt{\\sum (X_i - \\bar{X})^2 \\sum (Y_i - \\bar{Y})^2}} \\in [-1;1]\\)\n\n\n\n\n\\(−1\\) indicates a perfect negative (inverse) linear relationship.\n\\(+1\\) indicates a perfect positive linear relationship.\n\\(0\\) indicates no linear relationship.\n\n\n\n\n\n\n\n\nplant_height_df = data.frame(\n  # Sunlight_hrs_per_day = c(4,5,5,6,6,7,8,8,9,10),\n  # Plant_height = c(10.2, 11.5, 11.9, 13.4, 13.8, 14, 15, 16.2, 17.8, 18.3)\n  Sunlight_hrs_per_day = rep(4:10, e=4),\n  Plant_height = rep(4:10, e=4) + rnorm(28,0,2)\n)\n\nhead(plant_height_df)\n\n  Sunlight_hrs_per_day Plant_height\n1                    4     4.156095\n2                    4     3.291864\n3                    4     3.053510\n4                    4     4.689545\n5                    5     4.175300\n6                    5     5.613629\n\n\n\nplot(x = plant_height_df$Sunlight_hrs_per_day, \n     y=plant_height_df$Plant_height, \n     main = NULL, \n     xlab = \"Sunlight (hrs/day)\", \n     ylab = \"Plant height\", pch=19, col='blue')\n\n\n\n\n\n\n\n\n\n\n\n\ncor() - calculates correlation matrix between all features of dataframe\n\n\ncor(plant_height_df$Sunlight_hrs_per_day, plant_height_df$Plant_height)\n\n[1] 0.8499076\n\n# cor(iris %&gt;%select(where(is.numeric)))\n\n\ncorr.test() - also tests how far the coefficient is from zero (t-test)\n\n\ncor.test(plant_height_df$Sunlight_hrs_per_day, \n         plant_height_df$Plant_height)\n\n\n    Pearson's product-moment correlation\n\ndata:  plant_height_df$Sunlight_hrs_per_day and plant_height_df$Plant_height\nt = 8.2244, df = 26, p-value = 1.049e-08\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n 0.6982242 0.9285568\nsample estimates:\n      cor \n0.8499076 \n\n\n\n\n\n\n\nx1=rnorm(500)\ny1=rnorm(500)\nplot(x1,y1)\n\n\n\n\n\n\n\n\n\ncor(x1, y1)\n\n[1] 0.08802816\n\n\n\n\n\nWebsite with numerous spurious correlations"
  },
  {
    "objectID": "code/stats_corr_regr.html#formula",
    "href": "code/stats_corr_regr.html#formula",
    "title": "Statistics",
    "section": "",
    "text": "Pearson’s correlation coefficient:\n\\(\\rho = \\dfrac{\\sum (X_i - \\bar{X})(Y_i - \\bar{Y})}{\\sqrt{\\sum (X_i - \\bar{X})^2 \\sum (Y_i - \\bar{Y})^2}} \\in [-1;1]\\)\n\n\n\n\n\\(−1\\) indicates a perfect negative (inverse) linear relationship.\n\\(+1\\) indicates a perfect positive linear relationship.\n\\(0\\) indicates no linear relationship."
  },
  {
    "objectID": "code/stats_corr_regr.html#is-there-a-relationship-between-temperature-and-metabolic-rate",
    "href": "code/stats_corr_regr.html#is-there-a-relationship-between-temperature-and-metabolic-rate",
    "title": "Statistics",
    "section": "",
    "text": "plant_height_df = data.frame(\n  # Sunlight_hrs_per_day = c(4,5,5,6,6,7,8,8,9,10),\n  # Plant_height = c(10.2, 11.5, 11.9, 13.4, 13.8, 14, 15, 16.2, 17.8, 18.3)\n  Sunlight_hrs_per_day = rep(4:10, e=4),\n  Plant_height = rep(4:10, e=4) + rnorm(28,0,2)\n)\n\nhead(plant_height_df)\n\n  Sunlight_hrs_per_day Plant_height\n1                    4     4.156095\n2                    4     3.291864\n3                    4     3.053510\n4                    4     4.689545\n5                    5     4.175300\n6                    5     5.613629\n\n\n\nplot(x = plant_height_df$Sunlight_hrs_per_day, \n     y=plant_height_df$Plant_height, \n     main = NULL, \n     xlab = \"Sunlight (hrs/day)\", \n     ylab = \"Plant height\", pch=19, col='blue')\n\n\n\n\n\n\n\n\n\n\n\n\ncor() - calculates correlation matrix between all features of dataframe\n\n\ncor(plant_height_df$Sunlight_hrs_per_day, plant_height_df$Plant_height)\n\n[1] 0.8499076\n\n# cor(iris %&gt;%select(where(is.numeric)))\n\n\ncorr.test() - also tests how far the coefficient is from zero (t-test)\n\n\ncor.test(plant_height_df$Sunlight_hrs_per_day, \n         plant_height_df$Plant_height)\n\n\n    Pearson's product-moment correlation\n\ndata:  plant_height_df$Sunlight_hrs_per_day and plant_height_df$Plant_height\nt = 8.2244, df = 26, p-value = 1.049e-08\nalternative hypothesis: true correlation is not equal to 0\n95 percent confidence interval:\n 0.6982242 0.9285568\nsample estimates:\n      cor \n0.8499076"
  },
  {
    "objectID": "code/stats_corr_regr.html#example-of-0-correlation",
    "href": "code/stats_corr_regr.html#example-of-0-correlation",
    "title": "Statistics",
    "section": "",
    "text": "x1=rnorm(500)\ny1=rnorm(500)\nplot(x1,y1)\n\n\n\n\n\n\n\n\n\ncor(x1, y1)\n\n[1] 0.08802816"
  },
  {
    "objectID": "code/stats_corr_regr.html#correlation-does-not-imply-causation",
    "href": "code/stats_corr_regr.html#correlation-does-not-imply-causation",
    "title": "Statistics",
    "section": "",
    "text": "Website with numerous spurious correlations"
  },
  {
    "objectID": "code/stats_corr_regr.html#spearman-correlation",
    "href": "code/stats_corr_regr.html#spearman-correlation",
    "title": "Statistics",
    "section": "Spearman correlation",
    "text": "Spearman correlation\n\nSuitable for non-linear relationships\nLess sensitive to outliers\nCalculated based on ranks"
  },
  {
    "objectID": "code/stats_corr_regr.html#examples",
    "href": "code/stats_corr_regr.html#examples",
    "title": "Statistics",
    "section": "Examples",
    "text": "Examples\n\nNon-linear\n\nx = runif(50, -10, 10)\ny = (x + rnorm(50, 0, 2))^3\nplot(x,y, pch=19)\n\n\n\n\n\n\n\n\n\ncor(x,y)\n\n[1] 0.7731634\n\ncor(x,y, method = \"spearman\")\n\n[1] 0.942569\n\n# cor(x,y, method = \"kendall\")\n\n\n\nWith outliers\n\nx = c(rnorm(20,0,3), c(15, 19))\ny = c(x[1:20] + c(rnorm(20,0,1)), 0, 0)\nplot(x,y, pch=19)\n\n\n\n\n\n\n\n\n\ncor(x,y)\n\n[1] 0.5428137\n\ncor(x,y, method = \"spearman\")\n\n[1] 0.8065519\n\n# cor(x,y, method = \"kendall\")\n\n\nBy conducting correlation analysis, we only answered the question “Is there a significant relationship between the values?”. Can we, using this knowledge, predict the values of one variable based on the second variable? Yes!"
  },
  {
    "objectID": "code/stats_corr_regr.html#formula-1",
    "href": "code/stats_corr_regr.html#formula-1",
    "title": "Statistics",
    "section": "Formula",
    "text": "Formula\n\\(y = \\beta_0 + \\beta_1x_1 + ... + \\beta_nx_n + \\epsilon\\)\n\n\\(y\\) - dependent variable (response)\n\\(x\\) - independent variable (predictor)\n\\(\\beta_0\\) - intercept - value of \\(y\\), when \\(x=0\\)\n\\(\\beta_i\\) - coefficients - values by which \\(y\\) is changed when the corresponding \\(x_i\\) is increased by 1.\n\\(\\epsilon\\) - so-called error - differences between real \\(y\\) values and esimated by model values"
  },
  {
    "objectID": "code/stats_corr_regr.html#formula-of-model-linear",
    "href": "code/stats_corr_regr.html#formula-of-model-linear",
    "title": "Statistics",
    "section": "Formula of model (linear)",
    "text": "Formula of model (linear)\n\\(y_{pred} = \\beta_0 + \\beta_1x_1 + ... + \\beta_nx_n\\)"
  },
  {
    "objectID": "code/stats_corr_regr.html#assumptions",
    "href": "code/stats_corr_regr.html#assumptions",
    "title": "Statistics",
    "section": "Assumptions",
    "text": "Assumptions\n\nHomoscedasticity: Residuals have constant variance (~) - \\(\\sigma^2(\\epsilon) = const\\)\nMean of residuals is close to zero\n\nStricter assumption: residuals are normally distributed around zero (~) - \\(\\epsilon \\sim Norm(0, \\sigma^2)\\)\nThis assumption is equivalent to normality of \\(y\\)\n\nObservations \\(y_i\\) are independent (not correlated) (~)\nLinearity: The relationship between variables is considered to be linear.\n\n\n(~) denotes assumptions needed for hypotheses testing and confidence estimation only"
  },
  {
    "objectID": "code/stats_corr_regr.html#formula-of-model",
    "href": "code/stats_corr_regr.html#formula-of-model",
    "title": "Statistics",
    "section": "Formula of model",
    "text": "Formula of model\n\\(y_{pred} = \\beta_0 + \\beta_1x_1\\)"
  },
  {
    "objectID": "code/stats_corr_regr.html#can-plant-height-be-predicted-based-on-soil-nutrient-levels",
    "href": "code/stats_corr_regr.html#can-plant-height-be-predicted-based-on-soil-nutrient-levels",
    "title": "Statistics",
    "section": "Can plant height be predicted based on soil nutrient levels?",
    "text": "Can plant height be predicted based on soil nutrient levels?\n\nData\n\nnutrients &lt;- rnorm(50, mean = 10, sd = 3)\nheight &lt;- 2 * nutrients + rnorm(50, mean = 0, sd = 5)\n\ndata_plant_nutrient &lt;- data.frame(nutrients, height)\n\n\nplot(nutrients, height, main = \"Nutrients vs Height\",\n     xlab = \"Nutrients\", ylab = \"Height\",\n     pch=19)\n\n\n\n\n\n\n\n\n\n\nModel creation\n\nmodel &lt;- lm(height ~ nutrients, data = data_plant_nutrient)\nmodel\n\n\nCall:\nlm(formula = height ~ nutrients, data = data_plant_nutrient)\n\nCoefficients:\n(Intercept)    nutrients  \n      2.075        1.853  \n\n\n\nplot(nutrients, height, main = \"Nutrients vs Height\",\n     xlab = \"Nutrients\", ylab = \"Height\",\n     pch=19)\nabline(model, col = \"red\", lwd=3)\nlegend(\"topleft\",\n       legend = c(\"y_pred\"),\n       col = c('red'),\n       bty = 'n', lwd=3)"
  },
  {
    "objectID": "code/stats_corr_regr.html#formula-of-model-1",
    "href": "code/stats_corr_regr.html#formula-of-model-1",
    "title": "Statistics",
    "section": "Formula of model",
    "text": "Formula of model\n\\(y_{pred} = \\beta_0 + \\beta_1x_1 + ... + \\beta_nx_n\\)"
  },
  {
    "objectID": "code/stats_corr_regr.html#adding-one-more-predictor-for-plant-height-model",
    "href": "code/stats_corr_regr.html#adding-one-more-predictor-for-plant-height-model",
    "title": "Statistics",
    "section": "Adding one more predictor for plant height model",
    "text": "Adding one more predictor for plant height model\n\nsunlight_hrs = rep(5:9, each=10) + rnorm(50, 0, 1)\ndata_plant_nutrient = data_plant_nutrient %&gt;% arrange(height) %&gt;%  cbind(sunlight_hrs)\ndata_plant_nutrient %&gt;% str()\n\n'data.frame':   50 obs. of  3 variables:\n $ nutrients   : num  5.15 10.03 4.82 8.6 6.41 ...\n $ height      : num  5.46 8.22 11.36 11.95 13.22 ...\n $ sunlight_hrs: num  2.94 7.19 4.3 4.47 6.36 ...\n\n\n\nplot(data_plant_nutrient$height, data_plant_nutrient$sunlight_hrs, \n     main = \"Sunlight vs Height\",\n     xlab = \"Sunlight\", ylab = \"Height\",\n     pch=19)\n\n\n\n\n\n\n\n\n\nAdditive\n\\[\ny = \\beta_0 + \\beta_1x_1 + \\beta_2x_2\n\\]\n\nmodel_mullti = lm(height ~ sunlight_hrs + nutrients, data = data_plant_nutrient)\nsummary(model_mullti)\n\n\nCall:\nlm(formula = height ~ sunlight_hrs + nutrients, data = data_plant_nutrient)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-13.4566  -2.1126  -0.4277   1.6301   9.8598 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)   -2.3115     2.4841  -0.931 0.356853    \nsunlight_hrs   1.8379     0.3423   5.369 2.39e-06 ***\nnutrients      1.0739     0.2583   4.158 0.000135 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 3.86 on 47 degrees of freedom\nMultiple R-squared:  0.6887,    Adjusted R-squared:  0.6755 \nF-statistic: 51.99 on 2 and 47 DF,  p-value: 1.228e-12\n\n\n\n\nWith interaction\n\\[y = \\beta_0 + \\beta_1x_1 + \\beta_2x_2 + \\beta_3x_1x_2\\]\nNow coefficient have different interpretation:\n\n\\(\\beta_1\\)​: Effect of \\(x_1\\)​ on \\(y\\) when \\(x_2=0\\).\n\\(\\beta_2\\)​: Effect of \\(x_2\\)​ on \\(y\\) when \\(x_1=0\\).\n\\(\\beta_3\\): Interaction coefficient, showing how the relationship between \\(x_1\\)​ and \\(y\\) changes as \\(x_2\\)​ changes.\n\n\nYou should include an interaction if you hypothesize that the relationship between one predictor and the dependent variable changes depending on the level of another predictor. For example, the effect of a drug might vary depending on the age of the patient.\n\n\n# model_mullti = lm(height ~ nutrients + sunlight_hrs + nutrients:sunlight_hrs, data = data_plant_nutrient)\nmodel_mullti_interact = lm(height ~ nutrients * sunlight_hrs, data = data_plant_nutrient)\nsummary(model_mullti_interact)\n\n\nCall:\nlm(formula = height ~ nutrients * sunlight_hrs, data = data_plant_nutrient)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-13.463  -2.113  -0.434   1.625   9.857 \n\nCoefficients:\n                        Estimate Std. Error t value Pr(&gt;|t|)\n(Intercept)            -2.430563   8.106330  -0.300    0.766\nnutrients               1.085487   0.794769   1.366    0.179\nsunlight_hrs            1.857365   1.308138   1.420    0.162\nnutrients:sunlight_hrs -0.001821   0.117902  -0.015    0.988\n\nResidual standard error: 3.901 on 46 degrees of freedom\nMultiple R-squared:  0.6887,    Adjusted R-squared:  0.6684 \nF-statistic: 33.93 on 3 and 46 DF,  p-value: 1.013e-11\n\n\n\nx1:x2 denotes interaction\nx1 * x2 is equivalent to x1 + x2 + x1:x2"
  },
  {
    "objectID": "code/stats_corr_regr.html#testing-if-model-is-better-with-new-predictors",
    "href": "code/stats_corr_regr.html#testing-if-model-is-better-with-new-predictors",
    "title": "Statistics",
    "section": "Testing if model is better with new predictors",
    "text": "Testing if model is better with new predictors\n\nanova(model, model_mullti_interact)\n\nAnalysis of Variance Table\n\nModel 1: height ~ nutrients\nModel 2: height ~ nutrients * sunlight_hrs\n  Res.Df     RSS Df Sum of Sq      F   Pr(&gt;F)    \n1     48 1129.58                                 \n2     46  700.18  2     429.4 14.105 1.67e-05 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\\(p.value &lt; 0.05\\) and it means that new model better reduce the residual variance"
  },
  {
    "objectID": "code/stats_corr_regr.html#plot-the-line-without-modelling",
    "href": "code/stats_corr_regr.html#plot-the-line-without-modelling",
    "title": "Statistics",
    "section": "Plot the line “without” modelling",
    "text": "Plot the line “without” modelling\n\ndata_plant_nutrient %&gt;% \n  ggplot(aes(x=nutrients, y=height)) +\n  geom_point(col='blue', show.legend = T) +\n  geom_smooth(formula = y ~ x, method = 'lm', show.legend = T) + ## &lt;---- creates model and plots the line\n  theme_bw()"
  },
  {
    "objectID": "code/stats_ttest_chi.html#assumptions",
    "href": "code/stats_ttest_chi.html#assumptions",
    "title": "Statistics",
    "section": "Assumptions",
    "text": "Assumptions\n\nVariances of the two groups are equal\n\nVariances can not be equal when using Welch t-test (default in R)\n\nIndependence of collected observations\nSamples should be large enough…."
  },
  {
    "objectID": "code/stats_ttest_chi.html#hypotheses",
    "href": "code/stats_ttest_chi.html#hypotheses",
    "title": "Statistics",
    "section": "Hypotheses",
    "text": "Hypotheses\n\nNull Hypothesis (\\(H_0\\)): The means of the two groups are equal.\nAlternative Hypothesis (\\(H_A\\)): The means of the two groups are different.\n\nTwo-sided: “our” mean is either significantly greater than or less than the mean under the null hypothesis\nOne-sided: “our” mean is significantly greater than the mean under the null hypothesis (instead of “greater” could be “less”)"
  },
  {
    "objectID": "code/stats_ttest_chi.html#unpaired-t-test-for-independent-samples",
    "href": "code/stats_ttest_chi.html#unpaired-t-test-for-independent-samples",
    "title": "Statistics",
    "section": "Unpaired t-test for independent samples",
    "text": "Unpaired t-test for independent samples\n\nFormula\nCompare means of two groups: \\(t = \\dfrac{\\bar{X}_1 - \\bar{X}_2}{\\sqrt{\\frac{s_1^2}{n_1} + \\frac{s_2^2}{n_2}}}\\)\nCompare one group mean with a zero: \\(t = \\dfrac{\\bar{X}_1}{\\sqrt{\\frac{s_1^2}{n_1}}}\\)\n\n\\(\\bar{X_1}, \\bar{X_2}\\) - means of 1st and 2nd samples\n\\(s_1, s_2\\) - standard deviations of 1st and 2nd samples\n\\(n_1, n_2\\) -number of observations in samples\n\n\n\nParameter of t-distribution\nDegrees of freedom (df) - number of independent piece of information\n\nEqual to number of observations - number of groups\n\nIf two groups are compared: \\(df = N_1 + N_2 - 2\\)\nIf group mean compared with zero: \\(df = N_1 - 1\\)\n\nCalculated by another big formula for Welch t-test\n\n\n\nDoes sunlight exposure affect plant height?\n\nData\n\ndata_sunlight_plant = \n  data.frame(group = factor(rep(c(\"Sunlight\", \"Shade\"), each = 30)),\n             height = c(rnorm(30, mean = 15, sd = 2), \n                        rnorm(30, mean = 12, sd = 2)))\n\ndata_sunlight_plant %&gt;% str() #!\n\n'data.frame':   60 obs. of  2 variables:\n $ group : Factor w/ 2 levels \"Shade\",\"Sunlight\": 2 2 2 2 2 2 2 2 2 2 ...\n $ height: num  14.4 13.6 14.1 12.5 14.9 ...\n\n\n\nggplant = data_sunlight_plant %&gt;%  \n  ggplot(aes(x=height,fill=group)) +\n  theme_classic()\n\n# ggplant + geom_boxplot(aes(y=group)) + theme(legend.position = \"none\")\nggplant + geom_density(alpha=0.5)\n\n\n\n\n\n\n\n# ggplant + geom_histogram(alpha=0.8, binwidth=1, alpha=0.6, col='black')\n\n\n\nTesting\nExample for one sample:\n\nx = rnorm(10, mean=2, sd=2)\nt.test(x)\n\n\n    One Sample t-test\n\ndata:  x\nt = 4.7064, df = 9, p-value = 0.00111\nalternative hypothesis: true mean is not equal to 0\n95 percent confidence interval:\n 0.9957054 2.8387474\nsample estimates:\nmean of x \n 1.917226 \n\n\nExample on two samples:\n\nx1 = rnorm(10, mean=2, sd = 4)\nx2 = rnorm(10, mean=-1, sd=2)\n# boxplot(x1, x2, horizontal = T)\nt.test(x1,x2)\n\n\n    Welch Two Sample t-test\n\ndata:  x1 and x2\nt = 1.717, df = 13.205, p-value = 0.1093\nalternative hypothesis: true difference in means is not equal to 0\n95 percent confidence interval:\n -0.6419436  5.6519587\nsample estimates:\nmean of x mean of y \n 1.602301 -0.902707 \n\n\nOur plant and sunlight data:\n\n# t.test(height ~ group, data = data_sunlight_plant, var.equal = TRUE) # Classic t-test\nt.test(height ~ group, \n       data = data_sunlight_plant) # Welch t-test\n\n\n    Welch Two Sample t-test\n\ndata:  height by group\nt = -7.5318, df = 56.337, p-value = 4.42e-10\nalternative hypothesis: true difference in means between group Shade and group Sunlight is not equal to 0\n95 percent confidence interval:\n -4.544291 -2.635042\nsample estimates:\n   mean in group Shade mean in group Sunlight \n              11.35874               14.94841 \n\n\n\nt-value = -4.6261\np-value = 2.137e-05 = \\(2.137 * 10^{-5}\\) = \\(0.00002137\\)\n\n\\(2.137 * 10^{-5} &lt; 0.05 \\leftrightarrow p.value &lt; \\alpha\\)\nWe can with great confidence reject the \\(H_0\\) and accept \\(H_A\\) about difference of averages\n\n\n\n\n\nComparison of basic and Welch t-test\n\n\n\n\nBasic t-test\nWelch t-test\n\n\n\n\n= N ; = SD ; = MEAN\nGOOD\nGOOD\n\n\n= N ; \\(\\neq\\) SD ; = MEAN\nGOOD\nBETTER\n\n\n&gt; N ; &gt; SD ; = MEAN\nUNSTABLE\nGOOD\n\n\n&lt; N ; &gt; SD ; = MEAN\nUNSTABLE\nGOOD\n\n\n= N ; = SD ; \\(\\neq\\) MEAN\nGOOD\nGOOD\n\n\n= N ; \\(\\neq\\) SD ; \\(\\neq\\) MEAN\nGOOD\nGOOD\n\n\n&gt; N ; &gt; SD ; \\(\\neq\\) MEAN\nOK\nOK\n\n\n&lt; N ; &gt; SD ; \\(\\neq\\) MEAN\nOK\nOK"
  },
  {
    "objectID": "code/stats_ttest_chi.html#non-parametric-alternative-for-independent-samples",
    "href": "code/stats_ttest_chi.html#non-parametric-alternative-for-independent-samples",
    "title": "Statistics",
    "section": "Non-Parametric Alternative for independent samples",
    "text": "Non-Parametric Alternative for independent samples\nSince the t-test requires calculation of the mean, it is sensitive to outliers. Therefore, it is better to use a non-parametric approach\nMann-Whitney test (also known as Wilcoxon rank-sum test)\n\nHypotheses\nThe test does not directly compare means or medians!\n\nNull Hypothesis (\\(H_0\\)​): Two populations (from which the samples are drawn) have the same distribution in terms of relative position.\nAlternative Hypothesis (\\(H_A\\)​): Two populations have different distributions in terms of relative position (i.e., one distribution tends to yield larger values than the other).\n\nIf \\(X\\) comes from population 1 and \\(Y\\) comes from population 2, the null hypothesis often implies:\n\\(H_0: P(X&gt;Y)=0.5\\)\n\n\nExample\n\nsample1 = c(rnorm(20, 5, 2), 18)\nsample2 = c(rnorm(20, 7, 2), 22)\n\ndata_sample = data.frame(group = rep(c(\"sample1\", \"sample2\"), each=21),\n                         value = c(sample1, sample2))\n\n\ndata_sample %&gt;%  ggplot(aes(x = value, fill=group)) + geom_density(alpha=0.5)\n\n\n\n\n\n\n\n\n\nt.test(value ~ group,\n       data=data_sample)\n\n\n    Welch Two Sample t-test\n\ndata:  value by group\nt = -1.7532, df = 39.76, p-value = 0.08727\nalternative hypothesis: true difference in means between group sample1 and group sample2 is not equal to 0\n95 percent confidence interval:\n -4.305381  0.305945\nsample estimates:\nmean in group sample1 mean in group sample2 \n             5.358920              7.358638 \n\nwilcox.test(value ~ group,\n            data=data_sample)\n\n\n    Wilcoxon rank sum exact test\n\ndata:  value by group\nW = 124, p-value = 0.01461\nalternative hypothesis: true location shift is not equal to 0\n\n\nBase R only has wilcox.test(), however the documentation says Wilcoxon tests “is also known as the Mann-Whitney test”."
  },
  {
    "objectID": "code/stats_ttest_chi.html#paired-t-test-for-dependent-samples",
    "href": "code/stats_ttest_chi.html#paired-t-test-for-dependent-samples",
    "title": "Statistics",
    "section": "Paired t-test for dependent samples",
    "text": "Paired t-test for dependent samples\nUsed to compare two related groups (e.g., before and after treatment).\n\nFormula\n\\(t = \\dfrac{\\bar{d}}{s_d / \\sqrt{n}}\\)\n\nwhere \\(\\bar{d}\\) is the average difference\n\\(\\bar{d} = \\dfrac{\\sum^N_{i=1} X_{1i} - X_{2i}}{N} = \\dfrac{\\sum^N_{i=1} d_i}{N}\\),\n\n\\(X_{1i}\\) - \\(i\\)-th member of the 1st sample (before treatment)\n\\(X_{2i}\\) - \\(i\\)-th member of the 2nd sample (after treatment)\n\nand \\(s_d\\) is the standard deviation of the differences.\n\\(s_d = \\sqrt{\\dfrac{\\sum_{i=1}^N (d - \\bar{d})^2}{N-1}}\\)\n\n\n\nAdditional assumption\n\nNormal distribution of differences (\\(d_i\\))\n\n\n\nParameter of t-distribution\nAs two samples contain the same members, \\(df\\) = number of members - 1\n\n\nIs there a significant change in blood pressure before and after treatment?\n\nData\n\nbefore &lt;- rnorm(20, mean = 120, sd = 10)\nafter &lt;- before + rnorm(20, mean = -5, sd = 5)\n\ndata_pressure = data.frame(\n pressure = c(before, after),\n group = factor(rep(c('before', 'after'), each=20))\n)\n\ndata_pressure %&gt;% head() \n\n  pressure  group\n1 122.4433 before\n2 112.6301 before\n3 103.6556 before\n4 122.0648 before\n5 110.5196 before\n6 117.7892 before\n\n\n\nggpress = data_pressure %&gt;%  \n  ggplot(aes(x=pressure, fill=group)) +\n  theme_classic()\n\nggpress + geom_boxplot(aes(y=group)) + theme(legend.position = \"none\")\n\n\n\n\n\n\n\n# ggplant + geom_density(alpha=0.5)\n# ggplant + geom_histogram(alpha=0.8, binwidth=1)\n\n\n\nTesting\n\nt.test(pressure ~ group,\n       data = data_pressure, \n       pair = T) # &lt;---- !!!\n\n\n    Paired t-test\n\ndata:  pressure by group\nt = -5.0705, df = 19, p-value = 6.793e-05\nalternative hypothesis: true mean difference is not equal to 0\n95 percent confidence interval:\n -8.996333 -3.739296\nsample estimates:\nmean difference \n      -6.367814"
  },
  {
    "objectID": "code/stats_ttest_chi.html#non-parametric-alternative-for-dependent-samples",
    "href": "code/stats_ttest_chi.html#non-parametric-alternative-for-dependent-samples",
    "title": "Statistics",
    "section": "Non-Parametric Alternative for dependent samples",
    "text": "Non-Parametric Alternative for dependent samples\nWilcoxon signed-rank test\n\nHypotheses\nTesting medians, not means\n\nNull Hypothesis (\\(H_0\\)​): Two dependent populations (from which the samples are drawn) have the same distribution in terms of relative position.\nAlternative Hypothesis (\\(H_A\\)​): Two dependent populations have different distributions in terms of relative position (i.e., one distribution tends to yield larger values than the other).\n\n\n\nTesting before/after data\n\nsample_before = c(rnorm(20, 5, 2), 18)\nsample_after = sample_before + rnorm(21, 1, 2)\n\ndata_before_after = data.frame(group = rep(c(\"before\", \"after\"), each=21),\n                         value = c(sample_before, sample_after))\n\n\ndata_before_after %&gt;%  ggplot(aes(x = value, fill=group)) + geom_density(alpha=0.5)\n\n\n\n\n\n\n\n\n\nwilcox.test(value ~ group,\n            data=data_before_after,\n            pair = TRUE) ## &lt;---\n\n\n    Wilcoxon signed rank exact test\n\ndata:  value by group\nV = 163, p-value = 0.1032\nalternative hypothesis: true location shift is not equal to 0"
  },
  {
    "objectID": "code/stats_ttest_chi.html#assumptions-1",
    "href": "code/stats_ttest_chi.html#assumptions-1",
    "title": "Statistics",
    "section": "Assumptions",
    "text": "Assumptions\n\nAt least one category should be random\nBetter on big samples"
  },
  {
    "objectID": "code/stats_ttest_chi.html#hypotheses-3",
    "href": "code/stats_ttest_chi.html#hypotheses-3",
    "title": "Statistics",
    "section": "Hypotheses",
    "text": "Hypotheses\n\nNull Hypothesis (\\(H_0\\)): There is no association between two categorical variables\nAlternative Hypothesis (\\(H_A\\)): There is some association between two categorical variables"
  },
  {
    "objectID": "code/stats_ttest_chi.html#formula-2",
    "href": "code/stats_ttest_chi.html#formula-2",
    "title": "Statistics",
    "section": "Formula",
    "text": "Formula\n\\(\\chi^2 = \\sum \\frac{(O_i - E_i)^2}{E_i}\\) where (\\(O_i\\)) are the observed frequencies, and (\\(E_i\\)) are the expected frequencies."
  },
  {
    "objectID": "code/stats_ttest_chi.html#parameter-of-chi2-distribution",
    "href": "code/stats_ttest_chi.html#parameter-of-chi2-distribution",
    "title": "Statistics",
    "section": "Parameter of \\(\\chi^2\\)-distribution",
    "text": "Parameter of \\(\\chi^2\\)-distribution\nDegrees of freedom \\(df\\)\n\n(number of rows in contingency table - 1) * (number of columns in contingency table - 1)"
  },
  {
    "objectID": "code/stats_ttest_chi.html#contingency-tables",
    "href": "code/stats_ttest_chi.html#contingency-tables",
    "title": "Statistics",
    "section": "Contingency tables",
    "text": "Contingency tables\n\n2 x 2\n\nObserved\n\n\n\n\nCured\nNon-cured\n\n\n\n\nTreatment\n20\n7\n\n\nPlacebo\n9\n18\n\n\n\n\n\nExpected\n\n\n\n\nCured\nNon-cured\n\n\n\n\nTreatment\n14.5\n12.5\n\n\nPlacebo\n14.5\n12.5\n\n\n\n\\(\\chi^2 = \\sum^2_i \\sum^2_j \\frac{(O_{ij} - E_{ij})^2}{E_{ij}}\\) (\\(i\\) - row, \\(j\\) - column) \\(\\rightarrow \\chi^2 = \\frac{(20-14.5)^2}{14.5} + \\frac{(9-14.5)^2}{14.5} + \\frac{(18-14.5)^2}{12.5}+\\frac{(7-14.5)^2}{12.5}\\)\n\\(df = (2-1)*(2-1) = 1\\)\n\n\n\nN X M\n\nObserved\n\n\n\n\n\n\n\n\n\nBlood Pressure\nUnderweight\n(BMI &lt; 18.5)\nNormal Weight\n(BMI 18.5–24.9)\nOverweight\n(BMI ≥ 25)\n\n\nNormal\n40\n120\n90\n\n\nPrehypertension\n20\n80\n130\n\n\nHypertension\n10\n50\n160\n\n\n\n\n\nExpected\n\n\n\n\n\n\n\n\n\nBlood Pressure\nUnderweight\n(BMI &lt; 18.5)\nNormal Weight\n(BMI 18.5–24.9)\nOverweight\n(BMI ≥ 25)\n\n\nNormal\n25\n89.29\n135.71\n\n\nPrehypertension\n23\n82.14\n124.86\n\n\nHypertension\n22\n78.57\n119.43\n\n\n\n\\(\\chi^2 = \\sum^2_i \\sum^2_j \\frac{(O_{ij} - E_{ij})^2}{E_{ij}}\\) (\\(i\\) - row, \\(j\\) - column)\n\\(df = (N-1)(M-1)\\)"
  },
  {
    "objectID": "code/stats_ttest_chi.html#does-disease-outcome-depend-on-treatment-group",
    "href": "code/stats_ttest_chi.html#does-disease-outcome-depend-on-treatment-group",
    "title": "Statistics",
    "section": "Does disease outcome depend on treatment group ?",
    "text": "Does disease outcome depend on treatment group ?\n\n\n\n\n\n\n\n\n\n\nCured\nNot cured\nRow Total\n\n\n\n\nTreatment\n12\n8\n20\n\n\nPlacebo\n6\n10\n16\n\n\nColumn Total\n18\n18\n36\n\n\n\n\nExpected values calculation\nIn a 2x2 contingency table, the expected frequency for each cell is calculated as:\n\\[E_{ij} = \\frac{(R_i \\times C_j)}{N}\\]\nWhere: - \\(R_i\\) = Total of row \\(i\\). - \\(C_j\\) = Total of column \\(j\\). - \\(N\\) = Grand total.\n\n\n\n\nCured\nNot cured\n\n\n\n\nTreatment\n\\((18 \\times 20)/36 = 10\\)\n\\((18 \\times 20)/36 = 10\\)\n\n\nPlacebo\n\\((18 \\times 16)/36 = 8\\)\n\\((18 \\times 16)/36 = 8\\)\n\n\n\n\n\nStatistic calculation\n\\(\\chi^2 = \\sum \\frac{(O_i - E_i)^2}{E_i}\\) where (\\(O_i\\)) are the observed frequencies, and (\\(E_i\\)) are the expected\n\n\nCode\n\ndata_cure = data.frame(\n  Outcome = factor(rep(c('Cured', 'Not cured'), e=18)),\n  Group = factor(c(rep(\"Treatment\", 12), rep(\"Placebo\", 6), rep(\"Treatment\", 8), rep(\"Placebo\", 10))))\n\ndata_cure %&gt;%  head()\n\n  Outcome     Group\n1   Cured Treatment\n2   Cured Treatment\n3   Cured Treatment\n4   Cured Treatment\n5   Cured Treatment\n6   Cured Treatment\n\n\n\n\nContingency table\n\ncontingency_table = table(data_cure$Outcome, data_cure$Group)\ncontingency_table\n\n           \n            Placebo Treatment\n  Cured           6        12\n  Not cured      10         8\n\n\n\n\nTest\nWe don’t need to calculate the expected values. The chisq.test() do it for us.\n\nchisq.test(contingency_table, \n           # correct = F\n           )\n\n\n    Pearson's Chi-squared test with Yates' continuity correction\n\ndata:  contingency_table\nX-squared = 1.0125, df = 1, p-value = 0.3143\n\n\n\n\\(p.value &gt; 0.05\\)\nWe failed to reject the \\(H_0\\) about independence of Outcome and Group"
  },
  {
    "objectID": "code/stats_ttest_chi.html#assumptions-2",
    "href": "code/stats_ttest_chi.html#assumptions-2",
    "title": "Statistics",
    "section": "Assumptions",
    "text": "Assumptions\n\nfor both not random categories! (otherwise it will be too conservative)\n\nUsually used only for 2x2 contingency table\nThe test is exact because it computes the exact probability of the observed data (and more extreme data) under the null hypothesis"
  },
  {
    "objectID": "code/stats_ttest_chi.html#hypotheses-4",
    "href": "code/stats_ttest_chi.html#hypotheses-4",
    "title": "Statistics",
    "section": "Hypotheses",
    "text": "Hypotheses\n\nNull Hypothesis (\\(H_0\\)): There is no association between two categorical variables\nAlternative Hypothesis (\\(H_A\\)): There is some association between two categorical variables"
  },
  {
    "objectID": "code/stats_ttest_chi.html#does-the-presence-of-the-disease-depend-on-the-gene-knockout",
    "href": "code/stats_ttest_chi.html#does-the-presence-of-the-disease-depend-on-the-gene-knockout",
    "title": "Statistics",
    "section": "Does the presence of the disease depend on the gene knockout?",
    "text": "Does the presence of the disease depend on the gene knockout?\n\nData\n\n\n\n\n\n\n\n\n\n\nExpert guessed “treatment”\nExpert guessed “control”\nRow Total\n\n\n\n\nTreatment\n1\n3\n4\n\n\nControl\n3\n1\n4\n\n\nColumn Total\n4\n4\n8\n\n\n\n\ndata_knockout = data.frame(\n  Outcome = factor(rep(c('Disease', 'No disease'), e=4)),\n  Group = factor(c(\"Knockout\", \"Control\", rep(\"Knockout\", 3), rep(\"Control\", 3))))\n\ndata_knockout %&gt;%  head()\n\n     Outcome    Group\n1    Disease Knockout\n2    Disease  Control\n3    Disease Knockout\n4    Disease Knockout\n5 No disease Knockout\n6 No disease  Control\n\n\n\n\nContingency table\n\ncontingency_table_1 = table(data_knockout$Group, data_knockout$Outcome)\ncontingency_table_1\n\n          \n           Disease No disease\n  Control        1          3\n  Knockout       3          1\n\n\n\n\nTesting\n\nfisher.test(contingency_table_1)\n\n\n    Fisher's Exact Test for Count Data\n\ndata:  contingency_table_1\np-value = 0.4857\nalternative hypothesis: true odds ratio is not equal to 1\n95 percent confidence interval:\n 0.001607888 4.722931239\nsample estimates:\nodds ratio \n  0.156047 \n\n\n\n\\(p.value &gt; 0.05\\)\nWe failed reject \\(H_0\\) about absence of association between categorical variables."
  },
  {
    "objectID": "code/stats_ttest_chi.html#is-your-data-normal",
    "href": "code/stats_ttest_chi.html#is-your-data-normal",
    "title": "Statistics",
    "section": "Is your data normal?",
    "text": "Is your data normal?\n\nQQ-plot\nDraws the correlation between a given sample and the normal distribution\n\n\nOn sunlight plant data\nAnalyzing each group independantly\n\nqqnorm(data_sunlight_plant %&gt;%  filter(group=='Sunlight') %&gt;%  pull(height))\nqqline(data_sunlight_plant %&gt;%  filter(group=='Sunlight') %&gt;%  pull(height))\n\n\n\n\n\n\n\nqqnorm(data_sunlight_plant %&gt;%  filter(group=='Shade') %&gt;%  pull(height))\nqqline(data_sunlight_plant %&gt;%  filter(group=='Shade') %&gt;%  pull(height))\n\n\n\n\n\n\n\n\n\n\nOn blood pressure data\n\nqqnorm(data_pressure %&gt;%  filter(group=='before') %&gt;%  pull(pressure))\nqqline(data_pressure %&gt;%  filter(group=='before') %&gt;%  pull(pressure))\n\n\n\n\n\n\n\nqqnorm(data_pressure %&gt;%  filter(group=='after') %&gt;%  pull(pressure))\nqqline(data_pressure %&gt;%  filter(group=='after') %&gt;%  pull(pressure))"
  },
  {
    "objectID": "code/stats_ttest_chi.html#chi-square-goodness-of-fit-test",
    "href": "code/stats_ttest_chi.html#chi-square-goodness-of-fit-test",
    "title": "Statistics",
    "section": "Chi-Square Goodness-of-Fit Test",
    "text": "Chi-Square Goodness-of-Fit Test"
  },
  {
    "objectID": "code/stats_ttest_chi.html#n-x-1-contingency-table",
    "href": "code/stats_ttest_chi.html#n-x-1-contingency-table",
    "title": "Statistics",
    "section": "N x 1 contingency table",
    "text": "N x 1 contingency table\nBelow are two different tables, but they are placed next to each other\n\n\n\nObserved\nExpected\n\n\n\n\n92\n90\n\n\n27\n30\n\n\n28\n30\n\n\n17\n10\n\n\n\n\\(\\chi^2 = \\sum^4_i \\frac{(O_i - E_i)^2}{E_i}\\), \\(df = N-1\\)"
  },
  {
    "objectID": "code/stats_ttest_chi.html#are-observed-ratios-of-pea-plant-traits-consistent-with-mendels-expected-9331-ratio",
    "href": "code/stats_ttest_chi.html#are-observed-ratios-of-pea-plant-traits-consistent-with-mendels-expected-9331-ratio",
    "title": "Statistics",
    "section": "Are observed ratios of pea plant traits consistent with Mendel’s expected 9:3:3:1 ratio?",
    "text": "Are observed ratios of pea plant traits consistent with Mendel’s expected 9:3:3:1 ratio?\n\nData\n\nobserved &lt;- c(435, 150, 160, 55)\nexpected &lt;- c(9, 3, 3, 1) / sum(c(9, 3, 3, 1)) * sum(observed)\n\n\nbarplot(rbind(observed, expected), \n        beside = TRUE, \n        col = c(\"blue\", \"red\"), \n        legend = c(\"Observed\", \"Expected\"))\n\n\n\n\n\n\n\n\n\n\nCode\n\nchisq.test(x=observed, p=expected/sum(expected))\n\n\n    Chi-squared test for given probabilities\n\ndata:  observed\nX-squared = 1.6667, df = 3, p-value = 0.6444\n\n\n\np - expected proportions (instead of values)\n\\(p.value &gt; 0.05\\) and it means that the two sets of frequencies are likely to belong to the same distribution or in other words: the observed values are not significantly different from the expected values"
  },
  {
    "objectID": "presentations/visual_sins_inspiration.html#visualization-sins-1",
    "href": "presentations/visual_sins_inspiration.html#visualization-sins-1",
    "title": "Visualization sins and inspirations",
    "section": "Visualization sins",
    "text": "Visualization sins\nPartly taken from\n\nFriends Don’t Let Friends Make Bad Graphs\nMisinformed By Visualization\n\nI highly recommend to visit this web-pages!"
  },
  {
    "objectID": "homeworks/HW2.html",
    "href": "homeworks/HW2.html",
    "title": "Homework on Statistical Distributions and Visualization",
    "section": "",
    "text": "library(ggplot2)\nlibrary(dplyr)\nlibrary(tidyr)"
  },
  {
    "objectID": "homeworks/HW3.html",
    "href": "homeworks/HW3.html",
    "title": "Homework #3",
    "section": "",
    "text": "library(ggplot2)\nlibrary(dplyr)\nlibrary(tidyr)"
  },
  {
    "objectID": "homeworks/HW3.html#dataset",
    "href": "homeworks/HW3.html#dataset",
    "title": "Homework #3",
    "section": "1. Dataset",
    "text": "1. Dataset\n\n1.1 Read the data from file patients.csv\n\nDon’t forget about parameters for reading\n\n\n#\n\n\n\n1.2 Show summary\n\n#\n\n1.2.1 Don’t you see something strange?\n&lt;...WRITE HERE...&gt;"
  },
  {
    "objectID": "homeworks/HW3.html#cleaning",
    "href": "homeworks/HW3.html#cleaning",
    "title": "Homework #3",
    "section": "2. Cleaning",
    "text": "2. Cleaning\n\n2.1. Deal with NAs\n2.1.1 Count number of NAs in each column\n\n#\n\n2.1.2 Show rows with at least one NA in any column\n\nuse complete.cases()\n\n\n#\n\n2.1.3 Do something with rows with NAs\n\nDelete or remain ..?\n\n\n#\n\n\n\n2.2 Deal with outliers\n2.2.1 Which columns have outliers?\n\nCreate box-plots of continuous variables (columns)\n\n\n#\n\n&lt;...WRITE HERE what column have outliers ...&gt;\n2.2.2 Filter out rows with obvious outliers in this column\n\n#"
  },
  {
    "objectID": "homeworks/HW3.html#eda",
    "href": "homeworks/HW3.html#eda",
    "title": "Homework #3",
    "section": "3. EDA",
    "text": "3. EDA\n\n3.1 Distributions of continuous data\n\nShow histograms of Age, Na_to_K, Glucose\n\n\n#\n\n\n\n3.2 Distribution of factor variables\n3.2.1 Draw a barplot where the height represents the number of obseravtions in each blood pressure (BP) group and the fill represents Sex\n\nX-axis = BP, fill = Sex\n“dodge” or “stack” barplot\n\n\n#\n\n3.2.2 Draw barplot where the height represents number of observations in each Cholesterol group and the fill represents blood pressure (BP)\n\nX-axis = Cholesterol, fill = BP\n“dodge” or “stack” barplot\n\n\n#\n\n\nP.S. We will test the independence of BP and Cholesterol in 5.1"
  },
  {
    "objectID": "homeworks/HW3.html#testing-averages-between-2-groups",
    "href": "homeworks/HW3.html#testing-averages-between-2-groups",
    "title": "Homework #3",
    "section": "4. Testing averages between 2 groups",
    "text": "4. Testing averages between 2 groups\n\n4.1 Do average Ages significantly differ between 2 Sex groups?\n4.1.0 (*) Draw the plot with two histograms of Ages for each Sex group\n\n#\n\n4.1.1 Conduct the test\n\nChoose appropriate test\n\n\n#\n\n4.1.2 Write the conclusion\n&lt;...WRITE HERE...&gt;\n\n\n4.2 Do average Glucose significantly differ between two Cholesterol groups?\n4.2.0 (*) Draw the plot with two histograms of Glucose for each Cholesterol group\n\n#\n\n4.2.1 Conduct the test\n\nChoose appropriate test\n\n\n#\n\n4.2.2 Write the conclusion\n&lt;...WRITE HERE...&gt;"
  },
  {
    "objectID": "homeworks/HW3.html#testing-the-independence-between-two-categories",
    "href": "homeworks/HW3.html#testing-the-independence-between-two-categories",
    "title": "Homework #3",
    "section": "5. Testing the independence between two categories",
    "text": "5. Testing the independence between two categories\n\n5.1 Do Blood pressure (BP) levels depend on Cholesterol levels?\n5.1.1 Create contingency table\n\n#\n\n5.1.2 Conduct the test\n\nChi-square or Fisher exact?\n\n\n#\n\n5.1.3 Write the conclusion\n&lt;...WRITE HERE...&gt;"
  },
  {
    "objectID": "homeworks/HW3.html#correlation",
    "href": "homeworks/HW3.html#correlation",
    "title": "Homework #3",
    "section": "6. Correlation",
    "text": "6. Correlation\n\n6.1 Are Age and Glucose correlated?\n6.1.0 (*) Draw scatter-plot Age vs Glucose\n\n#\n\n6.1.1 Show Pearson’s correlation value\n\nAdditionally test how far the coefficient is from zero\n\n\n#\n\n6.1.2 Is correlation is siginificant?\n&lt;...WRITE HERE...&gt;"
  },
  {
    "objectID": "homeworks/HW3.html#linear-regression",
    "href": "homeworks/HW3.html#linear-regression",
    "title": "Homework #3",
    "section": "7. Linear regression",
    "text": "7. Linear regression\n\n7.1 Build a linear model of Glucose dependence on Age\n7.1.1 Build a model\n\n#\n\n7.1.2 Show summary of the model\n\n#\n\n7.1.3 Is coefficient significantly far from zero?\n&lt;...WRITE HERE...&gt;\n7.1.4 (*) Plot the model line with scatterplot\n\n#"
  },
  {
    "objectID": "homeworks/HW1.html",
    "href": "homeworks/HW1.html",
    "title": "Homework #1: Exploring elephant data",
    "section": "",
    "text": "Download the provided dataset ElephantsMF.csv and place it in your working directory.\nThe dataset contains the following columns:\n- rownames: Unique identifiers for each record (elephant).\n- Age: Age of the elephants (years).\n- Height: Height of the elephants (cm).\n- Sex: Sex of the elephants (M for Male, F for Female).\n\n\n\nEvery result must be shown! If you create or changing some variable/column/dataframe, show it!\n\n\nDon’t forget to save your changes where needed\n\nFor example, dataset %&gt;% function() does not change the dataset, but dataset = dataset %&gt;% function() does\n\n\n\n\n\nlibrary(readr)\nlibrary(dplyr)\nlibrary(tidyr)"
  },
  {
    "objectID": "homeworks/HW1.html#downloading-libraries",
    "href": "homeworks/HW1.html#downloading-libraries",
    "title": "Homework #1: Exploring elephant data",
    "section": "",
    "text": "library(readr)\nlibrary(dplyr)\nlibrary(tidyr)"
  },
  {
    "objectID": "homeworks/HW1.html#vectors",
    "href": "homeworks/HW1.html#vectors",
    "title": "Homework #1: Exploring elephant data",
    "section": "Vectors",
    "text": "Vectors\n\n1. Create vector containing numbers from -20 to 50 and numbers 100, 110\n\n# vec =\n\n\n\n2. Subtract by 10 and then divide by 2 each value in this vector\n\n# \n\n\n\n3. Create"
  },
  {
    "objectID": "homeworks/HW1.html#data-loading",
    "href": "homeworks/HW1.html#data-loading",
    "title": "Homework #1: Exploring elephant data",
    "section": "Data Loading",
    "text": "Data Loading\n\n3. Load the dataset using read.csv(), save it to variable dataset and show the first 10 rows.\n\n# dataset &lt;- read...\n#\n\n\nDon’t forget to set parameters to\n\nspecify NAs values\nmake character columns factors\nfirst column a rowname\n\nhead(...) - by default it returns first 5 rows, but we need 10 :)\n\n3.1 Make dataset a tibble\n\n#\n\n\n\n4. Check the structure and summary of the data.\n\n#\n\n\nJust use special functions"
  },
  {
    "objectID": "homeworks/HW1.html#data-cleaning",
    "href": "homeworks/HW1.html#data-cleaning",
    "title": "Homework #1: Exploring elephant data",
    "section": "Data Cleaning",
    "text": "Data Cleaning\n\n5. Check for missing values (NA) in the dataset (how many in each column?).\n\n#\n\n\n\n6. Verify that the Sex column contains only valid categories (M and F).\n\n#\n\n\nTip: just use table() or unique()"
  },
  {
    "objectID": "homeworks/HW1.html#data-transformation",
    "href": "homeworks/HW1.html#data-transformation",
    "title": "Homework #1: Exploring elephant data",
    "section": "Data Transformation",
    "text": "Data Transformation\n\n7. Create a new column Age_category categorizing elephants based on Age:\n\n“Young” for Age &lt; 5\n“Sub-adult” for 5 &lt;= Age &lt; 15\n“Adult” for Age &gt;= 15\n\n\n##\n\n\nUse cut() - don’t forget about parameter labels = c(...)\nEnsure that you created column in your dataset !\n\n\n\n8. Create a column Height_category that splits Height into two categories: “Below Median” and “Above Median” based on the median height.\n\n#\n\n\nmedian() and ifelse()\nDon’t forget to make new column a factor\nEnsure that you created column in your dataset !\n\n\n\n9. Create a new column that contain the Height in meters (divide by 100), delete column with Height in cm.\n\n##\n\n\nYou can set a new name of column or leave the old one.\nRemember how to delete column\nTip: mutate(). Parameter .keep=... may be useful to alternatively delete column\nEnsure the column is created inside dataset\n\n\n\n10. Round column Height in meters to two decimal places (e.g. 1.4567 -&gt; 1.46), i.e. replace values in column with rounded ones\n\n#\n\n\nTip: round() and look for a specific parameter\nEnsure the column is modified inside dataset"
  },
  {
    "objectID": "homeworks/HW1.html#exploratory-data-analysis",
    "href": "homeworks/HW1.html#exploratory-data-analysis",
    "title": "Homework #1: Exploring elephant data",
    "section": "Exploratory Data Analysis",
    "text": "Exploratory Data Analysis\n\n11. Compute mean values of Height for each Sex (in meters)\n\n##\n\n\nDon’t forget that mean() works only on vectors\nif you are advanced user, you can use group_by() and summarize()\n\n\n\n12. Identify the row with the maximum Height and print this row (not number of row!).\n\n#\n\n\nTip: which.max()\n\n\n\n13. Show a counts and frequency tables for the Age_category column. Show both counts and frequencies\n\n##\n\n\ntable() and prop.table()\n\n\n\n14. Show a contingency table of Sex and Height_category (number of elephants for every combination of these two categories)\n\n#\n\n\ntable()\n\n\n\n15. Group dataset by Height_category and calculate mean and sd of Age for each group.\n\n#\n\n\n\n16. Show the rows for elephants taller than 2 metres but shorter than 2.5 metres, and younger than 15 years old. Then select the Age and Height columns.\n\n#\n\n\nuse special dplyr functions\n\n\n\n17. Identify the top 3 tallest elephants and extract their Age, Height, and Sex.\n\n#\n\n\nYou may be using data arranging and head()\n\n\n\n18. Show rows of the 3 tallest and 3 the shortest elephants (not separately, but within one dataset)\n\n##\n\n\nYou may be using data arranging\nbasic functions (head() and tail()) can also be useful, but remember how ordered is your data\n+1 point if you make it by one line of code (show as one data.frame)\n\nTip: you can use either n() or nrow() and slice()\n\n\n\n\n19. Identify 3 oldest elephants for each Sex and extract their Age and Height.\n\n#\n\n\ngroup_by() and slice_head()"
  },
  {
    "objectID": "homeworks/HW1.html#exporting-data",
    "href": "homeworks/HW1.html#exporting-data",
    "title": "Homework #1: Exploring elephant data",
    "section": "Exporting Data",
    "text": "Exporting Data\n\n20. Save our modified dataset with new columns as a new CSV file.\n\n#\n\n\nName the file whatever you want\nSet row.names = FALSE if you are using the base function. The function from readr works fine by itself"
  },
  {
    "objectID": "code/anova.html",
    "href": "code/anova.html",
    "title": "ANOVA",
    "section": "",
    "text": "ANOVA (Analysis of Variance)\nUsed to compare means across more than two groups. ANOVA evaluates the variability within and between groups using the sum of squares.\n\nAssumptions\n\nData are normally distributed within each group.\nGroups have equal variances.\n\n\n\nHypotheses\n\nNull Hypothesis (H0): All group means are equal.\nAlternative Hypothesis (HA): At least one group mean is different.\n\n\n\nFormula\n\\(F = \\frac{MS_{between}}{MS_{within}}\\)\n\n\nExample Scenario\nDoes fertilizer type influence crop yield?\n\n\nData\n\ndata &lt;- data.frame(\n  fertilizer = rep(c(\"Type A\", \"Type B\", \"Type C\"), each = 10),\n  yield = c(rnorm(10, mean = 20, sd = 3), rnorm(10, mean = 25, sd = 3), rnorm(10, mean = 22, sd = 3))\n)\n\n\nboxplot(yield ~ fertilizer, data = data, main = \"Yield by Fertilizer Type\")\n\n\n\n\n\n\n\n\n\n\nCode Example\n\n# Using aov (Type I)\nanova_result &lt;- aov(yield ~ fertilizer, data = data)\nsummary(anova_result)\n\n            Df Sum Sq Mean Sq F value Pr(&gt;F)\nfertilizer   2  39.48  19.739   2.244  0.125\nResiduals   27 237.51   8.797               \n\n# Using car package for Type II/III ANOVA\nif (!requireNamespace(\"car\", quietly = TRUE)) install.packages(\"car\")\nlibrary(car)\n\nLoading required package: carData\n\nAnova(lm(yield ~ fertilizer, data = data), type = \"II\")\n\nAnova Table (Type II tests)\n\nResponse: yield\n            Sum Sq Df F value Pr(&gt;F)\nfertilizer  39.477  2  2.2439 0.1255\nResiduals  237.509 27               \n\n\n\n\nOutput Explanation\n\nF-statistic: Ratio of variance between groups to variance within groups.\np-value: Tests the null hypothesis that all group means are equal.\n\n\n\nNon-Parametric Alternative\nKruskal-Wallis test can be used for non-normal data.\n\nkruskal.test(yield ~ fertilizer, data = data)\n\n\n    Kruskal-Wallis rank sum test\n\ndata:  yield by fertilizer\nKruskal-Wallis chi-squared = 3.631, df = 2, p-value = 0.1628"
  },
  {
    "objectID": "code/basic_r.html",
    "href": "code/basic_r.html",
    "title": "Prac #1. Basic R",
    "section": "",
    "text": "Here you can see\n\nThis file with code on top of the screen\nConsole, where you can write code line by line. In fact, when you execute the code from the file, the entire script is run via the console\nFiles, Help etc. on the bottom right below\nEnvironment containing all created variables on the top right\n\nWe can create new files, projects and even presentations or websites. RStudio provides us with useful tools for programming, especially in R, but we can also do it in python, bash and other languages.\n\n\nPrint\n\n# ?getwd()\n\nTo open help for a function (here, getwd).\nOr just go to Help on the bottom right below"
  },
  {
    "objectID": "code/basic_r.html#help",
    "href": "code/basic_r.html#help",
    "title": "Prac #1. Basic R",
    "section": "",
    "text": "Print\n\n# ?getwd()\n\nTo open help for a function (here, getwd).\nOr just go to Help on the bottom right below"
  },
  {
    "objectID": "code/basic_r.html#tips-for-you",
    "href": "code/basic_r.html#tips-for-you",
    "title": "Prac #1. Basic R",
    "section": "Tips for you",
    "text": "Tips for you\nPress Tab while writing something and RStudio will help you. Often it helps even without pressing the button :)\n\n#"
  },
  {
    "objectID": "code/basic_r.html#markdown",
    "href": "code/basic_r.html#markdown",
    "title": "Prac #1. Basic R",
    "section": "Markdown",
    "text": "Markdown\n\nMarkdown - is markup language for creating formatted text\n\nMost useful formattings:\n\n**bold text** - bold text\n*italic text* - italic text\n# Head - Heading as above “R markdown”. Main section.\nMultiple # (##/####/####, etc.) - Headings of subsections (as ‘Markdown’ written above)\n&gt; - quote\n\nR Markdown also supports LaTeX which useful for writing mathematical equations:\n\n$E = mc^2$ is turned into \\(E = mc^2\\)"
  },
  {
    "objectID": "code/basic_r.html#knit",
    "href": "code/basic_r.html#knit",
    "title": "Prac #1. Basic R",
    "section": "knit",
    "text": "knit\nR Markdown allows us to “knit” this project and create beautiful report in html, pdf and even Word. To do that find the blue ball on top of the screen and click on it. While knitting all chunks will be executed again taking into account you options set for chunks."
  },
  {
    "objectID": "code/basic_r.html#hotkeys",
    "href": "code/basic_r.html#hotkeys",
    "title": "Prac #1. Basic R",
    "section": "Hotkeys",
    "text": "Hotkeys\n\n\n\nAction\nWindows/Linux\nMac\n\n\n\n\nKnit the document\nCtrl + Shift + K\nCmd + Shift + K\n\n\nCreate a chunk\nCtrl + Alt + I\nCmd + Option + I\n\n\nRun current line\nCtrl + Enter\nCmd + Enter\n\n\nRun current chunk\nCtrl + Alt + C\nCmd + Option + C\n\n\nShow all shortcuts\nAlt + Shift + K\nOption + Shift + K\n\n\nDelete current line\nCtrl + D\nCmd + D\n\n\nComment current line\nCtrl + Shift + C\nCmd + Shift + C"
  },
  {
    "objectID": "code/basic_r.html#variables",
    "href": "code/basic_r.html#variables",
    "title": "Prac #1. Basic R",
    "section": "Variables",
    "text": "Variables\nAll you need to know about variables is that they can store values which we assign\n\nvariable = 37\nvar_character = 'biology'\nvar_bool = TRUE\n\nWe can just run code with name of variable to see its value\n\nvariable\n\n[1] 37\n\nvar_character\n\n[1] \"biology\"\n\nvar_bool\n\n[1] TRUE\n\n\n\nCreate variable height and show its value\n\n\n# \n\nChange the value:\n\nvariable = variable + 100\nvariable\n\n[1] 137\n\n\n\nThe kid grew up by 10. Change the value of variable height\n\n\n# height = \n\n\nMathematical operations\n\nx = 19\ny = 9\n\n\n- x\n\n[1] -19\n\nx + y\n\n[1] 28\n\nx - y\n\n[1] 10\n\nx * y\n\n[1] 171\n\nx / y \n\n[1] 2.111111\n\nx ^ y # x to the power of y\n\n[1] 322687697779\n\nsqrt(x) # square root\n\n[1] 4.358899\n\n# sum(1,2,NA,34, na.rm = TRUE)\n\nx %% y # ‘remainder’ of division \n\n[1] 1\n\nx %/% y # integer division\n\n[1] 2\n\n\n\ny + 2 * 3\n\n[1] 15\n\n(y + 2) * 3\n\n[1] 33\n\n\n\nWe have height and weight. Let’s calculate Body mass index (bmi) = W / H(meters)^2\n\n\nheight = 170\nweight = 68\n# bmi = \n\n\n\nLogical operations\n\nx &gt; y\n\n[1] TRUE\n\nx &lt; y\n\n[1] FALSE\n\nx == y # is equal\n\n[1] FALSE\n\nx != y # is not equal\n\n[1] TRUE\n\n\n\n10 &lt; 10\n\n[1] FALSE\n\n10 &lt;= 10\n\n[1] TRUE\n\n\n\nx &lt; 10 & y &lt; 10 \n\n[1] FALSE\n\nx &lt; 10 | y &lt; 10\n\n[1] TRUE\n\n\n\nbool1 = TRUE\nbool2 = FALSE\n\n! &lt;-&gt; “not”\n\n!bool1\n\n[1] FALSE\n\n!bool2\n\n[1] TRUE\n\n\n\nCheck if obtained BMI low, normal or high\n\n\nbmi_high = 30\nbmi_low = 18\n\n# bmi"
  },
  {
    "objectID": "code/basic_r.html#vectors",
    "href": "code/basic_r.html#vectors",
    "title": "Prac #1. Basic R",
    "section": "Vectors",
    "text": "Vectors\nVector is a simple one-dimensional array. In R it can contain only one type of data. The function used to create vector is c().\nHere we create some vectors and store them in corresponding variables:\n\nv_numeric = c(1,2,3,4)\nv_logical = c(T,F,F,T)\nv_character = c(\"1\",\"2\",\"3\",\"4\")\n# c(1,2,'3')\n# c(T,1,0,F)\n\n(R allows us not to write whole FALSE and TRUE, bur write only first letter)\nSimple way to create integer vector\n\n1:5\n\n[1] 1 2 3 4 5\n\n5:1\n\n[1] 5 4 3 2 1\n\n-1:1\n\n[1] -1  0  1\n\n\n\nc(1:5, c(11,13,14))\n\n[1]  1  2  3  4  5 11 13 14\n\nc(7:10, 1:5)\n\n[1]  7  8  9 10  1  2  3  4  5\n\nc(1:5,7:10)\n\n[1]  1  2  3  4  5  7  8  9 10\n\n\nValues in vector are not sorted and unique by default!\n\nCreate vector scores containing numbers from 10 to 20 and number 30 - students’ scores from exam\n\n\n# scores \n\n\nIndexes\nWe can access to the values of vector by indexes.\n\nvec = c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\")\nvec[3]\n\n[1] \"C\"\n\nvec[7]\n\n[1] NA\n\nvecnew = vec[-1]\nvecnew\n\n[1] \"B\" \"C\" \"D\" \"E\" \"F\"\n\n\nNA indicates a missing value. It appears here because the 7th element does not exist in the vector\nWhat if we use vectors as indexes…?\n\n# vec[1,2,3] # ERROR\nvec[1:3]\n\n[1] \"A\" \"B\" \"C\"\n\nvec[3:1]\n\n[1] \"C\" \"B\" \"A\"\n\nvec[c(3,1,5)]\n\n[1] \"C\" \"A\" \"E\"\n\n\nInside of [ ] vector is interpreted as a indexes of values in vec\n\nShow what scores 2nd 3rd, 4th and 7th students have (use scores vector) and delete 5th and 6th students’ scores (save new vector as scores)\n\n\n# scores \n# scores =\n\n\n\nGreat feature of R language - vectorization\n\nMathematical operations\nWhat will be the result of this operation?\n\nvec1234 = c(1, 2, 3, 4)\nvec1234 * 5\n\n[1]  5 10 15 20\n\n# c(vec1234, 5)\n\nWow! Isn’t it cool? We can do anything with vectors not by using some operation for each value step by step, but using operation for each value only once\n\nc(1, 2, 3, 4) + 5 - 2\n\n[1] 4 5 6 7\n\nc(1, 2, 3, 4) ^ 2\n\n[1]  1  4  9 16\n\nsqrt(vec1234)\n\n[1] 1.000000 1.414214 1.732051 2.000000\n\n# !v_logical\n\nMoreover, we can perform mathematical operations on two vectors\n\nvec123 = c(1, 2, 3, 0) \nvec321 = c(3, 2, 1, 4)\n\nvec_new = vec123 * vec321\nvec_new\n\n[1] 3 4 3 0\n\n\nThe result is also vector!\n\nWe heights and weights of patients. Calculate their BMIs (W / H(meters)^2) using vectorization.\n\n\nheights = c(180, 170, 175, 196)\nweights = c(120, 80, 90, 59)\n# BMIs =\n\n\n\nLogical operations\nAlso vectorized\n\nvec1234 &gt; 2\n\n[1] FALSE FALSE  TRUE  TRUE\n\n\n\nvec123 &gt;= vec321\n\n[1] FALSE  TRUE  TRUE FALSE\n\n\n\nCheck if patients’ BMIs high, normal or low using vectorization\n\n\nbmi_high = 30\nbmi_low = 18\n\n# BMIs"
  },
  {
    "objectID": "code/basic_r.html#the-fun-is-just-started",
    "href": "code/basic_r.html#the-fun-is-just-started",
    "title": "Prac #1. Basic R",
    "section": "The fun is just started!",
    "text": "The fun is just started!\n\nCreate vectors from vectors\n\nweights_of_seed = c(1:4, 10:15, 4:7)\nweights_of_seed\n\n [1]  1  2  3  4 10 11 12 13 14 15  4  5  6  7\n\n\n\n\nUse conditions (logic) inside square brackets\n\nweights_of_seed[weights_of_seed &lt; 5]\n\n[1] 1 2 3 4 4\n\n\nLets break out this. Firstly, logical vector is created inside the brackets to filter the data. For example, we filter data with values more than 5\n\nlogical_vector = weights_of_seed &lt; 5\nlogical_vector\n\n [1]  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE\n[13] FALSE FALSE\n\n\nThan logical vector “make” to filter out values which have “FALSE” in corresponding index\n\nweights_of_seed[logical_vector]\n\n[1] 1 2 3 4 4\n\n\nIt is VERY useful for filtering simple data.\n\nweights_of_seed[weights_of_seed &lt; 10 & weights_of_seed &gt; 2]\n\n[1] 3 4 4 5 6 7\n\n\n\nLet’s extract from BMIs values that are normal\n\n\nbmi_high = 30\nbmi_low = 18\n\n# BMI[]"
  },
  {
    "objectID": "code/basic_r.html#basic-statistics",
    "href": "code/basic_r.html#basic-statistics",
    "title": "Prac #1. Basic R",
    "section": "Basic statistics",
    "text": "Basic statistics\n\nLength\n\nlength(weights_of_seed)\n\n[1] 14\n\n\nWe can already compute some statistics on numerical vectors!\n\nsum(weights_of_seed) / length(weights_of_seed)\n\n[1] 7.642857\n\nmean(weights_of_seed)\n\n[1] 7.642857\n\nmedian(weights_of_seed)\n\n[1] 6.5\n\n\n\nvar(weights_of_seed)\n\n[1] 22.55495\n\nsd(weights_of_seed)\n\n[1] 4.749205\n\nvar(weights_of_seed) == sd(weights_of_seed)^2\n\n[1] FALSE\n\n\n\n\nMin and max\n\nmax(weights_of_seed)\n\n[1] 15\n\nmin(weights_of_seed)\n\n[1] 1\n\nrange(weights_of_seed) # min and max (vector!)\n\n[1]  1 15\n\n\n\n\nQuantiles\n\nquantile(weights_of_seed)\n\n   0%   25%   50%   75%  100% \n 1.00  4.00  6.50 11.75 15.00 \n\nquantile(weights_of_seed, probs = c(0.1, 0.5, 0.9))\n\n 10%  50%  90% \n 2.3  6.5 13.7 \n\nquantile(weights_of_seed, probs = c(0.5)) == median(weights_of_seed)\n\n 50% \nTRUE \n\n\n\n\nValues above the mean\n\nmean_value = mean(weights_of_seed)\nweights_of_seed[weights_of_seed &gt; mean_value]\n\n[1] 10 11 12 13 14 15\n\n\n\nHow many students’ scores are in scores vector?\nCalculate mean, median of scores\nWhat’s the minimal score ?\n\n\n# scores"
  },
  {
    "objectID": "code/basic_r.html#two-associated-vectors",
    "href": "code/basic_r.html#two-associated-vectors",
    "title": "Prac #1. Basic R",
    "section": "Two “associated” vectors",
    "text": "Two “associated” vectors\n\nNamed vectors\n\nstudents_names = c('Daniel', 'Sasha', 'Robert', 'Alice', \n                   'Diana', 'Anastasia', 'Alexey', 'Julia')\nage = c(15, 32, 18, 8, 23, 17,22, 23)\n\nStudents older than 18\n\nstudents_names[age &gt;= 18] # ANY logical vector\n\n[1] \"Sasha\"  \"Robert\" \"Diana\"  \"Alexey\" \"Julia\" \n\n\nStudents aged 18 or more\n\nstudents_names[age &gt;= 18]\n\n[1] \"Sasha\"  \"Robert\" \"Diana\"  \"Alexey\" \"Julia\" \n\n\nWhat if we want to extract names AND their age. We can set names for each value in vector using names() function\nnames() function returns names from vector. Vector student_age had no names:\n\nstudents_age_vec = age\nnames(students_age_vec)\n\nNULL\n\n\nAnd we can set such names as we do it with variables:\n\nnames(students_age_vec) = students_names\nstudents_age_vec\n\n   Daniel     Sasha    Robert     Alice     Diana Anastasia    Alexey     Julia \n       15        32        18         8        23        17        22        23 \n\n\nNow we can access values using names!\n\nstudents_age_vec['Alice']\n\nAlice \n    8 \n\n\nAnother way to create “named” vector:\n\nnamed_vec = c(\"vlaue1\" = 1, \"value2\" = 2, \"value3\" = 3)\nnamed_vec\n\nvlaue1 value2 value3 \n     1      2      3 \n\n\n\n\nList\n\nstudents_age_list = list(students_names, age)\nstudents_age_list\n\n[[1]]\n[1] \"Daniel\"    \"Sasha\"     \"Robert\"    \"Alice\"     \"Diana\"     \"Anastasia\"\n[7] \"Alexey\"    \"Julia\"    \n\n[[2]]\n[1] 15 32 18  8 23 17 22 23\n\n\n\n# students_age_list['Alice'] # NOTHING\n\nNow we can add several vectors inside same “structure”. Let’s add weight and height and set names to each vector:\n\nheight = c(175, 181, 188, 120, 170, 168, 178, 172)\nweight = c(70, 75, 80, 45, 55, 50, 78, 62)\n\nstudents_list = list(names = students_names,\n                     age=age,\n                     height=height,\n                     weight=weight)\n\nstudents_list\n\n$names\n[1] \"Daniel\"    \"Sasha\"     \"Robert\"    \"Alice\"     \"Diana\"     \"Anastasia\"\n[7] \"Alexey\"    \"Julia\"    \n\n$age\n[1] 15 32 18  8 23 17 22 23\n\n$height\n[1] 175 181 188 120 170 168 178 172\n\n$weight\n[1] 70 75 80 45 55 50 78 62\n\n\nEach vector represents a piece of information about each student. Vectors here are like columns in a table (data frame)\n\nList data access\nWe can access vectors in several ways\n\nstudents_list[2] # NOT A VECTOR\n\n$age\n[1] 15 32 18  8 23 17 22 23\n\nstudents_list[[2]] # VECTOR\n\n[1] 15 32 18  8 23 17 22 23\n\nstudents_list$weight  # vector\n\n[1] 70 75 80 45 55 50 78 62\n\n\nCertain values:\n\n# students_list[[2]][5]\n\nstudents_list$age[5]\n\n[1] 23\n\n\n\n\nImportant note\nThe list may contain many vectors, and not of the same length!\n\nlist(\n  c(1,2,3,4,5),\n  c('A', 'B', 'C')\n)\n\n[[1]]\n[1] 1 2 3 4 5\n\n[[2]]\n[1] \"A\" \"B\" \"C\"\n\n\nIt is not necessary to include NA (empty) values to save the “table” structure. This makes the list a little bit more flexible, but inconvenient for storing tabular data.\n\nmarks_of_students = list(\n  Alice = c(5,4,5,3,4,4),\n  Sasha = c(3,3,3),\n  Robert = c(5,5,5,5)\n)\n\nmarks_of_students\n\n$Alice\n[1] 5 4 5 3 4 4\n\n$Sasha\n[1] 3 3 3\n\n$Robert\n[1] 5 5 5 5\n\n\nIf each value in every vector represent piece of information about the same students, then we should know the student’s name index and then access all vectors by this index. In other words, how to extract the row?\n\nindex_alice = which(students_list$names == 'Alice')\n\nstudents_list$age[index_alice]\n\n[1] 8\n\nstudents_list$weight[index_alice]\n\n[1] 45\n\n# lapply(students_list, function(x) x[index_alice])\n\n\nwhich(logical_vector) - return positions where logical_vector contain TRUE\n\nIs there more convenient way to store tabular data?"
  },
  {
    "objectID": "code/basic_r.html#data-frames",
    "href": "code/basic_r.html#data-frames",
    "title": "Prac #1. Basic R",
    "section": "Data frames",
    "text": "Data frames\nWe created 4 vectors for each trait.\n\nstudents_names = c('Daniel', 'Sasha', 'Robert', 'Alice', \n                   'Diana', 'Anastasia', 'Alexey', 'Julia')\nvec_age = c(15, 32, 18, 8, 23, 17,22, 23)\nheight = c(175, 181, 188, 120, 170, 168, 178, 172)\nweight = c(70, 75, 80, 45, 55, 50, 78, 62)\n\nNow create data-frame!\n\nstudents_df = data.frame(age=vec_age,\n                         height=height,\n                         weight=weight,\n                         \n                         row.names = students_names)\n\nstudents_df\n\n          age height weight\nDaniel     15    175     70\nSasha      32    181     75\nRobert     18    188     80\nAlice       8    120     45\nDiana      23    170     55\nAnastasia  17    168     50\nAlexey     22    178     78\nJulia      23    172     62\n\n\nNow we have a beautiful representation of tabular data. In addition, data-frames make it easier to manipulate data.\n\nData access\nIn some principles, data.frame is similar to list\n\nstudents_df[1] # differs from list :)\n\n          age\nDaniel     15\nSasha      32\nRobert     18\nAlice       8\nDiana      23\nAnastasia  17\nAlexey     22\nJulia      23\n\nstudents_df[[1]]\n\n[1] 15 32 18  8 23 17 22 23\n\n# with one value inside [] it is iterpreted as a column name (name of vector in list)\nstudents_df[\"age\"]\n\n          age\nDaniel     15\nSasha      32\nRobert     18\nAlice       8\nDiana      23\nAnastasia  17\nAlexey     22\nJulia      23\n\nstudents_df$age\n\n[1] 15 32 18  8 23 17 22 23\n\n\nAccessing the data in specific row and column:\n\n# With two values: [row_name, column_name]\nstudents_df[\"Daniel\", 'weight'] \n\n[1] 70\n\nstudents_df[1, ]\n\n       age height weight\nDaniel  15    175     70\n\n\n\nstudents_df[2:4, 2:3]\n\n       height weight\nSasha     181     75\nRobert    188     80\nAlice     120     45\n\nstudents_df[c(3,1,5), ]\n\n       age height weight\nRobert  18    188     80\nDaniel  15    175     70\nDiana   23    170     55\n\nstudents_df[c('Sasha', 'Robert', 'Alice'), c(\"height\", \"weight\")]\n\n       height weight\nSasha     181     75\nRobert    188     80\nAlice     120     45\n\n# \"empty\" column value mean \"all columns\"\nstudents_df[c('Sasha', 'Robert', 'Alice'), ]\n\n       age height weight\nSasha   32    181     75\nRobert  18    188     80\nAlice    8    120     45\n\n\n\nCreate data-frame students_itmo using vectors students and scores (first 6 values). Make students’ names row.names and scores column name “Marks”\nWhat mark does Masha have?\n\n\n# students_itmo = \n\n\n\nNew column\n\n# factor variables (why to use them over character)\n\nstudents_df$column = c(1,2,3,4,4,5,5,6)\n\nstudents_df$city = c(rep('Moscow', 3), rep('SPb', 3), rep('Kazan', 2))\n\nstudents_df$is_tall = ifelse(students_df$height &gt;= 180, 'Tall', 'Short')\n\nstudents_df$age_range = cut(\n  students_df$age,\n  breaks = c(0, 10, 20, 30, Inf),\n  labels = c(\"Child\", \"Sub-adult\", \"Adult\", 'Old')\n)\n\nstudents_df\n\n          age height weight column   city is_tall age_range\nDaniel     15    175     70      1 Moscow   Short Sub-adult\nSasha      32    181     75      2 Moscow    Tall       Old\nRobert     18    188     80      3 Moscow    Tall Sub-adult\nAlice       8    120     45      4    SPb   Short     Child\nDiana      23    170     55      4    SPb   Short     Adult\nAnastasia  17    168     50      5    SPb   Short Sub-adult\nAlexey     22    178     78      5  Kazan   Short     Adult\nJulia      23    172     62      6  Kazan   Short     Adult\n\n\n\nrep(value, number) - creates vector containing value number times\nifelse(condition, value_if_true, value_if_false) - returns value_if_true, if condition is TRUE and value_if_false otherwise\ncut(vector, breaks = c(...)) - breaks values in vector into ranges according to breaks and returns ranges in format (x, y] or return labels if sepcified\n\n\nTransforming types\n\nstudents_df$is_tall = as.factor(students_df$is_tall)\nstudents_df$city =  as.factor(students_df$city)\n\n\nas.factor() - transform column with numeric or character type into factor\nas.numeric(), as.character, as.list() ….\n\n\n\n\nDeleting a column\n\nstudents_df$column = NULL\nstudents_df\n\n          age height weight   city is_tall age_range\nDaniel     15    175     70 Moscow   Short Sub-adult\nSasha      32    181     75 Moscow    Tall       Old\nRobert     18    188     80 Moscow    Tall Sub-adult\nAlice       8    120     45    SPb   Short     Child\nDiana      23    170     55    SPb   Short     Adult\nAnastasia  17    168     50    SPb   Short Sub-adult\nAlexey     22    178     78  Kazan   Short     Adult\nJulia      23    172     62  Kazan   Short     Adult\n\n\n\n\nOrdering\n\nstudents_df[order(students_df$age), ]\n\n          age height weight   city is_tall age_range\nAlice       8    120     45    SPb   Short     Child\nDaniel     15    175     70 Moscow   Short Sub-adult\nAnastasia  17    168     50    SPb   Short Sub-adult\nRobert     18    188     80 Moscow    Tall Sub-adult\nAlexey     22    178     78  Kazan   Short     Adult\nDiana      23    170     55    SPb   Short     Adult\nJulia      23    172     62  Kazan   Short     Adult\nSasha      32    181     75 Moscow    Tall       Old\n\n# vec[c(3,1,5)]\n\nstudents_df[order(students_df$age, decreasing = T),]\n\n          age height weight   city is_tall age_range\nSasha      32    181     75 Moscow    Tall       Old\nDiana      23    170     55    SPb   Short     Adult\nJulia      23    172     62  Kazan   Short     Adult\nAlexey     22    178     78  Kazan   Short     Adult\nRobert     18    188     80 Moscow    Tall Sub-adult\nAnastasia  17    168     50    SPb   Short Sub-adult\nDaniel     15    175     70 Moscow   Short Sub-adult\nAlice       8    120     45    SPb   Short     Child\n\n\n\nAdd to students_itmo new columns “subject” and “avg_score”.\nTransform “subject” into factor.\nArrange data-frame by avg_score\nDelete Marks column\n\n\nsubject = c('math', 'phys', 'math', 'statisctics', 'molevo', 'biology')\navg_score = c(4,5,4,3,5,4)\n\n#students_itmo\n\n\n\nFiltering\n\nstudents_df[students_df$height &gt; 170, ]\n\n       age height weight   city is_tall age_range\nDaniel  15    175     70 Moscow   Short Sub-adult\nSasha   32    181     75 Moscow    Tall       Old\nRobert  18    188     80 Moscow    Tall Sub-adult\nAlexey  22    178     78  Kazan   Short     Adult\nJulia   23    172     62  Kazan   Short     Adult\n\nstudents_df[students_df$height &gt; 170 & age &gt; 20, ]\n\n       age height weight   city is_tall age_range\nSasha   32    181     75 Moscow    Tall       Old\nAlexey  22    178     78  Kazan   Short     Adult\nJulia   23    172     62  Kazan   Short     Adult\n\nstudents_df[students_df$city %in% c('Moscow', 'SPb'), ]\n\n          age height weight   city is_tall age_range\nDaniel     15    175     70 Moscow   Short Sub-adult\nSasha      32    181     75 Moscow    Tall       Old\nRobert     18    188     80 Moscow    Tall Sub-adult\nAlice       8    120     45    SPb   Short     Child\nDiana      23    170     55    SPb   Short     Adult\nAnastasia  17    168     50    SPb   Short Sub-adult\n\nsubset(students_df, height &gt; 170)\n\n       age height weight   city is_tall age_range\nDaniel  15    175     70 Moscow   Short Sub-adult\nSasha   32    181     75 Moscow    Tall       Old\nRobert  18    188     80 Moscow    Tall Sub-adult\nAlexey  22    178     78  Kazan   Short     Adult\nJulia   23    172     62  Kazan   Short     Adult\n\n\n\nExtract rows from students_itmo which have avg_score 4 &lt;=\n\n\n# students_itmo \n\n\n\nDescribe data-frame\n\nstr(students_df) # useful for a first look at the data\n\n'data.frame':   8 obs. of  6 variables:\n $ age      : num  15 32 18 8 23 17 22 23\n $ height   : num  175 181 188 120 170 168 178 172\n $ weight   : num  70 75 80 45 55 50 78 62\n $ city     : Factor w/ 3 levels \"Kazan\",\"Moscow\",..: 2 2 2 3 3 3 1 1\n $ is_tall  : Factor w/ 2 levels \"Short\",\"Tall\": 1 2 2 1 1 1 1 1\n $ age_range: Factor w/ 4 levels \"Child\",\"Sub-adult\",..: 2 4 2 1 3 2 3 3\n\n\n\ncolnames(students_df)\n\n[1] \"age\"       \"height\"    \"weight\"    \"city\"      \"is_tall\"   \"age_range\"\n\nrownames(students_df)\n\n[1] \"Daniel\"    \"Sasha\"     \"Robert\"    \"Alice\"     \"Diana\"     \"Anastasia\"\n[7] \"Alexey\"    \"Julia\"    \n\ndim(students_df) #rows and columns number\n\n[1] 8 6\n\n\n\n\nSummary statistics\n\nstudents_df$is_tall =as.factor(students_df$is_tall)\nsummary(students_df)\n\n      age            height          weight          city    is_tall \n Min.   : 8.00   Min.   :120.0   Min.   :45.00   Kazan :2   Short:6  \n 1st Qu.:16.50   1st Qu.:169.5   1st Qu.:53.75   Moscow:3   Tall :2  \n Median :20.00   Median :173.5   Median :66.00   SPb   :3            \n Mean   :19.75   Mean   :169.0   Mean   :64.38                       \n 3rd Qu.:23.00   3rd Qu.:178.8   3rd Qu.:75.75                       \n Max.   :32.00   Max.   :188.0   Max.   :80.00                       \n     age_range\n Child    :1  \n Sub-adult:3  \n Adult    :3  \n Old      :1  \n              \n              \n\n\nCreate contingency table of the counts at each combination of factor levels\n\ntable(students_df$city)\n\n\n Kazan Moscow    SPb \n     2      3      3 \n\ntable(students_df$city, students_df$age_range)\n\n        \n         Child Sub-adult Adult Old\n  Kazan      0         0     2   0\n  Moscow     0         2     0   1\n  SPb        1         1     1   0\n\n\naddmargins()\n\ncontingency_table = table(students_df$city, students_df$age_range)\n\naddmargins(contingency_table)\n\n        \n         Child Sub-adult Adult Old Sum\n  Kazan      0         0     2   0   2\n  Moscow     0         2     0   1   3\n  SPb        1         1     1   0   3\n  Sum        1         3     3   1   8\n\n\n\nCreate table() of subject from students_itmo and then add margins\n\n\n#"
  },
  {
    "objectID": "code/basic_r.html#p.s.",
    "href": "code/basic_r.html#p.s.",
    "title": "Prac #1. Basic R",
    "section": "P.S.",
    "text": "P.S.\n\nView()\n\nView(students_df)\n\n\n\nAggregation\n\naggregate(age ~ city, students_df, mean)\n\n    city      age\n1  Kazan 22.50000\n2 Moscow 21.66667\n3    SPb 16.00000\n\n\nWe grouped ages by city and than run function (here we calculated mean) for values in these groups\nMedian of heights inside each group of age_range:\n\naggregate(height ~ age_range, students_df, median)\n\n  age_range height\n1     Child    120\n2 Sub-adult    175\n3     Adult    172\n4       Old    181\n\n\n\n\nMatrices\n\nv = c(1,2,3,4,5,6)\n\nmatrix(v)\n\n     [,1]\n[1,]    1\n[2,]    2\n[3,]    3\n[4,]    4\n[5,]    5\n[6,]    6\n\nmatrix(v, nrow = 2)\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n# matrix(v, nrow = 3)\nmatrix(v, nrow = 2, byrow = T)\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6"
  },
  {
    "objectID": "code/distributions_n_clt.html",
    "href": "code/distributions_n_clt.html",
    "title": "CLT",
    "section": "",
    "text": "# here mean and sd - parameters in \"general\" population \n# n - number of elements we choose from population\nnorm_sample = rnorm(n=100, mean=0, sd=1)\n\n#parameters of **sample**\nmean(norm_sample)\n\n[1] -0.003545587\n\nsd(norm_sample)\n\n[1] 0.991645\n\n\n\n\n\n\nexp_sample = rexp(n=1000, rate=2)\n\n# mean()\n# sd()\n\n\n\n\n\nexp_sample = runif(n=1000, min=0, max=1)\n\n# mean()\n# sd()"
  },
  {
    "objectID": "code/distributions_n_clt.html#standard-normal",
    "href": "code/distributions_n_clt.html#standard-normal",
    "title": "CLT",
    "section": "Standard normal",
    "text": "Standard normal\n\ntrue_mean = 5\ntrue_sd = 1\n\n\nSample\n\nsample_size = 50\n\nsample = rnorm(sample_size, true_mean, true_sd)\n\nsample_mean = mean(sample)\n# sample_sd = sd(sample_norm)\nsample_se = se(sample)\n\nhist(sample)\n\n\n\n\n\n\n\n\n\n\nCI (95%)\n\nquantiles = qnorm(0, 1, p = c(0.025, 0.975)) #+- 1.96\n\nc(\n  sample_mean + quantiles[1] * sample_se,\n  sample_mean + quantiles[2] * sample_se\n)\n\n[1] 4.532045 5.196192\n\n\n\n\nConfidence level\n\nsample_size = 100 \nn_samples = 1000\ntrue_mean=5\n\ndf_trial &lt;- tibble(\n  sample_ID = rep(1:n_samples, each=sample_size),\n  value = rnorm(sample_size*n_samples, true_mean, 2)\n  )\n\n\nquantiles = qnorm(0, 1, p = c(0.025, 0.975))\n\n\ndf_ci = df_trial |&gt; group_by(sample_ID) |&gt; \n  summarize(mu = mean(value), \n            se_sample = se(value), \n            conf.min = mu + quantiles[1] * se_sample,\n            conf.max = mu + quantiles[2] * se_sample) |&gt; \n  mutate(out = ifelse((true_mean &lt; conf.max) & (true_mean &gt; conf.min), 'ok', 'missed'))\n\n# df_ci |&gt;  \n  # ggplot(aes(y=)) +\n  # geom_errorbar(aes(xmin = , xmax = , col=)) +\n  # geom_vline(aes(xintercept = ), col='red', lty=2, size=2) +\n  # labs(y=\"Sample\", color='CI covers true mean') \n\nTry to change sample size and see what will happen!"
  },
  {
    "objectID": "code/distributions_n_clt.html#t-distribution",
    "href": "code/distributions_n_clt.html#t-distribution",
    "title": "CLT",
    "section": "t-distribution",
    "text": "t-distribution\n\ntrue_mean = 5\ntrue_sd = 2\n\n\nSample\n\nsample_size = 50\n\nsample = rnorm(sample_size, true_mean, true_sd)\n\nsample_mean = mean(sample)\n# sample_sd = sd(sample_norm)\nsample_se = se(sample)\n\nhist(sample)\n\n\n\n\n\n\n\n\n\n\nCI (95%)\n\nquantiles = qt(df = length(sample)-1, p = c(0.025, 0.975)) \nquantiles\n\n[1] -2.009575  2.009575\n\n\n\nc(\n  sample_mean + quantiles[1] * sample_se,\n  sample_mean + quantiles[2] * sample_se\n)\n\n[1] 4.644896 5.688951\n\n\nTry different size of sample!\n\n\nAnother method for calculation CI with t-distribution\nLooking only on “95 percent confidence interval:”\n\nt.test(sample)\n\n\n    One Sample t-test\n\ndata:  sample\nt = 19.89, df = 49, p-value &lt; 2.2e-16\nalternative hypothesis: true mean is not equal to 0\n95 percent confidence interval:\n 4.644896 5.688951\nsample estimates:\nmean of x \n 5.166924"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Biostatistics in R",
    "section": "",
    "text": "Lecture data\n\nBasic R\n\nDownload\n\nWorking with Dataframes\n\nDownload\n\n\n\n\n\n\n\n\nPresentations\nTBA  \n\n\nHomeworks\n\nHW #1\n\nDownload"
  },
  {
    "objectID": "code/datavis.html",
    "href": "code/datavis.html",
    "title": "Data visualization",
    "section": "",
    "text": "We already know how to extract useful information from data frames. Various statistics tell us a lot about the data. Nevertheless, values of mean, quantiles and standard deviations are inconvenient for understanding the whole picture.\nWe get the most information through our eyes, therefore the skill of presenting the data visually is on of the most powerful. By creating simple visualisations, you can make initial hypotheses and understand possible relationships between variables."
  },
  {
    "objectID": "code/datavis.html#plot",
    "href": "code/datavis.html#plot",
    "title": "Data visualization",
    "section": "plot()",
    "text": "plot()\nThe simplest graph is a points, each having x and y coordinates\n\nx = 1:10\ny = seq(2,20,2) ^ 2\nx\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\ny\n\n [1]   4  16  36  64 100 144 196 256 324 400\n\n\nWe consider that the x and y coordinates at the same positions in each of the vectors correspond to one particular point. So we have points (1,2), (2,4), (3,6) and etc.\n\nseq(from_value, to_value, by_value)- returns a vector with values from from_value to to_valuewith a step by_value\n\n\nScatter plot\n\nplot(x, y)\n\n\n\n\n\n\n\n\n\n\nSepal.Length vs Sepal.Width\n\nplot(iris_df$Sepal.Length, iris_df$Sepal.Width)\n\n\n\n\n\n\n\n\nWe can make this graph prettier\n\nplot(iris_df$Sepal.Length, iris_df$Sepal.Width,\n     main = \"Sepal.Length vs. Sepal.Width\", # the title\n     xlab = \"Sepal.Length\", # Label of X-axis\n     ylab = \"Sepal.Width\", # Label of Y-axis \n     col = \"blue\", # color of plot\n     pch = 19, # type of dots - 19 corresponds to the painted (solid) points\n     cex = 1 # size of dots\n     ) \n\n\n\n\n\n\n\n\n\n\nAll plot() style parameters\n\n\nAll basic R graphical parameters\n\n\n\n\n\n\nAdding lines\nBy default plot() shows scatter plot, but we can change this behavior\n\nplot(x, y,type = 'l') \n\n\n\n\n\n\n\nplot(x, y,type = 'b', lwd = 3) # lwd = linewidth\n\n\n\n\n\n\n\nplot(x, y, type = 'o')\n\n\n\n\n\n\n\n\n\nTerrible plot\nLine graphs should sometimes be avoided, because lines connect points in the order of their position in the vectors\n\nx = c(10,5,9,6,8,7,2,1,4,3)\ny = c(1:4, 6:8,5,10,9)\nx\n\n [1] 10  5  9  6  8  7  2  1  4  3\n\ny\n\n [1]  1  2  3  4  6  7  8  5 10  9\n\n\n\nplot(x, y, type = \"b\",  pch=19)\n\n\n\n\n\n\n\n\nAfter sorting:\n\ndf = data.frame(x, y) %&gt;% arrange(x)\nplot(df$x, df$y,type = \"b\", pch=19)\n\n\n\n\n\n\n\n\n\nggplot2 doesn’t have such problem\n\n\n# basic r advanced\n\n# indexes_to_sort = order(x)\n# x_sorted = x[indexes_to_sort]\n# y_sorted = y[indexes_to_sort]\n# plot(x_sorted, y_sorted, type = \"b\", pch=19)\n\n\nNB! We can’t just sort one of the vectors because we must save the correspondence of x and y coordinates between two vectors."
  },
  {
    "objectID": "code/datavis.html#bar-plots",
    "href": "code/datavis.html#bar-plots",
    "title": "Data visualization",
    "section": "Bar Plots",
    "text": "Bar Plots\n\nheights = c(Roman = 190, \n            Ann = 172, \n            Charlie = 121,\n            Vlad = 183,\n            Sasha = 180) # named vector\nheights \n\n  Roman     Ann Charlie    Vlad   Sasha \n    190     172     121     183     180 \n\nheights = heights %&gt;% sort(decreasing = T)\nbarplot(heights)\n\n\n\n\n\n\n\n\nWe can customize this graph\n\nbarplot(heights, \n        main = \"Heights of people\", # the title \n        xlab = \"Height\", # Label of X-axis \n        ylab = \"Name\", # Label of Y-axis \n        col = \"lightblue\", # color of inner part of bars\n        border = \"blue\", # color of borders\n        horiz = TRUE, # make barplot horizontal\n        xlim = c(0,200) # limits of values showd on x-axis\n        )\n\n\n\n\n\n\n\n\n\nNumber of iris_df species\n\nnumber_of_species = table(iris_df$Species)\nbarplot(number_of_species,\n        col = 'violet')\n\n\n\n\n\n\n\n\nNow we see that our data “is balanced”"
  },
  {
    "objectID": "code/datavis.html#histograms",
    "href": "code/datavis.html#histograms",
    "title": "Data visualization",
    "section": "Histograms",
    "text": "Histograms\n\nDistribution of Sepal.Length\n\nhist(iris_df$Sepal.Length, # only x-axis! \n     main = \"Sepal.Length distribution\", \n     xlab = \"Sepal.length\", \n     col = \"lightgreen\",\n     breaks = 8 # number of x-axis splits for frequency calculation in each of the resulting ranges\n     )\n\n\n\n\n\n\n\n\nEach bar represents frequency of this particular Sepal.Length in dataset.\nFor example, first bar have height of 5 - it mean, that there are 5 flowers with Sepal.Length between 4 and 4.5.\nWe can make bars two times thinner\n\nhist(iris_df$Sepal.Length,\n     main = \"Sepal.Length distribution\", \n     xlab = \"Sepal.length\", \n     col = \"lightgreen\", \n     breaks = 16) # &lt;---- changed"
  },
  {
    "objectID": "code/datavis.html#boxplots",
    "href": "code/datavis.html#boxplots",
    "title": "Data visualization",
    "section": "Boxplots",
    "text": "Boxplots\nBoxplots are very informative charts. They display similar but more information than a histogram.\n\n\n\nboxplot(iris_df$Sepal.Length, \n        # main = \"Sepal.Length\", \n        ylab = \"\",\n        xlab = \"Sepal.Length\", \n        col = \"darkviolet\",\n        horizontal = T)\n\n\n\n\n\n\n\n\n\nGrouped boxplots\n\nboxplot(iris_df$Sepal.Length ~ iris_df$Species, \n        main = \"Sepal.Length\",\n        xlab = \"Species\",\n        ylab = \"Sepal.Length\", \n        col = \"darkviolet\",\n        horizontal = F)\n\n\n\n\n\n\n\n\n\nBoxplot is good for unimodal similar to normaldistributions, as it doesn’t show two peaks"
  },
  {
    "objectID": "code/datavis.html#philosophy",
    "href": "code/datavis.html#philosophy",
    "title": "Data visualization",
    "section": "Philosophy",
    "text": "Philosophy\n\nThe ggplot is based on 3 things: data, aesthetics and geoms (geomertries)\nInside the geoms there are aesthetics.\nInside the aesthetics we put the variables from the data that we want to see in the plot. These will be our axes.\nAn axis is not just an x and y coordinate - any aesthetic, such as a fill,color,size etc. can also be an (pseudo)axis.\nEach component in the graphic is added layer by layer"
  },
  {
    "objectID": "code/datavis.html#intro",
    "href": "code/datavis.html#intro",
    "title": "Data visualization",
    "section": "Intro",
    "text": "Intro\n\nggplot(data=iris_df, # data\n       mapping = aes(x=Sepal.Length, y=Sepal.Width)) + #aesthetics (axes)\n  geom_point()  # geom\n\n\n\n\n\n\n\n\nObligatory components to create chart:\n\nggplot(data=iris_df) - data: data.frame, tibble …\nggplot(..., mappings=aes(x=Sepal.Length, y=Sepal.Width)) - aesthetics, which turned into x and y axis.\n+ geom_point() - geom, at least one."
  },
  {
    "objectID": "code/datavis.html#storing-plots-in-variables",
    "href": "code/datavis.html#storing-plots-in-variables",
    "title": "Data visualization",
    "section": "Storing plots in variables",
    "text": "Storing plots in variables\n\np = ggplot(data=iris_df, mapping = aes(x=Sepal.Length, y=Sepal.Width)) + geom_point()\n\np"
  },
  {
    "objectID": "code/datavis.html#adding-new-aesthetics-axes",
    "href": "code/datavis.html#adding-new-aesthetics-axes",
    "title": "Data visualization",
    "section": "Adding new aesthetics (“axes”)",
    "text": "Adding new aesthetics (“axes”)\n\nAdding right to the ggplot()\n\nggplot(data=iris_df,\n       mapping = aes(x=Sepal.Length, \n                     y=Sepal.Width,\n                     color=Species, \n                     size = Petal.Width,\n                     shape=Sepal.Length.Category)) + \n  geom_point() \n\n\n\n\n\n\n\n\n\n\nAdding to variable\n\np + aes(color=Species, size = Petal.Width,\n        shape=Sepal.Length.Category)\n\n\n\n\n\n\n\n\n\n\nAesthetics list\n\ncolor - color\nfill - filling color\nsize - size\nshape - shape of points\nstroke - stroke thickness\nalpha - transparency\nother specific for geoms aesthetics…"
  },
  {
    "objectID": "code/datavis.html#geoms",
    "href": "code/datavis.html#geoms",
    "title": "Data visualization",
    "section": "Geoms",
    "text": "Geoms\nGeometries define the types of graphs in the diagram.\n\nGeoms have specific variables\n\niris_df %&gt;% \n  ggplot(aes(x=Sepal.Width)) +   # &lt;--- here\n  geom_histogram(bins = 20, fill='lightblue', col='black')\n\n\n\n\n\n\n\n\n\n\nAesthetics can also be set up within the geoms\n\naesthetics inside ggplot() are set for all geoms\naesthetics inside geom_..() functions are set only for this geom\n\n\niris_df %&gt;% \n  ggplot() + \n  geom_histogram(aes(x=Sepal.Width),\n                 bins = 20, fill='lightblue', col='black')  # &lt;--- here\n\n\n\n\n\n\n\n\n\n\nAdding several geoms\n\niris_df %&gt;% \n  ggplot(aes(x=Species, y=Sepal.Length)) + \n  geom_boxplot(aes(fill=Species), outliers = F) +\n  geom_jitter(width=0.1)\n\n\n\n\n\n\n\n\n\n\nVariables and aesthetics\n\nAs you have seen,fill, color, size, shape, stroke and alpha can be seen outside of aes(). They can also be set to a specific fixed value.\nEach geom has a certain set of parameters. In aes() there are mandatory and optional parameters, and outside it there are only optional parameters\n\n\nInside the aes()\n\niris_df %&gt;% \n  ggplot(aes(x=Sepal.Length, y=Sepal.Width)) +\n  geom_point(aes(color=Species)) # &lt;--- here\n\n\n\n\n\n\n\n\n\n\nOutside the aes()\n\nggplot(data=iris_df,\n       mapping = aes(x=Sepal.Length, y=Sepal.Width)) +\n  geom_point(color='blue')  # &lt;--- here\n\n\n\n\n\n\n\n\n\n\n\nGeoms can take different data!\n\niris_df %&gt;% \n  ggplot(aes(x=Sepal.Length, y=Sepal.Width)) +\n  \n  geom_point(data=iris_df %&gt;% filter(Sepal.Width &gt; 3), # data (filtered iris)\n             aes(color=Species)) +\n  \n  geom_hex(data=iris_df %&gt;% filter(Sepal.Width &lt; 3)) # another data (filtered iris)"
  },
  {
    "objectID": "code/datavis.html#themes",
    "href": "code/datavis.html#themes",
    "title": "Data visualization",
    "section": "Themes",
    "text": "Themes\n\nBuilt-in themes\n\np + theme_bw()\n\n\n\n\n\n\n\np + theme_classic()\n\n\n\n\n\n\n\np + theme_void()\n\n\n\n\n\n\n\n\n\n\nCustom themes (Advanced)\n\np = p + theme(axis.text = element_text(size = 15),\n          axis.title = element_text(size = 20),\n          panel.background = element_rect(fill = 'white', color='black'))\np"
  },
  {
    "objectID": "code/datavis.html#labels",
    "href": "code/datavis.html#labels",
    "title": "Data visualization",
    "section": "Labels",
    "text": "Labels\n\np +  labs(x='Sepal length', \n          y='Sepal width',\n          \n          color = 'Iris species',\n          # fill =\n          # size = \n          # shape = \n          # stroke =\n          \n          title = 'Scatter plot', \n          subtitle = 'Subtitle',\n          caption = 'It is the great plot',\n          tag = 'A')\n\n\n\n\n\n\n\n\nSimple functions for labeling axes: + xlab() and + ylab()"
  },
  {
    "objectID": "code/datavis.html#scatter-plot-1",
    "href": "code/datavis.html#scatter-plot-1",
    "title": "Data visualization",
    "section": "Scatter plot",
    "text": "Scatter plot\n\niris_df %&gt;% ggplot(aes(x=Petal.Length, y=Petal.Width)) + \n  geom_point() + theme_classic()"
  },
  {
    "objectID": "code/datavis.html#histogram",
    "href": "code/datavis.html#histogram",
    "title": "Data visualization",
    "section": "Histogram",
    "text": "Histogram\n\niris_df %&gt;% ggplot(aes(x=Petal.Length)) + \n  geom_histogram(color='blue', fill='lightblue') +\n  theme_classic()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`."
  },
  {
    "objectID": "code/datavis.html#density-plot",
    "href": "code/datavis.html#density-plot",
    "title": "Data visualization",
    "section": "Density plot",
    "text": "Density plot\n\niris_df %&gt;% ggplot(aes(x=Petal.Width, fill=Species)) + \n  geom_density(alpha=0.8) + theme_classic()"
  },
  {
    "objectID": "code/datavis.html#boxplot",
    "href": "code/datavis.html#boxplot",
    "title": "Data visualization",
    "section": "Boxplot",
    "text": "Boxplot\n\niris_df %&gt;% ggplot(aes(x=Petal.Width, y=Species, fill=Species)) + \n  geom_boxplot() + theme_classic() + theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nYes, we can combine custom and built-in themes in one plot\n\n\nDeleting the legend (as it duplicates color information)\n\n+ theme(legend.position = \"none\")"
  },
  {
    "objectID": "code/datavis.html#barplots",
    "href": "code/datavis.html#barplots",
    "title": "Data visualization",
    "section": "Barplots",
    "text": "Barplots\n\nsepal_len_stats = iris_df %&gt;% group_by(Species) %&gt;% \n  summarise(mean_sepal_len = mean(Sepal.Length), \n            sd_sepal_length = sd(Sepal.Length))\n\nsepal_len_stats\n\n# A tibble: 3 × 3\n  Species    mean_sepal_len sd_sepal_length\n  &lt;fct&gt;               &lt;dbl&gt;           &lt;dbl&gt;\n1 setosa               5.01           0.352\n2 versicolor           5.94           0.516\n3 virginica            6.59           0.636\n\n\n\ngeom_col - if heights of bars are known (continuous data)\n\np_col = sepal_len_stats %&gt;% \n  ggplot(aes(x=Species, y=mean_sepal_len, fill=Species)) + \n  geom_col() + theme_classic() + theme(legend.position = \"none\")\n\np_col\n\n\n\n\n\n\n\n\n\n\nAdding geom_errorbar (SD)\n\np_col + geom_errorbar(aes(ymin=mean_sepal_len-sd_sepal_length,\n                          ymax=mean_sepal_len+sd_sepal_length),\n                      width=0.3)\n\n\n\n\n\n\n\n\n\nThree different types of values are commonly used for error bars, sometimes without even specifying which one is used.\n\nStandard deviation\nStandard error\nConfidence interval\n\nWe will discuss each later\n\n\n\ngeom_bar - if heights are unknown (counting categorical data)\n\niris_df %&gt;% ggplot(aes(x=Sepal.Length.Category, \n                       fill=Sepal.Length.Category)) + \n  geom_bar() + theme_bw() + theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\n\nposition=\"stack\" (by default)\n\niris_df %&gt;% ggplot(aes(x=Sepal.Length.Category, fill=Species)) + \n  geom_bar() + theme_bw() \n\n\n\n\n\n\n\n\n\n\nposition=\"fill\" - scaled from 0 to 1\n\niris_df %&gt;% ggplot(aes(fill=Species, x=Sepal.Length.Category)) + \n  geom_bar(position = 'fill') + theme_bw()\n\n\n\n\n\n\n\n\n\n\nposition=\"dodge\"\n\niris_df %&gt;% ggplot(aes(fill=Species, x=Sepal.Length.Category)) + \n  geom_bar(position = 'dodge')  + theme_bw()"
  },
  {
    "objectID": "code/datavis.html#something-big-and-difficult",
    "href": "code/datavis.html#something-big-and-difficult",
    "title": "Data visualization",
    "section": "Something big and difficult",
    "text": "Something big and difficult\n\nggplot(iris, aes(x = Species, y = Sepal.Length)) +\n  geom_violin(aes(fill = Species), alpha = 0.4) +  # Violin plots\n  geom_boxplot(fill = \"lightgray\", alpha = 0.6, outliers = F, width=0.2) + \n  geom_jitter(aes(fill = Species), width = 0.2, alpha = 0.5, shape=21, col='black') +  \n  geom_hline(aes(yintercept = mean(Sepal.Length)), col='red', linewidth=1, lty=2) +\n  geom_text(aes(label='Global mean', x = 'setosa', y=mean(Sepal.Length)+0.1), col='red') +\n  labs(title = \"Boxplot of Sepal Length by Species with Jittered Points\",\n       x = \"Species\",\n       y = \"Sepal Length (cm)\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nNew geoms used\n\ngeom_violinplot() - Violin plot\ngeom_hline() - horizontal line\ngeom_text() - just text"
  },
  {
    "objectID": "code/datavis.html#saving-the-plot",
    "href": "code/datavis.html#saving-the-plot",
    "title": "Data visualization",
    "section": "Saving the plot",
    "text": "Saving the plot\n\nTo save last drawn plot:\n\nggsave(\n  filename = './bigplot.png', # specify the filename (path to file)\n  device = , # png, pdf, jpeg, svg and others\n  dpi = 320, # resolution\n  width = 1800,\n  height = 1600,\n  units = \"px\" #in, cm, mm\n)\n\nWarning in geom_text(aes(label = \"Global mean\", x = \"setosa\", y = mean(Sepal.Length) + : All aesthetics have length 1, but the data has 150 rows.\nℹ Please consider using `annotate()` or provide this layer with data containing\n  a single row.\n\n\n\n\nSave “everything between”\n\npdf(\"./dodge_barplot.pdf\", width = 6, height = 6)\n\niris_df %&gt;% ggplot(aes(fill=Species, x=Sepal.Length.Category)) + \n  geom_bar(position = 'dodge')\n\ndev.off()\n\nquartz_off_screen \n                2 \n\n\nThis structure allow save into pdf all graphical outputs that between pdf() and dev.off()"
  },
  {
    "objectID": "code/datavis.html#barplot",
    "href": "code/datavis.html#barplot",
    "title": "Data visualization",
    "section": "Barplot",
    "text": "Barplot\n\niris_df %&gt;%  ggbarplot(x=\"Species\", y=\"Sepal.Width\",\n                       fill='Species',\n                       add = \"mean_sd\" # calculate mean and sd\n                       )"
  },
  {
    "objectID": "code/datavis.html#boxplot-1",
    "href": "code/datavis.html#boxplot-1",
    "title": "Data visualization",
    "section": "Boxplot",
    "text": "Boxplot\n\nStatisctics inside!\n\np_pubr = iris_df %&gt;%  ggboxplot(x='Species', y='Sepal.Length', col='Species')\n\ncomparisons &lt;- list( c(\"setosa\", \"versicolor\"), \n                     c(\"setosa\", \"virginica\"), \n                     c(\"virginica\", \"versicolor\") )\n\np_pubr + stat_compare_means(comparisons = comparisons, \n                            label = \"p.signif\")+ \n  stat_compare_means(label.y = 10)\n\n\n\n\n\n\n\n\nSee more about ggpubr HERE"
  },
  {
    "objectID": "code/datavis.html#customizing-fill---scale_fill_manual",
    "href": "code/datavis.html#customizing-fill---scale_fill_manual",
    "title": "Data visualization",
    "section": "Customizing fill - scale_fill_manual()",
    "text": "Customizing fill - scale_fill_manual()\n\n# Advanced -------\niris_df %&gt;% ggplot(aes(x=Species, y=Sepal.Length)) +\n  stat_summary(aes(fill=Species), geom = 'bar', fun = mean) +\n  geom_jitter(aes(fill=Species), shape=21, width = 0.1, \n              stroke=0.5, col='black') +\n  theme_bw() + \n  labs(title = 'Barplots with jitter') +\n# ----------\n\nscale_fill_manual(\n  values=c(\"#e63946\", \"#ffba49\", \"#457b9d\"),\n  labels=c('Setosa sp.', 'Versicolor sp.', 'Virginica sp.'),\n)"
  },
  {
    "objectID": "code/datavis.html#customizing-color---scale_color_manual",
    "href": "code/datavis.html#customizing-color---scale_color_manual",
    "title": "Data visualization",
    "section": "Customizing color - scale_color_manual()",
    "text": "Customizing color - scale_color_manual()\n\niris_df %&gt;% ggplot(aes(x=Sepal.Length, y=Sepal.Width, col=Species)) +\n  geom_point(alpha=0.6, size=4) +\n  theme_classic() + \n\nscale_color_manual(\n  values=c(\"#e63946\", \"#ffba49\", \"#457b9d\"),\n  labels=c('Setosa sp.', 'Versicolor sp.', 'Virginica sp.'),\n)"
  },
  {
    "objectID": "code/datavis.html#facets",
    "href": "code/datavis.html#facets",
    "title": "Data visualization",
    "section": "Facets",
    "text": "Facets\n\nfacet_wrap()\n\niris_df %&gt;% ggplot(aes(x=Petal.Length, y=Petal.Width)) +\n  geom_point(alpha=0.6, size=2) +\n  theme_bw() +\n\n# ----------------------\n\nfacet_wrap(. ~ Species)\n\n\n\n\n\n\n\n\n\n\nfacet_grid()\n\niris_df %&gt;% ggplot(aes(x=Petal.Length, y=Petal.Width)) +\n  geom_point(alpha=0.6, size=2) +\n  theme_bw() +\n# ----------------------\n  facet_grid(cols = vars(Species),\n             rows=vars(Sepal.Length.Category))\n\n\n\n\n\n\n\n  # facet_wrap(Sepal.Length.Category ~ Species)"
  },
  {
    "objectID": "code/advanced_df.html",
    "href": "code/advanced_df.html",
    "title": "Working with Dataframes",
    "section": "",
    "text": "students_hours = read.csv(\"../data/student_lifestyle_dataset.csv\", \n                          row.names = 1,\n                          # header = F,\n                          na.strings = c('','-','dead'),\n                          # comment.char = '#',\n                          # sep = ' ',\n                          # skip = 2,\n                          stringsAsFactors = T\n                          )\n\n# read.csv2()\n# read.table()\n\n\nna.strings = c('','-')- sometimes R interprets empty text in factor columns as one of factor levels. Therefore, this parameter is useful\nrow.names = 1 - make the first column the rows names\nheader = TRUE - whether the data file have a header\ncomment.char = '#' - files can contain comments which starts with specific symbol\nsep=',' - specification of column separator in file.\nSpecific functions (such as read.tsv, read.csv) usually have specific parameter value set (tsv =&gt; '\\t', csv =&gt; ','). However, sometimes people name files csv and use, for instance, ';' separator which should be specified.\nskip = 2 - for example, if the file contains a additional text of the data in the first few lines, you must specify the number of them that should not be interpreted as part of the dataframe\nstringsAsFactors = TRUE - make all character columns (with text) be interpreted as factors\n\n\nstudents_hours |&gt; str()\n\n'data.frame':   2000 obs. of  7 variables:\n $ Study_Hours_Per_Day            : num  6.9 5.3 5.1 6.5 8.1 6 8 8.4 5.2 7.7 ...\n $ Extracurricular_Hours_Per_Day  : num  3.8 3.5 3.9 2.1 0.6 2.1 0.7 1.8 3.6 0.7 ...\n $ Sleep_Hours_Per_Day            : num  8.7 8 9.2 7.2 6.5 8 5.3 5.6 6.3 9.8 ...\n $ Social_Hours_Per_Day           : num  2.8 4.2 1.2 1.7 2.2 0.3 5.7 3 4 4.5 ...\n $ Physical_Activity_Hours_Per_Day: num  1.8 3 4.6 6.5 6.6 7.6 4.3 5.2 4.9 1.3 ...\n $ GPA                            : num  2.99 2.75 2.67 2.88 3.51 2.85 3.08 3.2 2.82 2.76 ...\n $ Stress_Level                   : Factor w/ 3 levels \"High\",\"Low\",\"Moderate\": 3 2 2 3 1 3 1 1 2 3 ...\n\n\n\n\n\n\nlibrary(readr)\n\n\n# read_tsv()\n# read_table().\n\nhead(read_csv(\"../data/student_lifestyle_dataset.csv\", \n         na = c('', '-'),\n         # comment = '#'\n         # quote = '#',\n         # skip = 2\n         ) )\n\n# A tibble: 6 × 8\n  Student_ID Study_Hours_Per_Day Extracurricular_Hours_Per…¹ Sleep_Hours_Per_Day\n       &lt;dbl&gt;               &lt;dbl&gt;                       &lt;dbl&gt;               &lt;dbl&gt;\n1          1                 6.9                         3.8                 8.7\n2          2                 5.3                         3.5                 8  \n3          3                 5.1                         3.9                 9.2\n4          4                 6.5                         2.1                 7.2\n5          5                 8.1                         0.6                 6.5\n6          6                 6                           2.1                 8  \n# ℹ abbreviated name: ¹​Extracurricular_Hours_Per_Day\n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;chr&gt;"
  },
  {
    "objectID": "code/advanced_df.html#base-r",
    "href": "code/advanced_df.html#base-r",
    "title": "Working with Dataframes",
    "section": "",
    "text": "students_hours = read.csv(\"../data/student_lifestyle_dataset.csv\", \n                          row.names = 1,\n                          # header = F,\n                          na.strings = c('','-','dead'),\n                          # comment.char = '#',\n                          # sep = ' ',\n                          # skip = 2,\n                          stringsAsFactors = T\n                          )\n\n# read.csv2()\n# read.table()\n\n\nna.strings = c('','-')- sometimes R interprets empty text in factor columns as one of factor levels. Therefore, this parameter is useful\nrow.names = 1 - make the first column the rows names\nheader = TRUE - whether the data file have a header\ncomment.char = '#' - files can contain comments which starts with specific symbol\nsep=',' - specification of column separator in file.\nSpecific functions (such as read.tsv, read.csv) usually have specific parameter value set (tsv =&gt; '\\t', csv =&gt; ','). However, sometimes people name files csv and use, for instance, ';' separator which should be specified.\nskip = 2 - for example, if the file contains a additional text of the data in the first few lines, you must specify the number of them that should not be interpreted as part of the dataframe\nstringsAsFactors = TRUE - make all character columns (with text) be interpreted as factors\n\n\nstudents_hours |&gt; str()\n\n'data.frame':   2000 obs. of  7 variables:\n $ Study_Hours_Per_Day            : num  6.9 5.3 5.1 6.5 8.1 6 8 8.4 5.2 7.7 ...\n $ Extracurricular_Hours_Per_Day  : num  3.8 3.5 3.9 2.1 0.6 2.1 0.7 1.8 3.6 0.7 ...\n $ Sleep_Hours_Per_Day            : num  8.7 8 9.2 7.2 6.5 8 5.3 5.6 6.3 9.8 ...\n $ Social_Hours_Per_Day           : num  2.8 4.2 1.2 1.7 2.2 0.3 5.7 3 4 4.5 ...\n $ Physical_Activity_Hours_Per_Day: num  1.8 3 4.6 6.5 6.6 7.6 4.3 5.2 4.9 1.3 ...\n $ GPA                            : num  2.99 2.75 2.67 2.88 3.51 2.85 3.08 3.2 2.82 2.76 ...\n $ Stress_Level                   : Factor w/ 3 levels \"High\",\"Low\",\"Moderate\": 3 2 2 3 1 3 1 1 2 3 ..."
  },
  {
    "objectID": "code/advanced_df.html#readr-package",
    "href": "code/advanced_df.html#readr-package",
    "title": "Working with Dataframes",
    "section": "",
    "text": "library(readr)\n\n\n# read_tsv()\n# read_table().\n\nhead(read_csv(\"../data/student_lifestyle_dataset.csv\", \n         na = c('', '-'),\n         # comment = '#'\n         # quote = '#',\n         # skip = 2\n         ) )\n\n# A tibble: 6 × 8\n  Student_ID Study_Hours_Per_Day Extracurricular_Hours_Per…¹ Sleep_Hours_Per_Day\n       &lt;dbl&gt;               &lt;dbl&gt;                       &lt;dbl&gt;               &lt;dbl&gt;\n1          1                 6.9                         3.8                 8.7\n2          2                 5.3                         3.5                 8  \n3          3                 5.1                         3.9                 9.2\n4          4                 6.5                         2.1                 7.2\n5          5                 8.1                         0.6                 6.5\n6          6                 6                           2.1                 8  \n# ℹ abbreviated name: ¹​Extracurricular_Hours_Per_Day\n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;chr&gt;"
  },
  {
    "objectID": "code/advanced_df.html#libraries",
    "href": "code/advanced_df.html#libraries",
    "title": "Working with Dataframes",
    "section": "Libraries",
    "text": "Libraries\n\n# install.packages(c(\"dplyr\", \"tidyr\", 'readr'))\n# install.packages(\"tidyverse\")\n\nlibrary(tidyverse)\n\n# library(dplyr)\n# library(tidyr)\n# library(readr)\n# library(tidyverse)"
  },
  {
    "objectID": "code/advanced_df.html#tibble",
    "href": "code/advanced_df.html#tibble",
    "title": "Working with Dataframes",
    "section": "Tibble",
    "text": "Tibble\n\nLooks like data.frame\nBehave more conveniently\n\nnever changes input data types\nnever customizes variable names\nnever prints all lines\n\n\n\nstudents_tibble = as_tibble(students_hours)\nstudents_tibble\n\n# A tibble: 2,000 × 7\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                 6.9                           3.8                 8.7\n 2                 5.3                           3.5                 8  \n 3                 5.1                           3.9                 9.2\n 4                 6.5                           2.1                 7.2\n 5                 8.1                           0.6                 6.5\n 6                 6                             2.1                 8  \n 7                 8                             0.7                 5.3\n 8                 8.4                           1.8                 5.6\n 9                 5.2                           3.6                 6.3\n10                 7.7                           0.7                 9.8\n# ℹ 1,990 more rows\n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;fct&gt;"
  },
  {
    "objectID": "code/advanced_df.html#important-feature-of-pipe-is-dot-.-advanced",
    "href": "code/advanced_df.html#important-feature-of-pipe-is-dot-.-advanced",
    "title": "Working with Dataframes",
    "section": "Important feature of pipe is dot . (advanced)",
    "text": "Important feature of pipe is dot . (advanced)\n\nstudents_tibble %&gt;% select(Study_Hours_Per_Day:Physical_Activity_Hours_Per_Day) %&gt;% \n  filter(rowSums(.) &gt; 24)\n\n# A tibble: 205 × 5\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                 7.7                           0.7                 9.8\n 2                 6.9                           1.1                 9.1\n 3                 5                             3.3                 8.5\n 4                 8.6                           2.6                 9.4\n 5                 9.7                           1.3                 7.6\n 6                 9.9                           1                   8.4\n 7                 8.2                           0.3                 5.8\n 8                 9.7                           3.8                 9.6\n 9                 9.3                           1.3                 5.8\n10                 9                             2.6                 8.5\n# ℹ 195 more rows\n# ℹ 2 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;\n\n\nIf we need our dataset (object after which the first pipe was written) inside a function a second time, we can refer to it via dot ."
  },
  {
    "objectID": "code/advanced_df.html#dplyr",
    "href": "code/advanced_df.html#dplyr",
    "title": "Working with Dataframes",
    "section": "dplyr",
    "text": "dplyr\n\nGlimpse (structure)\n\nstr(students_tibble)\n\ntibble [2,000 × 7] (S3: tbl_df/tbl/data.frame)\n $ Study_Hours_Per_Day            : num [1:2000] 6.9 5.3 5.1 6.5 8.1 6 8 8.4 5.2 7.7 ...\n $ Extracurricular_Hours_Per_Day  : num [1:2000] 3.8 3.5 3.9 2.1 0.6 2.1 0.7 1.8 3.6 0.7 ...\n $ Sleep_Hours_Per_Day            : num [1:2000] 8.7 8 9.2 7.2 6.5 8 5.3 5.6 6.3 9.8 ...\n $ Social_Hours_Per_Day           : num [1:2000] 2.8 4.2 1.2 1.7 2.2 0.3 5.7 3 4 4.5 ...\n $ Physical_Activity_Hours_Per_Day: num [1:2000] 1.8 3 4.6 6.5 6.6 7.6 4.3 5.2 4.9 1.3 ...\n $ GPA                            : num [1:2000] 2.99 2.75 2.67 2.88 3.51 2.85 3.08 3.2 2.82 2.76 ...\n $ Stress_Level                   : Factor w/ 3 levels \"High\",\"Low\",\"Moderate\": 3 2 2 3 1 3 1 1 2 3 ...\n\nstudents_tibble %&gt;% glimpse(width = 50) \n\nRows: 2,000\nColumns: 7\n$ Study_Hours_Per_Day             &lt;dbl&gt; 6.9, 5.3…\n$ Extracurricular_Hours_Per_Day   &lt;dbl&gt; 3.8, 3.5…\n$ Sleep_Hours_Per_Day             &lt;dbl&gt; 8.7, 8.0…\n$ Social_Hours_Per_Day            &lt;dbl&gt; 2.8, 4.2…\n$ Physical_Activity_Hours_Per_Day &lt;dbl&gt; 1.8, 3.0…\n$ GPA                             &lt;dbl&gt; 2.99, 2.…\n$ Stress_Level                    &lt;fct&gt; Moderate…\n\n\n\n\nArranging (order)\n\n# students_tibble[order(students_tibble$Study_Hours_Per_Day), ]\nstudents_tibble %&gt;% arrange(Study_Hours_Per_Day)\n\n# A tibble: 2,000 × 7\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                   5                           3.3                 8.5\n 2                   5                           2                   7.1\n 3                   5                           0.6                 7.7\n 4                   5                           1                   8.6\n 5                   5                           4                   8.4\n 6                   5                           1.7                 7.6\n 7                   5                           1.7                 5.5\n 8                   5                           3.5                 9  \n 9                   5                           1.6                 6.2\n10                   5                           0.2                 9.9\n# ℹ 1,990 more rows\n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;fct&gt;\n\n# students_tibble[order(students_tibble$Study_Hours_Per_Day, decreasing = T),]\nstudents_tibble %&gt;% arrange(desc(Study_Hours_Per_Day))\n\n# A tibble: 2,000 × 7\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                  10                           2.2                 8.8\n 2                  10                           0.2                 9.9\n 3                  10                           2.6                 7.8\n 4                  10                           3.7                 7.7\n 5                  10                           1.5                 7.2\n 6                  10                           3.7                 8.2\n 7                  10                           0.5                 6.4\n 8                  10                           3.5                 8.1\n 9                  10                           2.2                 9.8\n10                  10                           0.2                 8.8\n# ℹ 1,990 more rows\n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;fct&gt;\n\n\n\nArrange the dataset by Extracurricular_Hours_Per_Day and save it\n\n\n# students_tibble = students_tibble\n\n\n\nSelect\nSelect columns by names\n\n# students_tibble[, c(\"Extracurricular_Hours_Per_Day\", \"Study_Hours_Per_Day\")]\nstudents_tibble %&gt;% select(Extracurricular_Hours_Per_Day, Study_Hours_Per_Day)\n\n# A tibble: 2,000 × 2\n   Extracurricular_Hours_Per_Day Study_Hours_Per_Day\n                           &lt;dbl&gt;               &lt;dbl&gt;\n 1                           3.8                 6.9\n 2                           3.5                 5.3\n 3                           3.9                 5.1\n 4                           2.1                 6.5\n 5                           0.6                 8.1\n 6                           2.1                 6  \n 7                           0.7                 8  \n 8                           1.8                 8.4\n 9                           3.6                 5.2\n10                           0.7                 7.7\n# ℹ 1,990 more rows\n\nstudents_tibble %&gt;%  select(-(Study_Hours_Per_Day:Social_Hours_Per_Day))\n\n# A tibble: 2,000 × 3\n   Physical_Activity_Hours_Per_Day   GPA Stress_Level\n                             &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;       \n 1                             1.8  2.99 Moderate    \n 2                             3    2.75 Low         \n 3                             4.6  2.67 Low         \n 4                             6.5  2.88 Moderate    \n 5                             6.6  3.51 High        \n 6                             7.6  2.85 Moderate    \n 7                             4.3  3.08 High        \n 8                             5.2  3.2  High        \n 9                             4.9  2.82 Low         \n10                             1.3  2.76 Moderate    \n# ℹ 1,990 more rows\n\n\nMinuses are useful for easy column deletion. And also you can use col1:col5 to select columns from the range.\nselect() is powerful function and it is possible to combine it with other functions.\n\n# contains\nstudents_tibble %&gt;% select(contains('Hours'))\n\n# A tibble: 2,000 × 5\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                 6.9                           3.8                 8.7\n 2                 5.3                           3.5                 8  \n 3                 5.1                           3.9                 9.2\n 4                 6.5                           2.1                 7.2\n 5                 8.1                           0.6                 6.5\n 6                 6                             2.1                 8  \n 7                 8                             0.7                 5.3\n 8                 8.4                           1.8                 5.6\n 9                 5.2                           3.6                 6.3\n10                 7.7                           0.7                 9.8\n# ℹ 1,990 more rows\n# ℹ 2 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;\n\n#endswith (also there is starts_with() ficntion)\nstudents_tibble %&gt;% select(ends_with('Per_Day'))\n\n# A tibble: 2,000 × 5\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                 6.9                           3.8                 8.7\n 2                 5.3                           3.5                 8  \n 3                 5.1                           3.9                 9.2\n 4                 6.5                           2.1                 7.2\n 5                 8.1                           0.6                 6.5\n 6                 6                             2.1                 8  \n 7                 8                             0.7                 5.3\n 8                 8.4                           1.8                 5.6\n 9                 5.2                           3.6                 6.3\n10                 7.7                           0.7                 9.8\n# ℹ 1,990 more rows\n# ℹ 2 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;\n\n# only numeric columns\nstudents_tibble %&gt;% select(where(is.numeric)) \n\n# A tibble: 2,000 × 6\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                 6.9                           3.8                 8.7\n 2                 5.3                           3.5                 8  \n 3                 5.1                           3.9                 9.2\n 4                 6.5                           2.1                 7.2\n 5                 8.1                           0.6                 6.5\n 6                 6                             2.1                 8  \n 7                 8                             0.7                 5.3\n 8                 8.4                           1.8                 5.6\n 9                 5.2                           3.6                 6.3\n10                 7.7                           0.7                 9.8\n# ℹ 1,990 more rows\n# ℹ 3 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;\n\n\n\n\nPull\nExtract column as vector\n\n# students_tibble$Extracurricular_Hours_Per_Day\nstudents_tibble %&gt;% pull(Extracurricular_Hours_Per_Day) %&gt;% mean(na.rm = T)\n\n[1] 1.991283\n\n\n\nselect and pull the same column and try to calculate the median()\n\n\n# students_tibble\n# students_tibble\n\n\n\nFiltering\n\n# students_tibble[students_tibble$Extracurricular_Hours_Per_Day &gt; 2 & students_tibble$Study_Hours_Per_Day &gt; 3,]\n\nstudents_tibble %&gt;% filter(Extracurricular_Hours_Per_Day &gt; 2, \n                           Extracurricular_Hours_Per_Day &lt; 3)\n\n# A tibble: 445 × 7\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                 6.5                           2.1                 7.2\n 2                 6                             2.1                 8  \n 3                 6.4                           2.2                 5.7\n 4                 8.6                           2.6                 9.4\n 5                 8.8                           2.2                 8.9\n 6                 6.2                           2.9                 6.8\n 7                 5.2                           2.4                 8.4\n 8                 9.1                           2.2                 7.6\n 9                 9.5                           2.5                 9  \n10                 9.7                           2.8                 7.9\n# ℹ 435 more rows\n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;fct&gt;\n\nstudents_tibble %&gt;% filter(between(Extracurricular_Hours_Per_Day, 2, 3))\n\n# A tibble: 554 × 7\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                 6.5                           2.1                 7.2\n 2                 6                             2.1                 8  \n 3                 6.4                           2.2                 5.7\n 4                 8.6                           2.6                 9.4\n 5                 8.8                           2.2                 8.9\n 6                 6.6                           2                   9.5\n 7                 7.1                           3                   6.1\n 8                 5                             2                   7.1\n 9                 6.2                           2.9                 6.8\n10                 5.2                           2.4                 8.4\n# ℹ 544 more rows\n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;fct&gt;\n\n\n\nSelect GPA and Stress_Level and filter GPA &lt; 2.3\n\n\n# students_tibble\n\n\n\nSlice\n\n# students_tibble[30:50,]\nstudents_tibble %&gt;% slice(30:50)\n\n# A tibble: 21 × 7\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                 9.9                           1                   8.4\n 2                 6.2                           2.9                 6.8\n 3                 5.5                           3.3                 6.6\n 4                 5.2                           2.4                 8.4\n 5                 8.2                           0.7                 8.5\n 6                 9.7                           0.6                 6.7\n 7                 9.1                           2.2                 7.6\n 8                 5.5                           3.6                 9.5\n 9                 8.6                           3.6                 9.4\n10                 8.2                           0.3                 5.8\n# ℹ 11 more rows\n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;fct&gt;\n\nstudents_tibble %&gt;% slice_head()\n\n# A tibble: 1 × 7\n  Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n1                 6.9                           3.8                 8.7\n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;fct&gt;\n\nstudents_tibble %&gt;% slice_head(prop = 0.1)\n\n# A tibble: 200 × 7\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                 6.9                           3.8                 8.7\n 2                 5.3                           3.5                 8  \n 3                 5.1                           3.9                 9.2\n 4                 6.5                           2.1                 7.2\n 5                 8.1                           0.6                 6.5\n 6                 6                             2.1                 8  \n 7                 8                             0.7                 5.3\n 8                 8.4                           1.8                 5.6\n 9                 5.2                           3.6                 6.3\n10                 7.7                           0.7                 9.8\n# ℹ 190 more rows\n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;fct&gt;\n\nstudents_tibble %&gt;% slice_max(Study_Hours_Per_Day)\n\n# A tibble: 18 × 7\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                  10                           2.2                 8.8\n 2                  10                           0.2                 9.9\n 3                  10                           2.6                 7.8\n 4                  10                           3.7                 7.7\n 5                  10                           1.5                 7.2\n 6                  10                           3.7                 8.2\n 7                  10                           0.5                 6.4\n 8                  10                           3.5                 8.1\n 9                  10                           2.2                 9.8\n10                  10                           0.2                 8.8\n11                  10                           1.2                 6.7\n12                  10                           0.1                 8  \n13                  10                           1                   9.4\n14                  10                           0.8                 6.3\n15                  10                           1.6                 6.4\n16                  10                           1.1                 6.4\n17                  10                           3                   8.2\n18                  10                           1                   7.2\n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;fct&gt;\n\nstudents_tibble %&gt;% slice_min(Study_Hours_Per_Day)\n\n# A tibble: 20 × 7\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                   5                           3.3                 8.5\n 2                   5                           2                   7.1\n 3                   5                           0.6                 7.7\n 4                   5                           1                   8.6\n 5                   5                           4                   8.4\n 6                   5                           1.7                 7.6\n 7                   5                           1.7                 5.5\n 8                   5                           3.5                 9  \n 9                   5                           1.6                 6.2\n10                   5                           0.2                 9.9\n11                   5                           2.1                 5.2\n12                   5                           1.8                 9.2\n13                   5                           0.8                 9.8\n14                   5                           0.5                 7.7\n15                   5                           1                   7.5\n16                   5                           0.6                 6.6\n17                   5                           2.3                 6.7\n18                   5                           2.9                 5.9\n19                   5                           0.1                 9.3\n20                   5                           3.9                 9.4\n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;fct&gt;\n\n# students_tibble[(nrow(students_tibble)-5):(nrow(students_tibble)),]\n\nstudents_tibble %&gt;% slice(1:5, (n()-5):n()) # n() is number of \"samples\" (rows)\n\n# A tibble: 11 × 7\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                 6.9                           3.8                 8.7\n 2                 5.3                           3.5                 8  \n 3                 5.1                           3.9                 9.2\n 4                 6.5                           2.1                 7.2\n 5                 8.1                           0.6                 6.5\n 6                 7.9                           3.4                 9  \n 7                 6.5                           0.2                 7.4\n 8                 6.3                           2.8                 8.8\n 9                 6.2                           0                   6.2\n10                 8.1                           0.7                 7.6\n11                 9                             1.7                 7.3\n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;fct&gt;\n\n\n\nArrange dataset by the Social_Hours_Per_Day, choose rows with 10 highest Social_Hours_Per_Day and calculate their mean GPA\n\n\n# students_tibble\n\n\n\nRename column\n\n# students_tibble$SHPD = students_tibble$Study_Hours_Per_Day \n# students_tibble$Study_Hours_Per_Day = NULL\n\nstudents_tibble_2=students_tibble %&gt;%  rename(SHPD = Study_Hours_Per_Day)\nstudents_tibble_2\n\n# A tibble: 2,000 × 7\n    SHPD Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day Social_Hours_Per_Day\n   &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;                &lt;dbl&gt;\n 1   6.9                           3.8                 8.7                  2.8\n 2   5.3                           3.5                 8                    4.2\n 3   5.1                           3.9                 9.2                  1.2\n 4   6.5                           2.1                 7.2                  1.7\n 5   8.1                           0.6                 6.5                  2.2\n 6   6                             2.1                 8                    0.3\n 7   8                             0.7                 5.3                  5.7\n 8   8.4                           1.8                 5.6                  3  \n 9   5.2                           3.6                 6.3                  4  \n10   7.7                           0.7                 9.8                  4.5\n# ℹ 1,990 more rows\n# ℹ 3 more variables: Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;,\n#   Stress_Level &lt;fct&gt;\n\n\n\nRename column Stress_Level -&gt; Stress\n\n\n# students_tibble\n\n\nAdvanced rename column\n\nstudents_tibble %&gt;%  rename_with(~ gsub(\"_Hours_Per_Day\", \"_h\", .x))\n\n# A tibble: 2,000 × 7\n   Study_h Extracurricular_h Sleep_h Social_h Physical_Activity_h   GPA\n     &lt;dbl&gt;             &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;               &lt;dbl&gt; &lt;dbl&gt;\n 1     6.9               3.8     8.7      2.8                 1.8  2.99\n 2     5.3               3.5     8        4.2                 3    2.75\n 3     5.1               3.9     9.2      1.2                 4.6  2.67\n 4     6.5               2.1     7.2      1.7                 6.5  2.88\n 5     8.1               0.6     6.5      2.2                 6.6  3.51\n 6     6                 2.1     8        0.3                 7.6  2.85\n 7     8                 0.7     5.3      5.7                 4.3  3.08\n 8     8.4               1.8     5.6      3                   5.2  3.2 \n 9     5.2               3.6     6.3      4                   4.9  2.82\n10     7.7               0.7     9.8      4.5                 1.3  2.76\n# ℹ 1,990 more rows\n# ℹ 1 more variable: Stress_Level &lt;fct&gt;\n\n\n\n\nAdvanced rename values in column\nFor character columns (output is character)\n\nstudents_tibble %&gt;% \n  mutate(Stress_Level = case_when(\n    Stress_Level == \"High\" ~ 'high',\n    Stress_Level == \"Moderate\" ~ 'medium',\n    Stress_Level == \"Low\" ~ 'low',\n    TRUE ~ as.character(Stress_Level))) #remaining characters are not modified\n\n# A tibble: 2,000 × 7\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                 6.9                           3.8                 8.7\n 2                 5.3                           3.5                 8  \n 3                 5.1                           3.9                 9.2\n 4                 6.5                           2.1                 7.2\n 5                 8.1                           0.6                 6.5\n 6                 6                             2.1                 8  \n 7                 8                             0.7                 5.3\n 8                 8.4                           1.8                 5.6\n 9                 5.2                           3.6                 6.3\n10                 7.7                           0.7                 9.8\n# ℹ 1,990 more rows\n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;chr&gt;\n\n\nFor factor columns\n\nstudents_tibble %&gt;% \n  mutate(Stress_Level = recode(Stress_Level,\n                               \"High\" = 'high',\n                               \"Moderate\" = 'medium',\n                               \"Low\" = 'low'))\n\n# A tibble: 2,000 × 7\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                 6.9                           3.8                 8.7\n 2                 5.3                           3.5                 8  \n 3                 5.1                           3.9                 9.2\n 4                 6.5                           2.1                 7.2\n 5                 8.1                           0.6                 6.5\n 6                 6                             2.1                 8  \n 7                 8                             0.7                 5.3\n 8                 8.4                           1.8                 5.6\n 9                 5.2                           3.6                 6.3\n10                 7.7                           0.7                 9.8\n# ℹ 1,990 more rows\n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;fct&gt;\n\n\n\n\n\nAdding column or row (tibble)\n\nstudents_tibble |&gt; add_column(ID =  1:2000, .before = 1)\n\n# A tibble: 2,000 × 8\n      ID Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n   &lt;int&gt;               &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1     1                 6.9                           3.8                 8.7\n 2     2                 5.3                           3.5                 8  \n 3     3                 5.1                           3.9                 9.2\n 4     4                 6.5                           2.1                 7.2\n 5     5                 8.1                           0.6                 6.5\n 6     6                 6                             2.1                 8  \n 7     7                 8                             0.7                 5.3\n 8     8                 8.4                           1.8                 5.6\n 9     9                 5.2                           3.6                 6.3\n10    10                 7.7                           0.7                 9.8\n# ℹ 1,990 more rows\n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;fct&gt;\n\nstudents_tibble |&gt;  add_row(Study_Hours_Per_Day = 10, Extracurricular_Hours_Per_Day=13, .before = 1)\n\n# A tibble: 2,001 × 7\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                10                            13                  NA  \n 2                 6.9                           3.8                 8.7\n 3                 5.3                           3.5                 8  \n 4                 5.1                           3.9                 9.2\n 5                 6.5                           2.1                 7.2\n 6                 8.1                           0.6                 6.5\n 7                 6                             2.1                 8  \n 8                 8                             0.7                 5.3\n 9                 8.4                           1.8                 5.6\n10                 5.2                           3.6                 6.3\n# ℹ 1,991 more rows\n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;fct&gt;\n\n\n\n\nMutate\nChanging columns and creation new ones using others\n\n# students_tibble$Stress_Level = as.factor(students_tibble$Stress_Level)\nstudents_tibble %&gt;% mutate(Stress_Level = as.factor(Stress_Level), \n                           GPA = round(GPA), \n                           GPA = GPA+1\n                           # .keep='used'\n                           )\n\n# A tibble: 2,000 × 7\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                 6.9                           3.8                 8.7\n 2                 5.3                           3.5                 8  \n 3                 5.1                           3.9                 9.2\n 4                 6.5                           2.1                 7.2\n 5                 8.1                           0.6                 6.5\n 6                 6                             2.1                 8  \n 7                 8                             0.7                 5.3\n 8                 8.4                           1.8                 5.6\n 9                 5.2                           3.6                 6.3\n10                 7.7                           0.7                 9.8\n# ℹ 1,990 more rows\n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;fct&gt;\n\n# students_tibble$GPA_sqrt = sqrt(students_tibble$GPA)\nstudents_tibble %&gt;% \n  mutate(Non_Study_Day_Hours_Per_Day =\n           Social_Hours_Per_Day + Physical_Activity_Hours_Per_Day, \n         .before = 1, .keep = 'all'\n         )\n\n# A tibble: 2,000 × 8\n   Non_Study_Day_Hours_Per_Day Study_Hours_Per_Day Extracurricular_Hours_Per_Day\n                         &lt;dbl&gt;               &lt;dbl&gt;                         &lt;dbl&gt;\n 1                         4.6                 6.9                           3.8\n 2                         7.2                 5.3                           3.5\n 3                         5.8                 5.1                           3.9\n 4                         8.2                 6.5                           2.1\n 5                         8.8                 8.1                           0.6\n 6                         7.9                 6                             2.1\n 7                        10                   8                             0.7\n 8                         8.2                 8.4                           1.8\n 9                         8.9                 5.2                           3.6\n10                         5.8                 7.7                           0.7\n# ℹ 1,990 more rows\n# ℹ 5 more variables: Sleep_Hours_Per_Day &lt;dbl&gt;, Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;fct&gt;\n\n\nBy default, .keep = 'all', and usually it is not worth changing it or even writing this parameter\n\nCreate column Stress_Hours = Extracurricular_Hours_Per_Day + Study_Hours_Per_Day before GPA column and round() it!\nCreate column Study = Study_Hours_Per_Day &gt; 7 -&gt; High, Study_Hours_Per_Day &lt; 7 -&gt; Low -&gt; SAVE!\n\n\n# students_tibble \n\n\nAdvanced mutate\n\nstudents_tibble %&gt;% \n  # mutate(across(Study_Hours_Per_Day:Extracurricular_Hours_Per_Day, ~ floor(.x)))\n  mutate(across(Study_Hours_Per_Day:Extracurricular_Hours_Per_Day, floor))\n\n# A tibble: 2,000 × 7\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                   6                             3                 8.7\n 2                   5                             3                 8  \n 3                   5                             3                 9.2\n 4                   6                             2                 7.2\n 5                   8                             0                 6.5\n 6                   6                             2                 8  \n 7                   8                             0                 5.3\n 8                   8                             1                 5.6\n 9                   5                             3                 6.3\n10                   7                             0                 9.8\n# ℹ 1,990 more rows\n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;fct&gt;\n\n# students_tibble %&gt;% mutate(across(where(is.numeric), ~ceiling(.x)))\nstudents_tibble %&gt;% mutate(across(where(is.numeric), ceiling))\n\n# A tibble: 2,000 × 7\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                   7                             4                   9\n 2                   6                             4                   8\n 3                   6                             4                  10\n 4                   7                             3                   8\n 5                   9                             1                   7\n 6                   6                             3                   8\n 7                   8                             1                   6\n 8                   9                             2                   6\n 9                   6                             4                   7\n10                   8                             1                  10\n# ℹ 1,990 more rows\n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;fct&gt;\n\n\n\nround() - simple rounding\nceiling() - upward rounding\nfloor() - downward rounding\n\n\n\n\nGrouping\nGrouping the ‘students_tibble’ data frame by the ‘Stress_Level’ column\nAnd than Calculating the mean of ‘Study_Hours_Per_Day’ for each stress level group, ignoring missing values (na.rm = TRUE)\n\nstudents_tibble %&gt;% group_by(Stress_Level) %&gt;% \n  summarise(study_hours_mean = mean(Study_Hours_Per_Day, na.rm = T))\n\n# A tibble: 4 × 2\n  Stress_Level study_hours_mean\n  &lt;fct&gt;                   &lt;dbl&gt;\n1 High                     8.38\n2 Low                      5.47\n3 Moderate                 6.97\n4 &lt;NA&gt;                   NaN   \n\n\n\nGroup by Study and filter by Stress_Level == High\n\n\n# students_tibble \n\n\n\nDistinct\nExtract unique rows.\n\nstudents_tibble %&gt;%  distinct()\n\n# A tibble: 2,000 × 7\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                 6.9                           3.8                 8.7\n 2                 5.3                           3.5                 8  \n 3                 5.1                           3.9                 9.2\n 4                 6.5                           2.1                 7.2\n 5                 8.1                           0.6                 6.5\n 6                 6                             2.1                 8  \n 7                 8                             0.7                 5.3\n 8                 8.4                           1.8                 5.6\n 9                 5.2                           3.6                 6.3\n10                 7.7                           0.7                 9.8\n# ℹ 1,990 more rows\n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;fct&gt;\n\n\nWe already have unique data"
  },
  {
    "objectID": "code/advanced_df.html#tidyr",
    "href": "code/advanced_df.html#tidyr",
    "title": "Working with Dataframes",
    "section": "tidyr",
    "text": "tidyr\n\ntribble() is strange way to create tibble. Let’s create strange dataset to show tidyr in work (advanced)\n\n\nstrange_df = \n  tribble(\n    ~name, ~weight_height, ~marks,\n    'Robert', '80/180', '4,5,5,4,4',\n    'Daniel', '70/175', '4,3,5',\n    'Vlad', '90/185', '4,5,5,4,3'\n  )\n\nstrange_df\n\n# A tibble: 3 × 3\n  name   weight_height marks    \n  &lt;chr&gt;  &lt;chr&gt;         &lt;chr&gt;    \n1 Robert 80/180        4,5,5,4,4\n2 Daniel 70/175        4,3,5    \n3 Vlad   90/185        4,5,5,4,3\n\n\n\nSeparate\n\nstrange_df = strange_df %&gt;% \n  separate(weight_height, sep = '/', into = c(\"weight\", \"height\"))\n\nstrange_df\n\n# A tibble: 3 × 4\n  name   weight height marks    \n  &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;    \n1 Robert 80     180    4,5,5,4,4\n2 Daniel 70     175    4,3,5    \n3 Vlad   90     185    4,5,5,4,3\n\n\n\nSeparate_rows\nTo separate rows by unique mark:\n\nstrange_df = strange_df %&gt;% separate_rows(marks, sep = ',')\nstrange_df\n\n# A tibble: 13 × 4\n   name   weight height marks\n   &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;\n 1 Robert 80     180    4    \n 2 Robert 80     180    5    \n 3 Robert 80     180    5    \n 4 Robert 80     180    4    \n 5 Robert 80     180    4    \n 6 Daniel 70     175    4    \n 7 Daniel 70     175    3    \n 8 Daniel 70     175    5    \n 9 Vlad   90     185    4    \n10 Vlad   90     185    5    \n11 Vlad   90     185    5    \n12 Vlad   90     185    4    \n13 Vlad   90     185    3    \n\n\n\n\n\nUnite\n\nstrange_df %&gt;% unite(weight, height,\n                     col = \"weight_height\",\n                     sep = '/', remove=T)\n\n# A tibble: 13 × 3\n   name   weight_height marks\n   &lt;chr&gt;  &lt;chr&gt;         &lt;chr&gt;\n 1 Robert 80/180        4    \n 2 Robert 80/180        5    \n 3 Robert 80/180        5    \n 4 Robert 80/180        4    \n 5 Robert 80/180        4    \n 6 Daniel 70/175        4    \n 7 Daniel 70/175        3    \n 8 Daniel 70/175        5    \n 9 Vlad   90/185        4    \n10 Vlad   90/185        5    \n11 Vlad   90/185        5    \n12 Vlad   90/185        4    \n13 Vlad   90/185        3"
  },
  {
    "objectID": "code/advanced_df.html#delete-rows-containing-nas",
    "href": "code/advanced_df.html#delete-rows-containing-nas",
    "title": "Working with Dataframes",
    "section": "Delete rows containing NAs",
    "text": "Delete rows containing NAs\n\nstudents_tibble %&gt;%  na.omit()\n\n# A tibble: 1,993 × 7\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                 6.9                           3.8                 8.7\n 2                 5.3                           3.5                 8  \n 3                 5.1                           3.9                 9.2\n 4                 6.5                           2.1                 7.2\n 5                 8.1                           0.6                 6.5\n 6                 6                             2.1                 8  \n 7                 8                             0.7                 5.3\n 8                 8.4                           1.8                 5.6\n 9                 5.2                           3.6                 6.3\n10                 7.7                           0.7                 9.8\n# ℹ 1,983 more rows\n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;fct&gt;\n\nstudents_tibble %&gt;%  drop_na()\n\n# A tibble: 1,993 × 7\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                 6.9                           3.8                 8.7\n 2                 5.3                           3.5                 8  \n 3                 5.1                           3.9                 9.2\n 4                 6.5                           2.1                 7.2\n 5                 8.1                           0.6                 6.5\n 6                 6                             2.1                 8  \n 7                 8                             0.7                 5.3\n 8                 8.4                           1.8                 5.6\n 9                 5.2                           3.6                 6.3\n10                 7.7                           0.7                 9.8\n# ℹ 1,983 more rows\n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;fct&gt;\n\n#drop_na allows to concrete columns\nstudents_tibble %&gt;%  drop_na(Physical_Activity_Hours_Per_Day)\n\n# A tibble: 1,999 × 7\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                 6.9                           3.8                 8.7\n 2                 5.3                           3.5                 8  \n 3                 5.1                           3.9                 9.2\n 4                 6.5                           2.1                 7.2\n 5                 8.1                           0.6                 6.5\n 6                 6                             2.1                 8  \n 7                 8                             0.7                 5.3\n 8                 8.4                           1.8                 5.6\n 9                 5.2                           3.6                 6.3\n10                 7.7                           0.7                 9.8\n# ℹ 1,989 more rows\n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;fct&gt;"
  },
  {
    "objectID": "code/advanced_df.html#replace-with-value",
    "href": "code/advanced_df.html#replace-with-value",
    "title": "Working with Dataframes",
    "section": "Replace with value",
    "text": "Replace with value\n\nsimple\n\n# and do it for each column\nstudents_tibble$GPA[is.na(students_tibble$GPA)] = mean(students_tibble$GPA)\n\n\n\nadvanced\n\n# to secify values\nstudents_tibble %&gt;%  replace_na(list(Social_Hours_Per_Day = 0,\n                                     Extracurricular_Hours_Per_Day = 0))\n\n# A tibble: 2,000 × 7\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                 6.9                           3.8                 8.7\n 2                 5.3                           3.5                 8  \n 3                 5.1                           3.9                 9.2\n 4                 6.5                           2.1                 7.2\n 5                 8.1                           0.6                 6.5\n 6                 6                             2.1                 8  \n 7                 8                             0.7                 5.3\n 8                 8.4                           1.8                 5.6\n 9                 5.2                           3.6                 6.3\n10                 7.7                           0.7                 9.8\n# ℹ 1,990 more rows\n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;fct&gt;\n\n# to fill with the nearest value in the each column\nstudents_tibble %&gt;%  fill()\n\n# A tibble: 2,000 × 7\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                 6.9                           3.8                 8.7\n 2                 5.3                           3.5                 8  \n 3                 5.1                           3.9                 9.2\n 4                 6.5                           2.1                 7.2\n 5                 8.1                           0.6                 6.5\n 6                 6                             2.1                 8  \n 7                 8                             0.7                 5.3\n 8                 8.4                           1.8                 5.6\n 9                 5.2                           3.6                 6.3\n10                 7.7                           0.7                 9.8\n# ℹ 1,990 more rows\n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;fct&gt;\n\n\nI will just delete them :)\n\nstudents_tibble = students_tibble %&gt;%  na.omit()"
  },
  {
    "objectID": "code/advanced_df.html#joins",
    "href": "code/advanced_df.html#joins",
    "title": "Working with Dataframes",
    "section": "Joins",
    "text": "Joins\nfor combining several datasets. For example, we have two dataframes with the same column - names. The first dataframe contain data about wealth and work, the second contain information about town, street and etc. We want to make one dataframe that contain info from the both dataframes.\n\n# Full join: returns all rows from both df1 and df2, filling with NA where no match.\ndf1 %&gt;% full_join(df2, by = 'name')\n\n# Inner join: returns only matching rows from both df1 and df2.\ndf1 %&gt;% inner_join(df2, by = 'name')\n\n# Left join: returns all rows from df1 and matched rows from df2; unmatched in df2 are NA.\ndf1 %&gt;% left_join(df2, by = 'name')\n\n# Right join: returns all rows from df2 and matched rows from df1; unmatched in df1 are NA.\ndf1 %&gt;% right_join(df2, by = 'name')\n\n# Anti join: returns rows from df1 that do not match any rows in df2.\ndf1 %&gt;% anti_join(df2, by = 'name')\n\n# Semi join: returns rows from df1 that have matches in df2, without adding columns from df2.\ndf1 %&gt;% semi_join(df2, by = 'name')"
  },
  {
    "objectID": "code/advanced_df.html#grouping",
    "href": "code/advanced_df.html#grouping",
    "title": "Working with Dataframes",
    "section": "Grouping",
    "text": "Grouping\n\n# Grouping the 'students_tibble' data frame by the 'Stress_Level' column\n# Than Calculating the mean of 'Study_Hours_Per_Day' for each stress level group, ignoring missing values (na.rm = TRUE)\nstudents_tibble %&gt;% group_by(Stress_Level) %&gt;% \n  summarise(study_hours_mean = mean(Study_Hours_Per_Day, na.rm = T))\n\n# A tibble: 3 × 2\n  Stress_Level study_hours_mean\n  &lt;fct&gt;                   &lt;dbl&gt;\n1 High                     8.38\n2 Low                      5.47\n3 Moderate                 6.97"
  },
  {
    "objectID": "code/advanced_df.html#slice_head",
    "href": "code/advanced_df.html#slice_head",
    "title": "Working with Dataframes",
    "section": "Slice_head()",
    "text": "Slice_head()\nalmost the same as basic head(), but it is more suitable for grouped data:\n\nstudents_tibble %&gt;% group_by(Stress_Level) %&gt;% slice_head(n=3)\n\n# A tibble: 9 × 7\n# Groups:   Stress_Level [3]\n  Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n1                 8.1                           0.6                 6.5\n2                 8                             0.7                 5.3\n3                 8.4                           1.8                 5.6\n4                 5.3                           3.5                 8  \n5                 5.1                           3.9                 9.2\n6                 5.2                           3.6                 6.3\n7                 6.9                           3.8                 8.7\n8                 6.5                           2.1                 7.2\n9                 6                             2.1                 8  \n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;fct&gt;\n\n\nHere we sliced first 3 rows for data in each group"
  },
  {
    "objectID": "presentations/testing.html#testing-plan",
    "href": "presentations/testing.html#testing-plan",
    "title": "Intro to testing",
    "section": "Testing plan",
    "text": "Testing plan\n1) What we want to test? (Hypotheses about population)\n\n2) Choose significance level\n3) Choose the test\n4) Conduct the experiment\n5) Conduct the test\n6) Conclusion"
  },
  {
    "objectID": "presentations/testing.html#hypotheses",
    "href": "presentations/testing.html#hypotheses",
    "title": "Intro to testing",
    "section": "Hypotheses",
    "text": "Hypotheses\nIn statistical testing, we will operate with hypotheses. There are two basic hypotheses:\n\nNull Hypothesis (\\(H_0\\)) - There is no effect in population\nAlternative Hypothesis (\\(H_A\\)) - There is an effect in population\n\n\nUsually we are interested in having an effect, as it means some discovery, and rejecting null hypothesis"
  },
  {
    "objectID": "presentations/testing.html#testing-plan-1",
    "href": "presentations/testing.html#testing-plan-1",
    "title": "Intro to testing",
    "section": "Testing plan",
    "text": "Testing plan\n\n1) What we want to test? Hypotheses\n\n2) Choose significance level\n\n3) Choose the test\n4) Conduct the experiment\n5) Conduct the test\n6) Conclusion"
  },
  {
    "objectID": "presentations/testing.html#significance-level",
    "href": "presentations/testing.html#significance-level",
    "title": "Intro to testing",
    "section": "Significance level",
    "text": "Significance level\nBefore testing we must define value \\(\\alpha\\) named significance level\nSignificance level (\\(\\alpha\\)) - predetermined threshold of rejecting \\(H_0\\).\n\nFor example we set \\(\\alpha = 0.05\\) and got p-value &lt; \\(\\alpha\\):\nWe reject the \\(H_0\\) at the \\(\\alpha = 0.05\\) significance level, indicating that there is sufficient evidence to conclude that the observed result is unlikely to have occurred under the null hypothesis.\n\nThus we fix the Type 1 Error , but Type 2 Error still can be large!\nThe value \\(1-\\beta\\) called the power of the test. The smaller is the probability of type II error, the more powerful is the test."
  },
  {
    "objectID": "presentations/testing.html#significance-level-1",
    "href": "presentations/testing.html#significance-level-1",
    "title": "Intro to testing",
    "section": "Significance level",
    "text": "Significance level\nExamples\n\nMedical/Pharmaceutical: \\(\\alpha = 0.01\\) is common to avoid false positives.\nPsychology/Social: Typically \\(\\alpha = 0.05\\).\nEconomics/Business: Sometimes \\(\\alpha = 0.1\\) is acceptable"
  },
  {
    "objectID": "presentations/testing.html#testing-plan-2",
    "href": "presentations/testing.html#testing-plan-2",
    "title": "Intro to testing",
    "section": "Testing plan",
    "text": "Testing plan\n\n1) What we want to test? (Hypotheses)\n2) Choose significance level\n\n3) Choose the test\n\nTest’s functionality (first)\nTest’s assumptions (second)\n\n\n4) Conduct the experiment\n5) Conduct the test\n6) Conclusion"
  },
  {
    "objectID": "presentations/testing.html#tests-functionality",
    "href": "presentations/testing.html#tests-functionality",
    "title": "Intro to testing",
    "section": "Test’s functionality",
    "text": "Test’s functionality\nDoes it test my hypothesis?\nIs my hypothesis is the hypothesis this test checking?\n\nI’m checking the difference between the average hemoglobin levels in sick and healthy people. T-test should be suitable for this"
  },
  {
    "objectID": "presentations/testing.html#tests-assumptions",
    "href": "presentations/testing.html#tests-assumptions",
    "title": "Intro to testing",
    "section": "Test’s assumptions",
    "text": "Test’s assumptions\nThe conditions, the fulfillment of which ensures control over the quality of the test results\nAnd the opposite is not true !!\n\nFor example, fulfillment of assumptions can guarantee fixed Type I error\nAnd if assumptions are violated, it doesn’t mean Type I error will be big\n(but it still can be)\n\n\nT-test is good for big samples with distributions where average makes sense"
  },
  {
    "objectID": "presentations/testing.html#one-data-several-hypothesis",
    "href": "presentations/testing.html#one-data-several-hypothesis",
    "title": "Intro to testing",
    "section": "One data, several hypothesis",
    "text": "One data, several hypothesis\n\n\n\n\\(X\\) - Days in hospital\n\nDivide patients into 2 groups by many days or few (e.g. &lt;&gt;15 days)\nRed - with pneumonia\nBlue - without pneumonia\n\\(H_0\\) - there’s no association between pneumonia and days in the hospital\n\\(\\Rightarrow \\chi^2\\) test"
  },
  {
    "objectID": "presentations/testing.html#one-data-several-hypothesis-1",
    "href": "presentations/testing.html#one-data-several-hypothesis-1",
    "title": "Intro to testing",
    "section": "One data, several hypothesis",
    "text": "One data, several hypothesis\n\n\n\n\\(X\\) - Students’ exam scores\n\nRed - First group\nBlue - Second group\n\\(H_0\\) - Score of students from First group and Second group are the same\n\\(\\Rightarrow\\) Mann-Whitney test"
  },
  {
    "objectID": "presentations/testing.html#testing-plan-3",
    "href": "presentations/testing.html#testing-plan-3",
    "title": "Intro to testing",
    "section": "Testing plan",
    "text": "Testing plan\n\n1) What we want to test? (Hypotheses)\n2) Choose significance level\n3) Choose the test\n\n4) Conduct the experiment\n\n5) Conduct the test\n6) Conclusion"
  },
  {
    "objectID": "presentations/testing.html#testing-plan-4",
    "href": "presentations/testing.html#testing-plan-4",
    "title": "Intro to testing",
    "section": "Testing plan",
    "text": "Testing plan\n\n1) What we want to test? (Hypotheses)\n2) Choose significance level\n3) Choose the test\n4) Conduct the experiment\n\n5) Conduct the test\n\n6) Conclusion"
  },
  {
    "objectID": "presentations/testing.html#test-result",
    "href": "presentations/testing.html#test-result",
    "title": "Intro to testing",
    "section": "Test result",
    "text": "Test result\nThe tests result in test statistic and the p-value .\n\nEach test have its formula to calculate called test statistic. This value has its own distribution (e.g. t-distribution for the t-statistic from t-test).\np-value - the probability that, given a true null hypothesis, your observations will result in such or more extreme value of test statistic\n\n\nThe smaller the p-value, the less likely we are to get our result under the null hypothesis, which states that there is no effect."
  },
  {
    "objectID": "presentations/testing.html#pipeline",
    "href": "presentations/testing.html#pipeline",
    "title": "Intro to testing",
    "section": "“Pipeline”",
    "text": "“Pipeline”"
  },
  {
    "objectID": "presentations/testing.html#parameters-of-test-statistics-distributions",
    "href": "presentations/testing.html#parameters-of-test-statistics-distributions",
    "title": "Intro to testing",
    "section": "Parameters of test statistics’ distributions",
    "text": "Parameters of test statistics’ distributions\nDegrees of freedom!\n\nOften calculated based on number of observations, groups and coefficients.\nDetermines the shape of distribution!\n\n\n-&gt; Amount of data affects testing results!\n\nOther parameters…\n\nMean, SD\nRate, shape"
  },
  {
    "objectID": "presentations/testing.html#t-distribution-for-different-dfs",
    "href": "presentations/testing.html#t-distribution-for-different-dfs",
    "title": "Intro to testing",
    "section": "t-distribution for different DFs",
    "text": "t-distribution for different DFs"
  },
  {
    "objectID": "presentations/testing.html#p-value-calculation",
    "href": "presentations/testing.html#p-value-calculation",
    "title": "Intro to testing",
    "section": "p-value calculation",
    "text": "p-value calculation"
  },
  {
    "objectID": "presentations/testing.html#one-sided-hypothesis",
    "href": "presentations/testing.html#one-sided-hypothesis",
    "title": "Intro to testing",
    "section": "One-sided hypothesis",
    "text": "One-sided hypothesis\n\\(H_A: X_0 &lt; X_1\\)"
  },
  {
    "objectID": "presentations/testing.html#two-sided-hypothesis",
    "href": "presentations/testing.html#two-sided-hypothesis",
    "title": "Intro to testing",
    "section": "Two-sided hypothesis",
    "text": "Two-sided hypothesis\n\\(H_A: X_0 \\neq X_1\\)"
  },
  {
    "objectID": "presentations/testing.html#how-to-calculate-critical-value-of-test-statistic",
    "href": "presentations/testing.html#how-to-calculate-critical-value-of-test-statistic",
    "title": "Intro to testing",
    "section": "How to calculate critical value of test statistic?",
    "text": "How to calculate critical value of test statistic?\nExample for T-distribution\nOne-sided hypotheses\n\n\nqt(0.95, df=19)\n\n[1] 1.729133\n\nqt(0.05, df=19)\n\n[1] -1.729133\n\n\n\nTwo-sided hypothesis\n\n\nqt(0.975, df=19)\n\n[1] 2.093024\n\nqt(0.025, df=19)\n\n[1] -2.093024"
  },
  {
    "objectID": "presentations/testing.html#another-pitfalls",
    "href": "presentations/testing.html#another-pitfalls",
    "title": "Intro to testing",
    "section": "Another pitfalls",
    "text": "Another pitfalls\n\nSmall sample size or Unbalanced groups\n\nPower of tests will be reduced = less sensible results\n\nChanging significance level\n\n\\(\\alpha\\) must be defined BEFORE testing\n\nMisinterpreting p-values\n\nIt doesn’t reject or accept \\(H_0\\).\nYOU reject or accept \\(H_0\\)\n\nMultiple comparisons problem"
  },
  {
    "objectID": "presentations/testing.html#multiple-comparisons",
    "href": "presentations/testing.html#multiple-comparisons",
    "title": "Intro to testing",
    "section": "Multiple comparisons",
    "text": "Multiple comparisons\n\n\\(1 - 0.05\\) - probability of correctly rejected \\(H_0\\)\n\\((1-0.05)^n\\) - probability of correctly rejected \\(\\space H_0\\) in \\(n\\) tests\n\\(1-(1-0.05)^n\\) - probability of incorrectly rejected at least 1 \\(H_0\\) in \\(n\\) tests\n\n\\[\n1 - (1 - 0.05) ^ {2} = 0.0975\\\\\n1 - (1 - 0.05) ^ {5} = 0.2262191\\\\\n1 - (1 - 0.05) ^ {20} = 0.6415141\\\\\n1 - (1 - 0.05) ^ {100} = 0.9940795\\\\\n\\]"
  },
  {
    "objectID": "presentations/testing.html#multiple-comparisons-1",
    "href": "presentations/testing.html#multiple-comparisons-1",
    "title": "Intro to testing",
    "section": "Multiple comparisons",
    "text": "Multiple comparisons\nCorrections!\nControlling the FWER - probability of making at least one Type I error.\n\nBonferroni\nHolm-Bonferroni\nŠidák\n\nControlling the FDR - expected proportion of false positives among all significant tests.\n\nBenjamini-Hochberg\nBenjamini-Yekutieli"
  },
  {
    "objectID": "code/regression.html",
    "href": "code/regression.html",
    "title": "Association between variables",
    "section": "",
    "text": "Used to predict a continuous outcome based on one or more predictors.\n\n\n\\(y = \\beta_0 + \\beta_1x_1 + ... + \\beta_nx_n + \\epsilon\\)\n\n\\(y\\) - dependent variable (response)\n\\(x\\) - independent variable (predictor)\n\\(\\beta_0\\) - intercept - value of \\(y\\), when \\(x=0\\)\n\\(\\beta_i\\) - coefficients - values by which \\(y\\) is changed when the corresponding \\(x_i\\) is increased by 1.\n\\(\\epsilon\\) - so-called error - differences between real \\(y\\) values and esimated by model values\n\n\n\n\n\\(y_{pred} = \\beta_0 + \\beta_1x_1 + ... + \\beta_nx_n\\)\n\n\n\n\nHomoscedasticity: Residuals have constant variance (~) - \\(\\sigma^2(\\epsilon) = const\\)\nMean of residuals is close to zero\n\nStricter assumption: residuals are normally distributed around zero (~) - \\(\\epsilon \\sim Norm(0, \\sigma^2)\\)\nThis assumption is equivalent to normality of \\(y\\)\n\nObservations \\(y_i\\) are independent (not correlated) (~)\nLinearity: The relationship between variables is considered to be linear.\n\n\n(~) denotes assumptions needed for hypotheses testing and confidence estimation only"
  },
  {
    "objectID": "code/regression.html#formula",
    "href": "code/regression.html#formula",
    "title": "Association between variables",
    "section": "",
    "text": "\\(y = \\beta_0 + \\beta_1x_1 + ... + \\beta_nx_n + \\epsilon\\)\n\n\\(y\\) - dependent variable (response)\n\\(x\\) - independent variable (predictor)\n\\(\\beta_0\\) - intercept - value of \\(y\\), when \\(x=0\\)\n\\(\\beta_i\\) - coefficients - values by which \\(y\\) is changed when the corresponding \\(x_i\\) is increased by 1.\n\\(\\epsilon\\) - so-called error - differences between real \\(y\\) values and esimated by model values"
  },
  {
    "objectID": "code/regression.html#formula-of-model-linear",
    "href": "code/regression.html#formula-of-model-linear",
    "title": "Association between variables",
    "section": "",
    "text": "\\(y_{pred} = \\beta_0 + \\beta_1x_1 + ... + \\beta_nx_n\\)"
  },
  {
    "objectID": "code/regression.html#assumptions",
    "href": "code/regression.html#assumptions",
    "title": "Association between variables",
    "section": "",
    "text": "Homoscedasticity: Residuals have constant variance (~) - \\(\\sigma^2(\\epsilon) = const\\)\nMean of residuals is close to zero\n\nStricter assumption: residuals are normally distributed around zero (~) - \\(\\epsilon \\sim Norm(0, \\sigma^2)\\)\nThis assumption is equivalent to normality of \\(y\\)\n\nObservations \\(y_i\\) are independent (not correlated) (~)\nLinearity: The relationship between variables is considered to be linear.\n\n\n(~) denotes assumptions needed for hypotheses testing and confidence estimation only"
  },
  {
    "objectID": "code/regression.html#formula-of-model",
    "href": "code/regression.html#formula-of-model",
    "title": "Association between variables",
    "section": "Formula of model",
    "text": "Formula of model\n\\(y_{pred} = \\beta_0 + \\beta_1x_1\\)"
  },
  {
    "objectID": "code/regression.html#can-plant-height-be-predicted-based-on-soil-nutrient-levels",
    "href": "code/regression.html#can-plant-height-be-predicted-based-on-soil-nutrient-levels",
    "title": "Association between variables",
    "section": "Can plant height be predicted based on soil nutrient levels?",
    "text": "Can plant height be predicted based on soil nutrient levels?\n\nData\n\nnutrients &lt;- rnorm(50, mean = 10, sd = 3)\nheight &lt;- 2 * nutrients + rnorm(50, mean = 0, sd = 5)\n\ndata_plant_nutrient &lt;- data.frame(nutrients, height)\n\n\nplot(nutrients, height, main = \"Nutrients vs Height\",\n     xlab = \"Nutrients\", ylab = \"Height\",\n     pch=19)\n\n\n\n\n\n\n\n\n\n\nModel creation\n\nmodel &lt;- lm(height ~ nutrients, data = data_plant_nutrient)\nmodel\n\n\nCall:\nlm(formula = height ~ nutrients, data = data_plant_nutrient)\n\nCoefficients:\n(Intercept)    nutrients  \n      4.634        1.597  \n\n\n\nplot(nutrients, height, main = \"Nutrients vs Height\",\n     xlab = \"Nutrients\", ylab = \"Height\",\n     pch=19)\nabline(model, col = \"red\", lwd=3)\nlegend(\"topleft\",\n       legend = c(\"y_pred\"),\n       col = c('red'),\n       bty = 'n', lwd=3)"
  },
  {
    "objectID": "code/regression.html#formula-of-model-1",
    "href": "code/regression.html#formula-of-model-1",
    "title": "Association between variables",
    "section": "Formula of model",
    "text": "Formula of model\n\\(y_{pred} = \\beta_0 + \\beta_1x_1 + ... + \\beta_nx_n\\)"
  },
  {
    "objectID": "code/regression.html#adding-one-more-predictor-for-plant-height-model",
    "href": "code/regression.html#adding-one-more-predictor-for-plant-height-model",
    "title": "Association between variables",
    "section": "Adding one more predictor for plant height model",
    "text": "Adding one more predictor for plant height model\n\nsunlight_hrs = rep(5:9, each=10) + rnorm(50, 0, 1)\ndata_plant_nutrient = data_plant_nutrient %&gt;% arrange(height) %&gt;%  cbind(sunlight_hrs)\ndata_plant_nutrient %&gt;% str()\n\n'data.frame':   50 obs. of  3 variables:\n $ nutrients   : num  2.5 3.43 10 6.36 7.42 ...\n $ height      : num  4.66 8.5 10.6 11.49 12 ...\n $ sunlight_hrs: num  4.98 3.51 5.09 5.58 5.41 ...\n\n\n\nplot(data_plant_nutrient$height, data_plant_nutrient$sunlight_hrs, \n     main = \"Sunlight vs Height\",\n     xlab = \"Sunlight\", ylab = \"Height\",\n     pch=19)\n\n\n\n\n\n\n\n\n\nAdditive\n\\[\ny = \\beta_0 + \\beta_1x_1 + \\beta_2x_2\n\\]\n\nmodel_mullti = lm(height ~ sunlight_hrs + nutrients, data = data_plant_nutrient)\nsummary(model_mullti)\n\n\nCall:\nlm(formula = height ~ sunlight_hrs + nutrients, data = data_plant_nutrient)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-6.0869 -1.5693  0.4142  1.4733  5.6917 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)   -2.4050     1.5467  -1.555    0.127    \nsunlight_hrs   1.8799     0.2811   6.688 2.43e-08 ***\nnutrients      0.9532     0.1465   6.507 4.58e-08 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.524 on 47 degrees of freedom\nMultiple R-squared:  0.8437,    Adjusted R-squared:  0.8371 \nF-statistic: 126.9 on 2 and 47 DF,  p-value: &lt; 2.2e-16\n\n\n\n\nWith interaction\n\\[y = \\beta_0 + \\beta_1x_1 + \\beta_2x_2 + \\beta_3x_1x_2\\]\nNow coefficient have different interpretation:\n\n\\(\\beta_1\\)​: Effect of \\(x_1\\)​ on \\(y\\) when \\(x_2=0\\).\n\\(\\beta_2\\)​: Effect of \\(x_2\\)​ on \\(y\\) when \\(x_1=0\\).\n\\(\\beta_3\\): Interaction coefficient, showing how the relationship between \\(x_1\\)​ and \\(y\\) changes as \\(x_2\\)​ changes.\n\n\nYou should include an interaction if you hypothesize that the relationship between one predictor and the dependent variable changes depending on the level of another predictor. For example, the effect of a drug might vary depending on the age of the patient.\n\n\n# model_mullti = lm(height ~ nutrients + sunlight_hrs + nutrients:sunlight_hrs, data = data_plant_nutrient)\nmodel_mullti_interact = lm(height ~ nutrients * sunlight_hrs, data = data_plant_nutrient)\nsummary(model_mullti_interact)\n\n\nCall:\nlm(formula = height ~ nutrients * sunlight_hrs, data = data_plant_nutrient)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-6.2927 -1.5597  0.2682  1.8295  5.7028 \n\nCoefficients:\n                       Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept)            -4.99288    4.37172  -1.142 0.259328    \nnutrients               1.24867    0.48919   2.553 0.014079 *  \nsunlight_hrs            2.23169    0.62325   3.581 0.000822 ***\nnutrients:sunlight_hrs -0.03834    0.06052  -0.633 0.529550    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.54 on 46 degrees of freedom\nMultiple R-squared:  0.8451,    Adjusted R-squared:  0.835 \nF-statistic: 83.63 on 3 and 46 DF,  p-value: &lt; 2.2e-16\n\n\n\nx1:x2 denotes interaction\nx1 * x2 is equivalent to x1 + x2 + x1:x2"
  },
  {
    "objectID": "code/regression.html#testing-if-model-is-better-with-new-predictors",
    "href": "code/regression.html#testing-if-model-is-better-with-new-predictors",
    "title": "Association between variables",
    "section": "Testing if model is better with new predictors",
    "text": "Testing if model is better with new predictors\n\nanova(model, model_mullti_interact)\n\nAnalysis of Variance Table\n\nModel 1: height ~ nutrients\nModel 2: height ~ nutrients * sunlight_hrs\n  Res.Df    RSS Df Sum of Sq      F    Pr(&gt;F)    \n1     48 584.28                                  \n2     46 296.77  2    287.51 22.282 1.712e-07 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\\(p.value &lt; 0.05\\) and it means that new model better reduce the residual variance"
  },
  {
    "objectID": "code/regression.html#plot-the-line-without-modelling",
    "href": "code/regression.html#plot-the-line-without-modelling",
    "title": "Association between variables",
    "section": "Plot the line “without” modelling",
    "text": "Plot the line “without” modelling\n\ndata_plant_nutrient %&gt;% \n  ggplot(aes(x=nutrients, y=height)) +\n  geom_point(col='blue', show.legend = T) +\n  geom_smooth(formula = y ~ x, method = 'lm', show.legend = T) + ## &lt;---- creates model and plots the line\n  theme_bw()"
  },
  {
    "objectID": "code/basic_r.html#two-connected-vectors",
    "href": "code/basic_r.html#two-connected-vectors",
    "title": "Prac #1. Basic R",
    "section": "Two “connected” vectors",
    "text": "Two “connected” vectors\n\nNamed vectors\n\nstudents_names = c('Daniel', 'Sasha', 'Robert', 'Alice', \n                   'Diana', 'Anastasia', 'Alexey', 'Julia')\nage = c(15, 32, 18, 8, 23, 17,22, 23)\n\nStudents older than 18\n\nstudents_names[age &gt;= 18] # ANY logical vector!\n\n[1] \"Sasha\"  \"Robert\" \"Diana\"  \"Alexey\" \"Julia\" \n\n\nUsing one vector as condition for extracting data from another\nWhat if we want to extract names AND their age? We can set names for each value in vector using names() function\nnames() function returns names from vector. Vector student_age had no names:\n\nstudents_age_vec = age\nnames(students_age_vec)\n\nNULL\n\n\nAnd we can set such names as we do it with variables:\n\nnames(students_age_vec) = students_names\nstudents_age_vec\n\n   Daniel     Sasha    Robert     Alice     Diana Anastasia    Alexey     Julia \n       15        32        18         8        23        17        22        23 \n\n\nNow we can access values using names!\n\nstudents_age_vec['Alice']\n\nAlice \n    8 \n\n\nAnother way to create “named” vector:\n\nnamed_vec = c(\"vlaue1\" = 1, \"value2\" = 2, \"value3\" = 3)\nnamed_vec\n\nvlaue1 value2 value3 \n     1      2      3 \n\n\n\nCreate named vector from first 6 values scores\n\n\nstudents = c('Sasha', 'Masha', 'Marina', 'Adelya', 'Negin', 'Alice')\n# scores_named = scores\n\n\n\nList\n\nstudents_age_list = list(students_names, age)\nstudents_age_list\n\n[[1]]\n[1] \"Daniel\"    \"Sasha\"     \"Robert\"    \"Alice\"     \"Diana\"     \"Anastasia\"\n[7] \"Alexey\"    \"Julia\"    \n\n[[2]]\n[1] 15 32 18  8 23 17 22 23\n\n\n\n# students_age_list['Alice'] # NOTHING\n\nNow we can add several vectors inside same “structure”. Let’s add weight and height and set names to each vector:\n\nheight = c(175, 181, 188, 120, 170, 168, 178, 172)\nweight = c(70, 75, 80, 45, 55, 50, 78, 62)\n\nstudents_list = list(names = students_names,\n                     age=age,\n                     height=height,\n                     weight=weight)\n\nstudents_list\n\n$names\n[1] \"Daniel\"    \"Sasha\"     \"Robert\"    \"Alice\"     \"Diana\"     \"Anastasia\"\n[7] \"Alexey\"    \"Julia\"    \n\n$age\n[1] 15 32 18  8 23 17 22 23\n\n$height\n[1] 175 181 188 120 170 168 178 172\n\n$weight\n[1] 70 75 80 45 55 50 78 62\n\n\nEach vector represents a piece of information about each student. Vectors here are like columns in a table (data frame)\n\nList data access\nWe can access vectors (~columns) in several ways\n\nstudents_list[2] # NOT A VECTOR\n\n$age\n[1] 15 32 18  8 23 17 22 23\n\nstudents_list[[2]] # VECTOR\n\n[1] 15 32 18  8 23 17 22 23\n\nstudents_list$weight  # vector\n\n[1] 70 75 80 45 55 50 78 62\n\n\nCertain values:\n\n# students_list[[2]][5]\n\nstudents_list$age[5]\n\n[1] 23\n\n\n\n\nImportant note\nThe list may contain many vectors, and not of the same length!\n\nlist(\n  c(1,2,3,4,5),\n  c('A', 'B', 'C')\n)\n\n[[1]]\n[1] 1 2 3 4 5\n\n[[2]]\n[1] \"A\" \"B\" \"C\"\n\n\nIt is not necessary to include NA (empty) values to save the “table” structure. This makes the list a little bit more flexible, but inconvenient for storing tabular data.\n\nmarks_of_students = list(\n  Alice = c(5,4,5,3,4,4),\n  Sasha = c(3,3,3),\n  Robert = c(5,5,5,5)\n)\n\nmarks_of_students\n\n$Alice\n[1] 5 4 5 3 4 4\n\n$Sasha\n[1] 3 3 3\n\n$Robert\n[1] 5 5 5 5\n\n\nIf each value in every vector represent piece of information about the same students, then we should know the student’s name index and then access all vectors by this index. In other words, how to extract the row?\n\nindex_alice = which(students_list$names == 'Alice')\n\nstudents_list$age[index_alice]\n\n[1] 8\n\nstudents_list$weight[index_alice]\n\n[1] 45\n\n\n\nwhich(logical_vector) - return positions where logical_vector contain TRUE\n\n\nCreate list containing vectors scores and students vectors and name them “Marks” and “Names”\nshow the 2nd name\n\n\n# somelist = \n\nIs there more convenient way to store tabular data?"
  },
  {
    "objectID": "homeworks/HW2.html#important-notes-for-every-plot-you-create",
    "href": "homeworks/HW2.html#important-notes-for-every-plot-you-create",
    "title": "Homework on Statistical Distributions and Visualization",
    "section": "{!} Important notes for every plot you create:",
    "text": "{!} Important notes for every plot you create:\n\nName the axis and legends\nUse some theme (e.g. theme_classic``()) if ggplot is used. Not necessarily the same one for all plots."
  }
]