[
  {
    "objectID": "presentations/dsitributions.html#normal-distribution",
    "href": "presentations/dsitributions.html#normal-distribution",
    "title": "Distributions",
    "section": "Normal distribution",
    "text": "Normal distribution\n\n\nNormal distribution is bell shaped, have equal mean (\\(\\mu\\)), median, mode. “Width” depends on standard deviation (\\(\\sigma\\)).\n\n\\(P(x) = \\frac{1}{{\\sigma \\sqrt{2\\pi} }}e^{{\\frac{ -\\left( {x - \\mu } \\right)^2 }{2\\sigma ^2 }}}\\),\nparameters are mean (\\(\\mu\\)) and sigma (\\(\\sigma\\))"
  },
  {
    "objectID": "presentations/dsitributions.html#three-sigma-rule",
    "href": "presentations/dsitributions.html#three-sigma-rule",
    "title": "Distributions",
    "section": "Three sigma rule",
    "text": "Three sigma rule"
  },
  {
    "objectID": "presentations/dsitributions.html#uniform-distribution",
    "href": "presentations/dsitributions.html#uniform-distribution",
    "title": "Distributions",
    "section": "Uniform distribution",
    "text": "Uniform distribution\n\n\nSimple distribution of equally possible values\n\n\\(P(x) = \\frac{1}{a-b}\\)\n\n\\(a\\) - starting point\n\\(b\\) - end point"
  },
  {
    "objectID": "presentations/dsitributions.html#bernoulli-distribution",
    "href": "presentations/dsitributions.html#bernoulli-distribution",
    "title": "Distributions",
    "section": "Bernoulli distribution",
    "text": "Bernoulli distribution\n\n\n\n\n\n\n\n\n\n\n\n\n\\(P(x) = p^x(1-p)^x\\),\nwhere \\(p\\) - “success” probability. It is the only parameter of the distribution\nImagine, that \\(p\\) is a probability of an head on a coin toss (1 - head, 0 - tails). Then The distribution will be like in the barplot on the left."
  },
  {
    "objectID": "presentations/dsitributions.html#binomial-distribution",
    "href": "presentations/dsitributions.html#binomial-distribution",
    "title": "Distributions",
    "section": "Binomial distribution",
    "text": "Binomial distribution\n\n\n\n\n\n\n\n\n\n\n\n\n\\(P(x) = \\binom{n}{k}p^k(1-p)^{n-k}\\),\n\n\\(n\\) - number of trials (fixed)\n\\(p\\) - probability of success (fixed)\n\\(k\\) - observed successes\n\n\nDistribution is based on the number of successes in a sequence of experiments.\nIf we flip a coin, the binomial distribution represents the number of successes after we flip the coin a certain number of times (e.g. 10).\nThe histogram above shows the distribution of 10000 experiments on trying to get an head coin for a certain number of times by flipping it 10 times"
  },
  {
    "objectID": "presentations/dsitributions.html#poisson-distribution",
    "href": "presentations/dsitributions.html#poisson-distribution",
    "title": "Distributions",
    "section": "Poisson distribution",
    "text": "Poisson distribution\nBinomial, but \\(n \\rightarrow \\infty\\),, therefore we don’t utilize number of trials (\\(n\\)).\nNow we use “time interval” and expected number of successes (\\(\\lambda\\)) during this interval\n\n\n\n\n\n\n\n\n\n\n\n\n\\(P(x) = \\dfrac{\\lambda^k}{k!}e^{-\\lambda}\\), where\n\n\\(\\lambda\\) - mean or expected number of successes during the interval (fixed)\n\\(k\\) - “observed” successes"
  },
  {
    "objectID": "presentations/dsitributions.html#functions-for-normal-distribution",
    "href": "presentations/dsitributions.html#functions-for-normal-distribution",
    "title": "Distributions",
    "section": "Functions (for normal distribution)",
    "text": "Functions (for normal distribution)\n\n\n\n\nRandom values from distribution\n\n\nrnorm(n=5, mean=100, sd=10)\n\n[1] 107.60511 109.80991  95.91938  87.77735 113.47224\n\n\n\nDensity (the height of histogram) at the point\n\n\ndnorm(x=100, mean=100, sd=10)\n\n[1] 0.03989423\n\n\n\nCumulative probability at the point: prob-ty to obtain value less than specified\n\n\npnorm(80, mean=100, sd=10) # prob to obtain any value less than 80\n\n[1] 0.02275013\n\npnorm(c(70,80,90,110,120,130), mean=100, sd=10)\n\n[1] 0.001349898 0.022750132 0.158655254 0.841344746 0.977249868 0.998650102\n\n\n\nValue corresponding to specified cumulative probability\n\n\nqnorm(c(0.003, 0.05, 0.16, 0.84, 0.95, 0.997), mean=100, sd=10)\n\n[1]  72.52219  83.55146  90.05542 109.94458 116.44854 127.47781"
  },
  {
    "objectID": "presentations/dsitributions.html#functions-for-other-distributions",
    "href": "presentations/dsitributions.html#functions-for-other-distributions",
    "title": "Distributions",
    "section": "Functions (for other distributions)",
    "text": "Functions (for other distributions)\nUniform\n\nrunif(n, min, max)\ndunif(n, min, max)\npunif(n, min, max)\nqunif(n, min, max)\n\nBinomial\n\nrbinom(n, size, prob)\ndbinom(n, size, prob)\npbinom(n, size, prob)\nqbinom(n, size, prob)\n\nPoisson\n\nrpois(n, lambda)\ndpois(n, lambda)\nppois(n, lambda)\nqpois(n, lambda)"
  },
  {
    "objectID": "homeworks/HW1.html",
    "href": "homeworks/HW1.html",
    "title": "Homework #1: Exploring elephant data",
    "section": "",
    "text": "Download the provided dataset ElephantsMF.csv and place it in your working directory.\nThe dataset contains the following columns:\n- rownames: Unique identifiers for each record (elephant).\n- Age: Age of the elephants (years).\n- Height: Height of the elephants (cm).\n- Sex: Sex of the elephants (M for Male, F for Female).\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD ### Instructions ======= #### Instructions &gt;&gt;&gt;&gt;&gt;&gt;&gt; 52e1a05 (second_commit)\n\nEvery result must be shown! If you create or chabging some variable/column/dataframe, show it!\n\n\nDon’t forget to save your changes where needed\n\nFor example, dataset %&gt;% function() does not change the dataset, but dataset = dataset %&gt;% function() does\n\n\n\n\nlibrary(readr)\nlibrary(dplyr)\nlibrary(tidyr)"
  },
  {
    "objectID": "homeworks/HW1.html#downloading-libraries",
    "href": "homeworks/HW1.html#downloading-libraries",
    "title": "Homework #1: Exploring elephant data",
    "section": "",
    "text": "library(readr)\nlibrary(dplyr)\nlibrary(tidyr)"
  },
  {
    "objectID": "homeworks/HW1.html#data-loading",
    "href": "homeworks/HW1.html#data-loading",
    "title": "Homework #1: Exploring elephant data",
    "section": "1. Data Loading",
    "text": "1. Data Loading\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD ### 1. Load the dataset using read.csv(), save it to variable dataset and show the first 10 rows. ======= #### 1. Load the dataset using read.csv(), save it to variable dataset and show the first 10 rows. &gt;&gt;&gt;&gt;&gt;&gt;&gt; 52e1a05 (second_commit)\n\n# \n\n\nhead(...) - by default it returns first 5 rows, but we need 10 :)\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD #### 1.1 Make dataset a tibble ======= 1.1 Make dataset a tibble &gt;&gt;&gt;&gt;&gt;&gt;&gt; 52e1a05 (second_commit)\n\n# dataset = \n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD ### 2. Check the structure and summary of the data. ======= #### 2. Check the structure and summary of the data. &gt;&gt;&gt;&gt;&gt;&gt;&gt; 52e1a05 (second_commit)\n\n# \n\n\nJust use special functions"
  },
  {
    "objectID": "homeworks/HW1.html#data-cleaning",
    "href": "homeworks/HW1.html#data-cleaning",
    "title": "Homework #1: Exploring elephant data",
    "section": "2. Data Cleaning",
    "text": "2. Data Cleaning\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD ### 3. Check for missing values in the dataset. ======= #### 3. Check for missing values in the dataset. &gt;&gt;&gt;&gt;&gt;&gt;&gt; 52e1a05 (second_commit)\n\n# \n\n\nJust use special functions\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD ### 4. Verify that the Sex column contains only valid categories (M and F). ======= #### 4. Verify that the Sex column contains only valid categories (M and F). &gt;&gt;&gt;&gt;&gt;&gt;&gt; 52e1a05 (second_commit)\n\n# \n\n\nTip: just use table() or unique()"
  },
  {
    "objectID": "homeworks/HW1.html#data-transformation",
    "href": "homeworks/HW1.html#data-transformation",
    "title": "Homework #1: Exploring elephant data",
    "section": "3. Data Transformation",
    "text": "3. Data Transformation\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD ### 5. Transform the Sex column into a factor. ======= #### 5. Transform the Sex column into a factor. &gt;&gt;&gt;&gt;&gt;&gt;&gt; 52e1a05 (second_commit)\n\n# \n\n\nTip: use as.factor()\nUse function and ensure that you changed column in dataset\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD ### 6. Create a new column Age_category categorizing elephants based on Age: ======= #### 6. Create a new column Age_category categorizing elephants based on Age: &gt;&gt;&gt;&gt;&gt;&gt;&gt; 52e1a05 (second_commit)\n-   \"Juvenile\" for Age \\&lt; 5\n-   \"Sub-adult\" for 5 \\&lt;= Age \\&lt; 15\n-   \"Adult\" for Age \\&gt;= 15\n\n# \n\n\ncut() - don’t forget about parameter labels = c(...)\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD ### 7. Create a column Height_category that categorizes Height into two categories: “Below Median” and “Above Median” based on the median height. ======= #### 7. Create a column Height_category that categorizes Height into two categories: “Below Median” and “Above Median” based on the median height. &gt;&gt;&gt;&gt;&gt;&gt;&gt; 52e1a05 (second_commit)\n\n# \n\n\nmean() and ifelse()\nDon’t forget to make new column a factor"
  },
  {
    "objectID": "homeworks/HW1.html#exploratory-data-analysis",
    "href": "homeworks/HW1.html#exploratory-data-analysis",
    "title": "Homework #1: Exploring elephant data",
    "section": "4. Exploratory Data Analysis",
    "text": "4. Exploratory Data Analysis\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD ### 8. Compute basic statistics (mean, median, standard deviation) for the Age and Height columns. ======= #### 8. Compute basic statistics (mean, median, standard deviation) for the Age and Height columns. &gt;&gt;&gt;&gt;&gt;&gt;&gt; 52e1a05 (second_commit)\n\n# \n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD ### 9. Identify the row with the maximum Height and print it. ======= #### 9. Identify the row with the maximum Height and print it. &gt;&gt;&gt;&gt;&gt;&gt;&gt; 52e1a05 (second_commit)\n\n# \n\n\nTip: which.max()\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD ### 10. Show a counts and frequency tables for the Age_category column. Show both counts and frequencies ======= #### 10. Show a counts and frequency tables for the Age_category column. Show both counts and frequencies &gt;&gt;&gt;&gt;&gt;&gt;&gt; 52e1a05 (second_commit)\n\n# \n\n\nUse table() and prop.table()\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD ### 11. Show a contingency table of Age_category and Height_category ======= #### 11. Show a contingency table of Age_category and Height_category &gt;&gt;&gt;&gt;&gt;&gt;&gt; 52e1a05 (second_commit)\n\n# \n\n\nUse table()\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD ### 12.* Group dataset by Height_category and calculate mean and sd of Age for each group. ======= #### 12.* Group dataset by Height_category and calculate mean and sd of Age for each group. &gt;&gt;&gt;&gt;&gt;&gt;&gt; 52e1a05 (second_commit)\n\n# \n\n\nuse group_by() and summarise()\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD ### 13. Show rows for elephants taller than the median height and select the Age and Height columns. ======= #### 13. Show rows for elephants taller than the median height and select the Age and Height columns. &gt;&gt;&gt;&gt;&gt;&gt;&gt; 52e1a05 (second_commit)\n\n# \n\n\nuse dplyr functions\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD ### 14. Arrange dataset by Height and show the first and last 5 rows and show them. ======= #### 14. Arrange dataset by Height and show the first and last 5 rows and show them. &gt;&gt;&gt;&gt;&gt;&gt;&gt; 52e1a05 (second_commit)\n\n# \n\n\nTip: you can use either n() or nrow()\nTip: slice()"
  },
  {
    "objectID": "homeworks/HW1.html#additional-transformations",
    "href": "homeworks/HW1.html#additional-transformations",
    "title": "Homework #1: Exploring elephant data",
    "section": "5. Additional Transformations",
    "text": "5. Additional Transformations\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD ### 15. Create a new column that contain the Height in meters (divide by 100), delete column with Height in cm. ======= #### 15. Create a new column that contain the Height in meters (divide by 100), delete column with Height in cm. &gt;&gt;&gt;&gt;&gt;&gt;&gt; 52e1a05 (second_commit)\n\n# \n\n\nYou can set a new column name or leave the old one.\nTip: mutate(). Parameter .keep=... may be useful\nEnsure the column is created inside dataset\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD ### 16. Round Height in meters to two decimal places (e.g. 1.4567 -&gt; 1.46) ======= #### 16. Round Height in meters to two decimal places (e.g. 1.4567 -&gt; 1.46) &gt;&gt;&gt;&gt;&gt;&gt;&gt; 52e1a05 (second_commit)\n\n# \n\n\nTip: round() and look for a specific parameter\nEnsure the column is modified inside dataset"
  },
  {
    "objectID": "homeworks/HW1.html#summary-tasks",
    "href": "homeworks/HW1.html#summary-tasks",
    "title": "Homework #1: Exploring elephant data",
    "section": "6. Summary Tasks",
    "text": "6. Summary Tasks\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD ### 17. Identify the top 3 tallest elephants and extract their Age, Height, and Sex. ======= #### 17. Identify the top 3 tallest elephants and extract their Age, Height, and Sex. &gt;&gt;&gt;&gt;&gt;&gt;&gt; 52e1a05 (second_commit)\n\n# \n\n\nYou may be using data arranging\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD ### 18.* Identify 3 oldest elephants for each Sex and extract their Age, Height. ======= #### 18.* Identify 3 oldest elephants for each Sex and extract their Age, Height. &gt;&gt;&gt;&gt;&gt;&gt;&gt; 52e1a05 (second_commit)\n\n#"
  },
  {
    "objectID": "homeworks/HW1.html#exporting-data",
    "href": "homeworks/HW1.html#exporting-data",
    "title": "Homework #1: Exploring elephant data",
    "section": "7. Exporting Data",
    "text": "7. Exporting Data\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD ### 19. Save our modified dataset as a new CSV file. ======= #### 19. Save our modified dataset as a new CSV file. &gt;&gt;&gt;&gt;&gt;&gt;&gt; 52e1a05 (second_commit)\n\n# \n\n\nName the file whatever you want\nSet row.names = FALSE if you are using the base function. The function from readr works fine by itself"
  },
  {
    "objectID": "code/advanced_df.html",
    "href": "code/advanced_df.html",
    "title": "Advanced Dataframes",
    "section": "",
    "text": "students_hours = read.csv(\"../data/student_lifestyle_dataset.csv\", row.names = 1)\nhead(students_hours) # first 5 records\n\n  Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n1                 6.9                           3.8                 8.7\n2                 5.3                           3.5                 8.0\n3                 5.1                           3.9                 9.2\n4                 6.5                           2.1                 7.2\n5                 8.1                           0.6                 6.5\n6                 6.0                           2.1                 8.0\n  Social_Hours_Per_Day Physical_Activity_Hours_Per_Day  GPA Stress_Level\n1                  2.8                             1.8 2.99     Moderate\n2                  4.2                             3.0 2.75          Low\n3                  1.2                             4.6 2.67          Low\n4                  1.7                             6.5 2.88     Moderate\n5                  2.2                             6.6 3.51         High\n6                  0.3                             7.6 2.85     Moderate\n\ntail(students_hours) # last 5 records\n\n     Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n1995                 7.9                           3.4                 9.0\n1996                 6.5                           0.2                 7.4\n1997                 6.3                           2.8                 8.8\n1998                 6.2                           0.0                 6.2\n1999                 8.1                           0.7                 7.6\n2000                 9.0                           1.7                 7.3\n     Social_Hours_Per_Day Physical_Activity_Hours_Per_Day  GPA Stress_Level\n1995                  0.5                             3.2 3.08     Moderate\n1996                  2.1                             7.8 3.32     Moderate\n1997                  1.5                             4.6 2.65     Moderate\n1998                  0.8                            10.8 3.14     Moderate\n1999                  3.5                             4.1 3.04         High\n2000                  3.1                             2.9 3.58         High\n\n\n\nstr(students_hours)\n\n'data.frame':   2000 obs. of  7 variables:\n $ Study_Hours_Per_Day            : num  6.9 5.3 5.1 6.5 8.1 6 8 8.4 5.2 7.7 ...\n $ Extracurricular_Hours_Per_Day  : num  3.8 3.5 3.9 2.1 0.6 2.1 0.7 1.8 3.6 0.7 ...\n $ Sleep_Hours_Per_Day            : num  8.7 8 9.2 7.2 6.5 8 5.3 5.6 6.3 9.8 ...\n $ Social_Hours_Per_Day           : num  2.8 4.2 1.2 1.7 2.2 0.3 5.7 3 4 4.5 ...\n $ Physical_Activity_Hours_Per_Day: num  1.8 3 4.6 6.5 6.6 7.6 4.3 5.2 4.9 1.3 ...\n $ GPA                            : num  2.99 2.75 2.67 2.88 3.51 2.85 3.08 3.2 2.82 2.76 ...\n $ Stress_Level                   : chr  \"Moderate\" \"Low\" \"Low\" \"Moderate\" ...\n\n\nMaking stress level a factor as it has 3 levels:\n\nstudents_hours$Stress_Level = as.factor(students_hours$Stress_Level)\n\nSummary\n\nsummary(students_hours)\n\n Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n Min.   : 5.000      Min.   :0.000                 Min.   : 5.0       \n 1st Qu.: 6.300      1st Qu.:1.000                 1st Qu.: 6.2       \n Median : 7.400      Median :2.000                 Median : 7.5       \n Mean   : 7.475      Mean   :1.991                 Mean   : 7.5       \n 3rd Qu.: 8.700      3rd Qu.:3.000                 3rd Qu.: 8.8       \n Max.   :10.000      Max.   :4.000                 Max.   :10.0       \n NA's   :1           NA's   :4                     NA's   :2          \n Social_Hours_Per_Day Physical_Activity_Hours_Per_Day      GPA       \n Min.   :0.000        Min.   : 0.00                   Min.   :2.240  \n 1st Qu.:1.200        1st Qu.: 2.40                   1st Qu.:2.900  \n Median :2.600        Median : 4.10                   Median :3.110  \n Mean   :2.706        Mean   : 4.33                   Mean   :3.116  \n 3rd Qu.:4.100        3rd Qu.: 6.10                   3rd Qu.:3.330  \n Max.   :6.000        Max.   :13.00                   Max.   :4.000  \n NA's   :4            NA's   :1                       NA's   :1      \n   Stress_Level \n         :   1  \n High    :1028  \n Low     : 297  \n Moderate: 674"
  },
  {
    "objectID": "code/advanced_df.html#libraries",
    "href": "code/advanced_df.html#libraries",
    "title": "Advanced Dataframes",
    "section": "Libraries",
    "text": "Libraries\n\n# install.packages(c(\"dplyr\", \"tidyr\"))\n# install.packages(\"tidyverse\")\n\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(readr)\n# library(tidyverse)"
  },
  {
    "objectID": "code/advanced_df.html#tibble",
    "href": "code/advanced_df.html#tibble",
    "title": "Advanced Dataframes",
    "section": "Tibble",
    "text": "Tibble\n\nLooks like data.frame\nBehave more conveniently\n\nnever changes input data types\nnever customises variable names\nnever prints all lines\n\n\n\nstudents_tibble = as_tibble(students_hours)\nstudents_tibble\n\n# A tibble: 2,000 × 7\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                 6.9                           3.8                 8.7\n 2                 5.3                           3.5                 8  \n 3                 5.1                           3.9                 9.2\n 4                 6.5                           2.1                 7.2\n 5                 8.1                           0.6                 6.5\n 6                 6                             2.1                 8  \n 7                 8                             0.7                 5.3\n 8                 8.4                           1.8                 5.6\n 9                 5.2                           3.6                 6.3\n10                 7.7                           0.7                 9.8\n# ℹ 1,990 more rows\n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;fct&gt;"
  },
  {
    "objectID": "code/advanced_df.html#dplyr",
    "href": "code/advanced_df.html#dplyr",
    "title": "Advanced Dataframes",
    "section": "dplyr",
    "text": "dplyr\n\nGlimpse (structure)\n\n# str(students_tibble)\nstudents_tibble %&gt;% glimpse(width = 50) \n\nRows: 2,000\nColumns: 7\n$ Study_Hours_Per_Day             &lt;dbl&gt; 6.9, 5.3…\n$ Extracurricular_Hours_Per_Day   &lt;dbl&gt; 3.8, 3.5…\n$ Sleep_Hours_Per_Day             &lt;dbl&gt; 8.7, 8.0…\n$ Social_Hours_Per_Day            &lt;dbl&gt; 2.8, 4.2…\n$ Physical_Activity_Hours_Per_Day &lt;dbl&gt; 1.8, 3.0…\n$ GPA                             &lt;dbl&gt; 2.99, 2.…\n$ Stress_Level                    &lt;fct&gt; Moderate…\n\n\n\n\nArranging (order)\n\n# students_tibble[order(students_tibble$Study_Hours_Per_Day),]\nstudents_tibble %&gt;% arrange(Study_Hours_Per_Day)\n\n# A tibble: 2,000 × 7\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                   5                           3.3                 8.5\n 2                   5                           2                   7.1\n 3                   5                           0.6                 7.7\n 4                   5                           1                   8.6\n 5                   5                           4                   8.4\n 6                   5                           1.7                 7.6\n 7                   5                           1.7                 5.5\n 8                   5                           3.5                 9  \n 9                   5                           1.6                 6.2\n10                   5                           0.2                 9.9\n# ℹ 1,990 more rows\n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;fct&gt;\n\n# students_tibble[order(students_tibble$Study_Hours_Per_Day, decreasing = T),]\nstudents_tibble %&gt;% arrange(desc(Study_Hours_Per_Day))\n\n# A tibble: 2,000 × 7\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                  10                           2.2                 8.8\n 2                  10                           0.2                 9.9\n 3                  10                           2.6                 7.8\n 4                  10                           3.7                 7.7\n 5                  10                           1.5                 7.2\n 6                  10                           3.7                 8.2\n 7                  10                           0.5                 6.4\n 8                  10                           3.5                 8.1\n 9                  10                           2.2                 9.8\n10                  10                           0.2                 8.8\n# ℹ 1,990 more rows\n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;fct&gt;\n\n\n\n\nSelect\nSelect columns by names\n\n# students_tibble[, c(\"Extracurricular_Hours_Per_Day\", \"Study_Hours_Per_Day\")]\nstudents_tibble %&gt;% select(Extracurricular_Hours_Per_Day, Study_Hours_Per_Day)\n\n# A tibble: 2,000 × 2\n   Extracurricular_Hours_Per_Day Study_Hours_Per_Day\n                           &lt;dbl&gt;               &lt;dbl&gt;\n 1                           3.8                 6.9\n 2                           3.5                 5.3\n 3                           3.9                 5.1\n 4                           2.1                 6.5\n 5                           0.6                 8.1\n 6                           2.1                 6  \n 7                           0.7                 8  \n 8                           1.8                 8.4\n 9                           3.6                 5.2\n10                           0.7                 7.7\n# ℹ 1,990 more rows\n\nstudents_tibble %&gt;%  select(-c(Study_Hours_Per_Day:Social_Hours_Per_Day))\n\n# A tibble: 2,000 × 3\n   Physical_Activity_Hours_Per_Day   GPA Stress_Level\n                             &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;       \n 1                             1.8  2.99 Moderate    \n 2                             3    2.75 Low         \n 3                             4.6  2.67 Low         \n 4                             6.5  2.88 Moderate    \n 5                             6.6  3.51 High        \n 6                             7.6  2.85 Moderate    \n 7                             4.3  3.08 High        \n 8                             5.2  3.2  High        \n 9                             4.9  2.82 Low         \n10                             1.3  2.76 Moderate    \n# ℹ 1,990 more rows\n\n\nMinuses are useful for easy column deletion. And also you can use col1:col5 to select columns from the range.\nselect() is powerful function and it is possible to combine it with other functions.\n\n# contains\nstudents_tibble %&gt;% select(contains('Hours'))\n\n# A tibble: 2,000 × 5\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                 6.9                           3.8                 8.7\n 2                 5.3                           3.5                 8  \n 3                 5.1                           3.9                 9.2\n 4                 6.5                           2.1                 7.2\n 5                 8.1                           0.6                 6.5\n 6                 6                             2.1                 8  \n 7                 8                             0.7                 5.3\n 8                 8.4                           1.8                 5.6\n 9                 5.2                           3.6                 6.3\n10                 7.7                           0.7                 9.8\n# ℹ 1,990 more rows\n# ℹ 2 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;\n\n#endswith (also there is starts_with() ficntion)\nstudents_tibble %&gt;% select(ends_with('Per_Day'))\n\n# A tibble: 2,000 × 5\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                 6.9                           3.8                 8.7\n 2                 5.3                           3.5                 8  \n 3                 5.1                           3.9                 9.2\n 4                 6.5                           2.1                 7.2\n 5                 8.1                           0.6                 6.5\n 6                 6                             2.1                 8  \n 7                 8                             0.7                 5.3\n 8                 8.4                           1.8                 5.6\n 9                 5.2                           3.6                 6.3\n10                 7.7                           0.7                 9.8\n# ℹ 1,990 more rows\n# ℹ 2 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;\n\n# only numeric columns\nstudents_tibble %&gt;% select(where(is.numeric))\n\n# A tibble: 2,000 × 6\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                 6.9                           3.8                 8.7\n 2                 5.3                           3.5                 8  \n 3                 5.1                           3.9                 9.2\n 4                 6.5                           2.1                 7.2\n 5                 8.1                           0.6                 6.5\n 6                 6                             2.1                 8  \n 7                 8                             0.7                 5.3\n 8                 8.4                           1.8                 5.6\n 9                 5.2                           3.6                 6.3\n10                 7.7                           0.7                 9.8\n# ℹ 1,990 more rows\n# ℹ 3 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;\n\n\n\n\nPull\nExtract column as vector\n\n# students_tibble$Extracurricular_Hours_Per_Day\nstudents_tibble %&gt;% pull(Extracurricular_Hours_Per_Day) %&gt;%  head(20)\n\n [1] 3.8 3.5 3.9 2.1 0.6 2.1 0.7 1.8 3.6 0.7 3.6 1.1 2.2 3.3 0.3 0.3 2.6 2.2 1.7\n[20] 2.0\n\n\n\n\nFiltering\n\n# students_tibble[students_tibble$Extracurricular_Hours_Per_Day &gt; 2 & students_tibble$Study_Hours_Per_Day &gt; 3,]\n\nstudents_tibble %&gt;% filter(Extracurricular_Hours_Per_Day &gt; 2, Study_Hours_Per_Day &gt; 3)\n\n# A tibble: 963 × 7\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                 6.9                           3.8                 8.7\n 2                 5.3                           3.5                 8  \n 3                 5.1                           3.9                 9.2\n 4                 6.5                           2.1                 7.2\n 5                 6                             2.1                 8  \n 6                 5.2                           3.6                 6.3\n 7                 9.7                           3.6                 8  \n 8                 6.4                           2.2                 5.7\n 9                 5                             3.3                 8.5\n10                 8.6                           2.6                 9.4\n# ℹ 953 more rows\n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;fct&gt;\n\nstudents_tibble %&gt;% filter(between(Extracurricular_Hours_Per_Day, 1, 2))\n\n# A tibble: 560 × 7\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                 8.4                           1.8                 5.6\n 2                 6.9                           1.1                 9.1\n 3                 7.6                           1.7                 5.1\n 4                 6.6                           2                   9.5\n 5                 6.1                           1.7                 9.1\n 6                 5                             2                   7.1\n 7                 9.7                           1.3                 7.6\n 8                 5.3                           1.1                 9.5\n 9                 9.9                           1                   8.4\n10                 5.5                           1.5                 6.3\n# ℹ 550 more rows\n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;fct&gt;\n\n\n\n\nSlice\n\n# students_tibble[30:50,]\nstudents_tibble %&gt;% slice(30:50)\n\n# A tibble: 21 × 7\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                 9.9                           1                   8.4\n 2                 6.2                           2.9                 6.8\n 3                 5.5                           3.3                 6.6\n 4                 5.2                           2.4                 8.4\n 5                 8.2                           0.7                 8.5\n 6                 9.7                           0.6                 6.7\n 7                 9.1                           2.2                 7.6\n 8                 5.5                           3.6                 9.5\n 9                 8.6                           3.6                 9.4\n10                 8.2                           0.3                 5.8\n# ℹ 11 more rows\n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;fct&gt;\n\n# students_tibble[(nrow(students_tibble)-5):(nrow(students_tibble)),]\n\nstudents_tibble %&gt;% slice((n()-5):n()) # n() is number of \"samples\" (rows)\n\n# A tibble: 6 × 7\n  Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n1                 7.9                           3.4                 9  \n2                 6.5                           0.2                 7.4\n3                 6.3                           2.8                 8.8\n4                 6.2                           0                   6.2\n5                 8.1                           0.7                 7.6\n6                 9                             1.7                 7.3\n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;fct&gt;\n\n\n\n\nRename column\n\n# students_tibble$SHPD = students_tibble$Study_Hours_Per_Day \n# students_tibble$Study_Hours_Per_Day = NULL\n\nstudents_tibble %&gt;%  rename(SHPD = Study_Hours_Per_Day)\n\n# A tibble: 2,000 × 7\n    SHPD Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day Social_Hours_Per_Day\n   &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;                &lt;dbl&gt;\n 1   6.9                           3.8                 8.7                  2.8\n 2   5.3                           3.5                 8                    4.2\n 3   5.1                           3.9                 9.2                  1.2\n 4   6.5                           2.1                 7.2                  1.7\n 5   8.1                           0.6                 6.5                  2.2\n 6   6                             2.1                 8                    0.3\n 7   8                             0.7                 5.3                  5.7\n 8   8.4                           1.8                 5.6                  3  \n 9   5.2                           3.6                 6.3                  4  \n10   7.7                           0.7                 9.8                  4.5\n# ℹ 1,990 more rows\n# ℹ 3 more variables: Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;,\n#   Stress_Level &lt;fct&gt;\n\n\n\nAdvanced rename\n\nstudents_tibble %&gt;%  rename_with(~ gsub(\"_Hours_Per_Day\", \"_h\", .x))\n\n# A tibble: 2,000 × 7\n   Study_h Extracurricular_h Sleep_h Social_h Physical_Activity_h   GPA\n     &lt;dbl&gt;             &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;               &lt;dbl&gt; &lt;dbl&gt;\n 1     6.9               3.8     8.7      2.8                 1.8  2.99\n 2     5.3               3.5     8        4.2                 3    2.75\n 3     5.1               3.9     9.2      1.2                 4.6  2.67\n 4     6.5               2.1     7.2      1.7                 6.5  2.88\n 5     8.1               0.6     6.5      2.2                 6.6  3.51\n 6     6                 2.1     8        0.3                 7.6  2.85\n 7     8                 0.7     5.3      5.7                 4.3  3.08\n 8     8.4               1.8     5.6      3                   5.2  3.2 \n 9     5.2               3.6     6.3      4                   4.9  2.82\n10     7.7               0.7     9.8      4.5                 1.3  2.76\n# ℹ 1,990 more rows\n# ℹ 1 more variable: Stress_Level &lt;fct&gt;\n\n\n\n\n\nMutate\nChanging columns and creation new ones\n\n# students_tibble$Stress_Level = as.factor(students_tibble$Stress_Level\nstudents_tibble %&gt;% mutate(Stress_Level = as.factor(Stress_Level), GPA = round(GPA), \n                           .keep='used')\n\n# A tibble: 2,000 × 2\n     GPA Stress_Level\n   &lt;dbl&gt; &lt;fct&gt;       \n 1     3 Moderate    \n 2     3 Low         \n 3     3 Low         \n 4     3 Moderate    \n 5     4 High        \n 6     3 Moderate    \n 7     3 High        \n 8     3 High        \n 9     3 Low         \n10     3 Moderate    \n# ℹ 1,990 more rows\n\n# students_tibble$GPA_sqrt = sqrt(students_tibble$GPA)\nstudents_tibble %&gt;% \n  mutate(Non_Study_Day_Hours_Per_Day =\n           Social_Hours_Per_Day + Physical_Activity_Hours_Per_Day, \n         .before = 1, .keep = 'unused')\n\n# A tibble: 2,000 × 6\n   Non_Study_Day_Hours_Per_Day Study_Hours_Per_Day Extracurricular_Hours_Per_Day\n                         &lt;dbl&gt;               &lt;dbl&gt;                         &lt;dbl&gt;\n 1                         4.6                 6.9                           3.8\n 2                         7.2                 5.3                           3.5\n 3                         5.8                 5.1                           3.9\n 4                         8.2                 6.5                           2.1\n 5                         8.8                 8.1                           0.6\n 6                         7.9                 6                             2.1\n 7                        10                   8                             0.7\n 8                         8.2                 8.4                           1.8\n 9                         8.9                 5.2                           3.6\n10                         5.8                 7.7                           0.7\n# ℹ 1,990 more rows\n# ℹ 3 more variables: Sleep_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;fct&gt;\n\n\n\nBy default, .keep = 'all', and usually it is not worth changing it or even writing this parameter\n\n\nAdvanced mutate\n\nstudents_tibble %&gt;% \n  mutate(across(Study_Hours_Per_Day:Extracurricular_Hours_Per_Day, ~ floor(.x)))\n\n# A tibble: 2,000 × 7\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                   6                             3                 8.7\n 2                   5                             3                 8  \n 3                   5                             3                 9.2\n 4                   6                             2                 7.2\n 5                   8                             0                 6.5\n 6                   6                             2                 8  \n 7                   8                             0                 5.3\n 8                   8                             1                 5.6\n 9                   5                             3                 6.3\n10                   7                             0                 9.8\n# ℹ 1,990 more rows\n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;fct&gt;\n\nstudents_tibble %&gt;% mutate(across(where(is.numeric), ~ceiling(.x)))\n\n# A tibble: 2,000 × 7\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                   7                             4                   9\n 2                   6                             4                   8\n 3                   6                             4                  10\n 4                   7                             3                   8\n 5                   9                             1                   7\n 6                   6                             3                   8\n 7                   8                             1                   6\n 8                   9                             2                   6\n 9                   6                             4                   7\n10                   8                             1                  10\n# ℹ 1,990 more rows\n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;fct&gt;\n\n\n\nround() - simple rounding\nceiling() - upward rounding\nfloor() - downward rounding\n\n\n\n\nDistinct\nExtract unique rows.\n\nstudents_tibble %&gt;%  distinct()\n\n# A tibble: 2,000 × 7\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                 6.9                           3.8                 8.7\n 2                 5.3                           3.5                 8  \n 3                 5.1                           3.9                 9.2\n 4                 6.5                           2.1                 7.2\n 5                 8.1                           0.6                 6.5\n 6                 6                             2.1                 8  \n 7                 8                             0.7                 5.3\n 8                 8.4                           1.8                 5.6\n 9                 5.2                           3.6                 6.3\n10                 7.7                           0.7                 9.8\n# ℹ 1,990 more rows\n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;fct&gt;\n\n\nWe already have unique data"
  },
  {
    "objectID": "code/advanced_df.html#tidyr",
    "href": "code/advanced_df.html#tidyr",
    "title": "Advanced Dataframes",
    "section": "tidyr",
    "text": "tidyr\n\ntribble() is strange way to create tibble. Let’s create strange dataset to show tidyr in work\n\n\nstrange_df = \n  tribble(\n    ~name, ~weight_height, ~marks,\n    'Robert', '80/180', '4,5,5,4,4',\n    'Daniel', '70/175', '4,3,5',\n    'Vlad', '90/185', '4,5,5,4,3'\n  )\n\nstrange_df\n\n# A tibble: 3 × 3\n  name   weight_height marks    \n  &lt;chr&gt;  &lt;chr&gt;         &lt;chr&gt;    \n1 Robert 80/180        4,5,5,4,4\n2 Daniel 70/175        4,3,5    \n3 Vlad   90/185        4,5,5,4,3\n\n\n\nSeparate\n\nstrange_df = strange_df %&gt;% separate(weight_height, sep = '/', \n                       into = c(\"weight\", \"height\"))\nstrange_df\n\n# A tibble: 3 × 4\n  name   weight height marks    \n  &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;    \n1 Robert 80     180    4,5,5,4,4\n2 Daniel 70     175    4,3,5    \n3 Vlad   90     185    4,5,5,4,3\n\n\n\nSeparate_rows\nTo separate rows by unique mark:\n\nstrange_df = strange_df %&gt;% separate_rows(marks, sep = ',')\nstrange_df\n\n# A tibble: 13 × 4\n   name   weight height marks\n   &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt;\n 1 Robert 80     180    4    \n 2 Robert 80     180    5    \n 3 Robert 80     180    5    \n 4 Robert 80     180    4    \n 5 Robert 80     180    4    \n 6 Daniel 70     175    4    \n 7 Daniel 70     175    3    \n 8 Daniel 70     175    5    \n 9 Vlad   90     185    4    \n10 Vlad   90     185    5    \n11 Vlad   90     185    5    \n12 Vlad   90     185    4    \n13 Vlad   90     185    3    \n\n\n\n\n\nUnite\n\nstrange_df %&gt;% unite(weight, height,\n                     col = \"weight_height\",\n                     sep = '/', remove=T)\n\n# A tibble: 13 × 3\n   name   weight_height marks\n   &lt;chr&gt;  &lt;chr&gt;         &lt;chr&gt;\n 1 Robert 80/180        4    \n 2 Robert 80/180        5    \n 3 Robert 80/180        5    \n 4 Robert 80/180        4    \n 5 Robert 80/180        4    \n 6 Daniel 70/175        4    \n 7 Daniel 70/175        3    \n 8 Daniel 70/175        5    \n 9 Vlad   90/185        4    \n10 Vlad   90/185        5    \n11 Vlad   90/185        5    \n12 Vlad   90/185        4    \n13 Vlad   90/185        3"
  },
  {
    "objectID": "code/advanced_df.html#delete-rows-containing-nas",
    "href": "code/advanced_df.html#delete-rows-containing-nas",
    "title": "Advanced Dataframes",
    "section": "Delete rows containing NAs",
    "text": "Delete rows containing NAs\n\nstudents_tibble %&gt;%  na.omit()\n\n# A tibble: 1,993 × 7\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                 6.9                           3.8                 8.7\n 2                 5.3                           3.5                 8  \n 3                 5.1                           3.9                 9.2\n 4                 6.5                           2.1                 7.2\n 5                 8.1                           0.6                 6.5\n 6                 6                             2.1                 8  \n 7                 8                             0.7                 5.3\n 8                 8.4                           1.8                 5.6\n 9                 5.2                           3.6                 6.3\n10                 7.7                           0.7                 9.8\n# ℹ 1,983 more rows\n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;fct&gt;\n\nstudents_tibble %&gt;%  drop_na()\n\n# A tibble: 1,993 × 7\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                 6.9                           3.8                 8.7\n 2                 5.3                           3.5                 8  \n 3                 5.1                           3.9                 9.2\n 4                 6.5                           2.1                 7.2\n 5                 8.1                           0.6                 6.5\n 6                 6                             2.1                 8  \n 7                 8                             0.7                 5.3\n 8                 8.4                           1.8                 5.6\n 9                 5.2                           3.6                 6.3\n10                 7.7                           0.7                 9.8\n# ℹ 1,983 more rows\n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;fct&gt;\n\n#drop_na allows to concrete columns\nstudents_tibble %&gt;%  drop_na(Physical_Activity_Hours_Per_Day)\n\n# A tibble: 1,999 × 7\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                 6.9                           3.8                 8.7\n 2                 5.3                           3.5                 8  \n 3                 5.1                           3.9                 9.2\n 4                 6.5                           2.1                 7.2\n 5                 8.1                           0.6                 6.5\n 6                 6                             2.1                 8  \n 7                 8                             0.7                 5.3\n 8                 8.4                           1.8                 5.6\n 9                 5.2                           3.6                 6.3\n10                 7.7                           0.7                 9.8\n# ℹ 1,989 more rows\n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;fct&gt;"
  },
  {
    "objectID": "code/advanced_df.html#replace-with-value",
    "href": "code/advanced_df.html#replace-with-value",
    "title": "Advanced Dataframes",
    "section": "Replace with value",
    "text": "Replace with value\n\nsimple\n\n# and do it for each column\nstudents_tibble$GPA[is.na(students_tibble$GPA)] = mean(students_tibble$GPA)\n\n\n\nadvanced\n\n# to secify values\nstudents_tibble %&gt;%  replace_na(list(Social_Hours_Per_Day = 0,\n                                     Extracurricular_Hours_Per_Day = 0))\n\n# A tibble: 2,000 × 7\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                 6.9                           3.8                 8.7\n 2                 5.3                           3.5                 8  \n 3                 5.1                           3.9                 9.2\n 4                 6.5                           2.1                 7.2\n 5                 8.1                           0.6                 6.5\n 6                 6                             2.1                 8  \n 7                 8                             0.7                 5.3\n 8                 8.4                           1.8                 5.6\n 9                 5.2                           3.6                 6.3\n10                 7.7                           0.7                 9.8\n# ℹ 1,990 more rows\n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;fct&gt;\n\n# to fill with the nearest value in the each column\nstudents_tibble %&gt;%  fill()\n\n# A tibble: 2,000 × 7\n   Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                 &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n 1                 6.9                           3.8                 8.7\n 2                 5.3                           3.5                 8  \n 3                 5.1                           3.9                 9.2\n 4                 6.5                           2.1                 7.2\n 5                 8.1                           0.6                 6.5\n 6                 6                             2.1                 8  \n 7                 8                             0.7                 5.3\n 8                 8.4                           1.8                 5.6\n 9                 5.2                           3.6                 6.3\n10                 7.7                           0.7                 9.8\n# ℹ 1,990 more rows\n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;fct&gt;\n\n\nI will just delete them :)\n\nstudents_tibble = students_tibble %&gt;%  na.omit()"
  },
  {
    "objectID": "code/advanced_df.html#joins",
    "href": "code/advanced_df.html#joins",
    "title": "Advanced Dataframes",
    "section": "Joins",
    "text": "Joins\nfor combining several datasets. For example, we have two dataframes with the same column - names. The first dataframe contain data about wealth and work, the second contain information about town, street and etc. We want to make one dataframe that contain info from the both dataframes.\n\n# Full join: returns all rows from both df1 and df2, filling with NA where no match.\ndf1 %&gt;% full_join(df2, by = 'name')\n\n# Inner join: returns only matching rows from both df1 and df2.\ndf1 %&gt;% inner_join(df2, by = 'name')\n\n# Left join: returns all rows from df1 and matched rows from df2; unmatched in df2 are NA.\ndf1 %&gt;% left_join(df2, by = 'name')\n\n# Right join: returns all rows from df2 and matched rows from df1; unmatched in df1 are NA.\ndf1 %&gt;% right_join(df2, by = 'name')\n\n# Anti join: returns rows from df1 that do not match any rows in df2.\ndf1 %&gt;% anti_join(df2, by = 'name')\n\n# Semi join: returns rows from df1 that have matches in df2, without adding columns from df2.\ndf1 %&gt;% semi_join(df2, by = 'name')"
  },
  {
    "objectID": "code/advanced_df.html#grouping",
    "href": "code/advanced_df.html#grouping",
    "title": "Advanced Dataframes",
    "section": "Grouping",
    "text": "Grouping\n\n# Grouping the 'students_tibble' data frame by the 'Stress_Level' column\n# Than Calculating the mean of 'Study_Hours_Per_Day' for each stress level group, ignoring missing values (na.rm = TRUE)\nstudents_tibble %&gt;% group_by(Stress_Level) %&gt;% \n  summarise(study_hours_mean = mean(Study_Hours_Per_Day, na.rm = T))\n\n# A tibble: 3 × 2\n  Stress_Level study_hours_mean\n  &lt;fct&gt;                   &lt;dbl&gt;\n1 High                     8.38\n2 Low                      5.47\n3 Moderate                 6.97"
  },
  {
    "objectID": "code/advanced_df.html#slice_head",
    "href": "code/advanced_df.html#slice_head",
    "title": "Advanced Dataframes",
    "section": "Slice_head()",
    "text": "Slice_head()\nalmost the same as basic head(), but it is more suitable for grouped data:\n\nstudents_tibble %&gt;% group_by(Stress_Level) %&gt;% slice_head(n=3)\n\n# A tibble: 9 × 7\n# Groups:   Stress_Level [3]\n  Study_Hours_Per_Day Extracurricular_Hours_Per_Day Sleep_Hours_Per_Day\n                &lt;dbl&gt;                         &lt;dbl&gt;               &lt;dbl&gt;\n1                 8.1                           0.6                 6.5\n2                 8                             0.7                 5.3\n3                 8.4                           1.8                 5.6\n4                 5.3                           3.5                 8  \n5                 5.1                           3.9                 9.2\n6                 5.2                           3.6                 6.3\n7                 6.9                           3.8                 8.7\n8                 6.5                           2.1                 7.2\n9                 6                             2.1                 8  \n# ℹ 4 more variables: Social_Hours_Per_Day &lt;dbl&gt;,\n#   Physical_Activity_Hours_Per_Day &lt;dbl&gt;, GPA &lt;dbl&gt;, Stress_Level &lt;fct&gt;\n\n\nHere we sliced first 3 rows for data in each group"
  },
  {
    "objectID": "code/datavis.html",
    "href": "code/datavis.html",
    "title": "Data visualization",
    "section": "",
    "text": "We already know how to extract useful information from data frames. Various statistics tell us a lot about the data. Nevertheless, values of mean, quantiles and standard deviations are inconvenient for understanding the whole picture.\nWe get the most information through our eyes, therefore the skill of presenting the data visually is on of the most powerful. By creating simple visualisations, you can make initial hypotheses and understand possible relationships between variables."
  },
  {
    "objectID": "code/datavis.html#plot",
    "href": "code/datavis.html#plot",
    "title": "Data visualization",
    "section": "plot()",
    "text": "plot()\nThe simplest graph is a points, each having x and y coordinates\n\nx = 1:10\ny = seq(2,20,2) ^ 2\nx\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\ny\n\n [1]   4  16  36  64 100 144 196 256 324 400\n\n\nWe consider that the x and y coordinates at the same positions in each of the vectors correspond to one particular point. So we have points (1,2), (2,4), (3,6) and etc.\n\nseq(from_value, to_value, by_value)- returns a vector with values from from_value to to_valuewith a step by_value\n\n\nScatter plot\n\nplot(x, y)\n\n\n\n\n\n\n\n\n\n\nSepal.Length vs Sepal.Width\n\nplot(iris_df$Sepal.Length, iris_df$Sepal.Width)\n\n\n\n\n\n\n\n\nWe can make this graph prettier\n\nplot(iris_df$Sepal.Length, iris_df$Sepal.Width,\n     main = \"Sepal.Length vs. Sepal.Width\", # the title\n     xlab = \"Sepal.Length\", # Label of X-axis\n     ylab = \"Sepal.Width\", # Label of Y-axis \n     col = \"blue\", # color of plot\n     pch = 19, # type of dots - 19 corresponds to the painted (solid) points\n     cex = 1, # size of dots\n     ) \n\n\n\n\n\n\n\n\n\n\nAdding lines\nBy default plot() shows scatter plot, but we can change this behavior\n\nplot(x, y,type = 'l') \n\n\n\n\n\n\n\nplot(x, y,type = 'b', lwd = 3) # lwd = linewidth\n\n\n\n\n\n\n\nplot(x, y, type = 'o')\n\n\n\n\n\n\n\n\n\nTerrible plot\nLine graphs should sometimes be avoided, because lines connect points in the order of their position in the vectors\n\nx = c(10,5,9,6,8,7,2,1,4,3)\ny = c(1:4, 6:8,5,10,9)\n\nplot(x, y, type = \"b\",  pch=19)\n\n\n\n\n\n\n\n\nAfter sorting:\n\ndf = data.frame(x, y) %&gt;% arrange(x)\nplot(df$x, df$y,type = \"b\", pch=19)\n\n\n\n\n\n\n\n\n\n# Advanced\n\n# indexes_to_sort = order(x)\n# x_sorted = x[indexes_to_sort]\n# y_sorted = y[indexes_to_sort]\n# plot(x_sorted, y_sorted, type = \"b\", pch=19)\n\n\nNB! We can’t just sort one of the vectors because we must save the correspondence of x and y coordinates between two vectors.\n\n\n\n\nAll plot() style parameters"
  },
  {
    "objectID": "code/datavis.html#bar-plots",
    "href": "code/datavis.html#bar-plots",
    "title": "Data visualization",
    "section": "Bar Plots",
    "text": "Bar Plots\n\nheights = c(Roman = 190, Ann = 172, Charlie = 121) # named vector\nbarplot(heights)\n\n\n\n\n\n\n\n\nWe can make this graph prettier\n\nbarplot(heights, \n        main = \"Heights of people\", # the title \n        xlab = \"Height\", # Label of X-axis \n        ylab = \"Name\", # Label of Y-axis \n        col = \"lightblue\", # color of inner part of bars\n        border = \"blue\", # color of borders\n        horiz = TRUE, # make barplot horizontal\n        xlim = c(0,200) # limits of values showd on x-axis\n        )\n\n\n\n\n\n\n\n\n\nNumber of iris_df species\n\nnumber_of_species = table(iris_df$Species)\nbarplot(number_of_species,\n        col = 'violet')\n\n\n\n\n\n\n\n\nNow we see that our data “is balanced”"
  },
  {
    "objectID": "code/datavis.html#histograms",
    "href": "code/datavis.html#histograms",
    "title": "Data visualization",
    "section": "Histograms",
    "text": "Histograms\n\nDistribution of Sepal.Length\n\nhist(iris_df$Sepal.Length, # only x-axis! \n     main = \"Sepal.Length distribution\", \n     xlab = \"Sepal.length\", \n     col = \"lightgreen\", \n     breaks = 8 # number of x-axis splits for frequency calculation in each of the resulting ranges\n     )\n\n\n\n\n\n\n\n\nEach bar represents frequency of iris_dfes with this particular Sepal.Length.\nFor example, first bar have height of 5 - it mean, that there are 5 flowers with Sepal.Length between 4 and 4.5.\nWe can make bars two times thinner\n\nhist(iris_df$Sepal.Length,\n     main = \"Sepal.Length distribution\", \n     xlab = \"Sepal.length\", \n     col = \"lightgreen\", \n     breaks = 16) # &lt;---- changed"
  },
  {
    "objectID": "code/datavis.html#boxplots",
    "href": "code/datavis.html#boxplots",
    "title": "Data visualization",
    "section": "Boxplots",
    "text": "Boxplots\nBoxplots are very informative charts. They display similar but more information than a histogram.\n\n\n\nboxplot(iris_df$Sepal.Length, \n        # main = \"Sepal.Length\", \n        ylab = \"\",\n        xlab = \"Sepal.Length\", \n        col = \"darkviolet\",\n        horizontal = T)\n\n\n\n\n\n\n\n\n\nGrouped boxplots\n\nboxplot(iris_df$Sepal.Length ~ iris_df$Species, \n        main = \"Sepal.Length\",\n        xlab = \"Species\",\n        ylab = \"Sepal.Length\", \n        col = \"darkviolet\",\n        horizontal = F)\n\n\n\n\n\n\n\n\n\nBoxplot is good for unimodal similar to normaldistributions, as it doesn’t show two peaks"
  },
  {
    "objectID": "code/datavis.html#all-basic-r-functions",
    "href": "code/datavis.html#all-basic-r-functions",
    "title": "Data visualization",
    "section": "All basic R functions",
    "text": "All basic R functions"
  },
  {
    "objectID": "code/datavis.html#phylosophy",
    "href": "code/datavis.html#phylosophy",
    "title": "Data visualization",
    "section": "Phylosophy",
    "text": "Phylosophy\n\nThe ggplot is based on 3 things: data, aesthetics and geoms (geomertries)\nInside the geoms there are aesthetics.\nInside the aesthetics we put the variables from the data that we want to see in the plot. These will be our axes.\nAn axis is not just an x and y coordinate - any aesthetic, such as a fill,color,size etc. can also be an (pseudo)axis.\nEach component in the graphic is added layer by layer"
  },
  {
    "objectID": "code/datavis.html#intro",
    "href": "code/datavis.html#intro",
    "title": "Data visualization",
    "section": "Intro",
    "text": "Intro\n\nggplot(data=iris_df, # data\n       mapping = aes(x=Sepal.Length, y=Sepal.Width)) + #aesthetics (axes)\n  geom_point()  # geom\n\n\n\n\n\n\n\n\nObligatory components to create chart:\n\nggplot(data=iris_df) - data: data.frame, tibble …\nggplot(..., mappings=aes(x=Sepal.Length, y=Sepal.Width)) - aesthetics, which turned into x and y axis.\n+ geom_point() - geom, at least one."
  },
  {
    "objectID": "code/datavis.html#adding-new-aesthetics-axes",
    "href": "code/datavis.html#adding-new-aesthetics-axes",
    "title": "Data visualization",
    "section": "Adding new aesthetics (“axes”)",
    "text": "Adding new aesthetics (“axes”)\n\nColor and size\n\nggplot(data=iris_df,\n       mapping = aes(x=Sepal.Length, y=Sepal.Width,\n                      color=Species, size = Petal.Width,\n                     shape=Sepal.Length.Category)) +\n  geom_point() \n\n\n\n\n\n\n\n\n\n\nOther aesthetics\n\nshape - shape of points\nfill - filling color\nstroke - stroke thickness\nalpha - transparency"
  },
  {
    "objectID": "code/datavis.html#geoms",
    "href": "code/datavis.html#geoms",
    "title": "Data visualization",
    "section": "Geoms",
    "text": "Geoms\nGeometries define the types of graphs in the diagram\n\nGeoms have specific variables\n\niris_df %&gt;% \n  ggplot(aes(x=Sepal.Width)) +   # &lt;--- here\n  geom_histogram(bins = 20, fill='lightblue', col='black')\n\n\n\n\n\n\n\n\n\n\nAesthetics can also be set up within the geoms\n\niris_df %&gt;% \n  ggplot() + \n  geom_histogram(aes(x=Sepal.Width),\n                 bins = 20, fill='lightblue', col='black')  # &lt;--- here\n\n\n\n\n\n\n\n\n\naesthetics inside ggplot() are set for all geoms\naesthetics inside geom_..() functions are set only for this geom\n\n\n\nAdding several geoms\n\niris_df %&gt;% \n  ggplot(aes(x=Species, y=Sepal.Length)) + \n  geom_boxplot(aes(fill=Species), outliers = F) +\n  geom_jitter(width=0.1)\n\n\n\n\n\n\n\n\n\n\nDifferences between variables and aesthetics\n\nAs you have seen,fill, color, size, shape, stroke and alpha can be seen outside of aes(). They can also be set to a specific fixed value.\n\n\nInside the aes()\n\niris_df %&gt;% \n  ggplot(aes(x=Sepal.Length, y=Sepal.Width)) +\n  geom_point(aes(color=Species)) # &lt;--- here\n\n\n\n\n\n\n\n\n\n\nOutside the aes()\n\nggplot(data=iris_df,\n       mapping = aes(x=Sepal.Length, y=Sepal.Width)) +\n  geom_point(color='blue')  # &lt;--- here"
  },
  {
    "objectID": "code/datavis.html#storing-plots-in-variables",
    "href": "code/datavis.html#storing-plots-in-variables",
    "title": "Data visualization",
    "section": "Storing plots in variables",
    "text": "Storing plots in variables\n\np = ggplot(data=iris_df,\n       mapping = aes(x=Sepal.Length, y=Sepal.Width, color=Species)) +\n  geom_point()\np"
  },
  {
    "objectID": "code/datavis.html#themes",
    "href": "code/datavis.html#themes",
    "title": "Data visualization",
    "section": "Themes",
    "text": "Themes\n\nBuilt-in themes\n\np + theme_bw()\n\n\n\n\n\n\n\np + theme_classic()\n\n\n\n\n\n\n\np + theme_void()\n\n\n\n\n\n\n\n\n\n\nCustom themes (Advanced)\n\np = p + theme(axis.text = element_text(size = 15),\n          axis.title = element_text(size = 20),\n          panel.background = element_rect(fill = 'white', color='black'))\np"
  },
  {
    "objectID": "code/datavis.html#labels",
    "href": "code/datavis.html#labels",
    "title": "Data visualization",
    "section": "Labels",
    "text": "Labels\n\np + labs(x='Sepal length', y='Sepal width', \n         title = 'Scatter plot', subtitle = 'Subtitle',\n         caption = 'It is the great plot', tag = 'A')\n\n\n\n\n\n\n\n\nSimple functions for labeling axes: + xlab() and + ylab()"
  },
  {
    "objectID": "code/datavis.html#scatter-plot-1",
    "href": "code/datavis.html#scatter-plot-1",
    "title": "Data visualization",
    "section": "Scatter plot",
    "text": "Scatter plot\n\niris_df %&gt;% ggplot(aes(x=Petal.Length, y=Petal.Width)) + \n  geom_point() + theme_classic()"
  },
  {
    "objectID": "code/datavis.html#histogram",
    "href": "code/datavis.html#histogram",
    "title": "Data visualization",
    "section": "Histogram",
    "text": "Histogram\n\niris_df %&gt;% ggplot(aes(x=Petal.Length)) + \n  geom_histogram(color='blue', fill='lightblue') +\n  theme_classic()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`."
  },
  {
    "objectID": "code/datavis.html#density-plot",
    "href": "code/datavis.html#density-plot",
    "title": "Data visualization",
    "section": "Density plot",
    "text": "Density plot\n\niris_df %&gt;% ggplot(aes(x=Petal.Width, fill=Species)) + \n  geom_density(alpha=0.8) + theme_classic()"
  },
  {
    "objectID": "code/datavis.html#boxplot",
    "href": "code/datavis.html#boxplot",
    "title": "Data visualization",
    "section": "Boxplot",
    "text": "Boxplot\n\niris_df %&gt;% ggplot(aes(x=Petal.Width, y=Species, fill=Species)) + \n  geom_boxplot() + theme_classic()"
  },
  {
    "objectID": "code/datavis.html#barplot",
    "href": "code/datavis.html#barplot",
    "title": "Data visualization",
    "section": "Barplot",
    "text": "Barplot\n\nsepal_len_stats = iris_df %&gt;% group_by(Species) %&gt;% \n  summarise(mean_sepal_len = mean(Sepal.Length), \n            sd_sepal_length = sd(Sepal.Length))\n\nsepal_len_stats\n\n# A tibble: 3 × 3\n  Species    mean_sepal_len sd_sepal_length\n  &lt;fct&gt;               &lt;dbl&gt;           &lt;dbl&gt;\n1 setosa               5.01           0.352\n2 versicolor           5.94           0.516\n3 virginica            6.59           0.636\n\n\n\ngeom_col - if heights of bars are known (continuous data)\n\np_col = sepal_len_stats %&gt;% \n  ggplot(aes(x=Species, y=mean_sepal_len, fill=Species)) + \n  geom_col() + theme_classic()\n\np_col\n\n\n\n\n\n\n\n\n\n\nAdding geom_errorbar (SD)\n\np_col + geom_errorbar(aes(ymin=mean_sepal_len-sd_sepal_length,\n                          ymax=mean_sepal_len+sd_sepal_length),\n                      width=0.3)\n\n\n\n\n\n\n\n\n\nThree different types of values are commonly used for error bars, sometimes without even specifying which one is used.\n\nStandard deviation\nStandard error\nConfidence interval\n\nWe will discuss each later\n\n\n\ngeom_bar - if heights are unknown (counting categorical data)\n\niris_df %&gt;% ggplot(aes(x=Sepal.Length.Category, \n                       fill=Sepal.Length.Category)) + geom_bar()\n\n\n\n\n\n\n\n\n\n\nposition=\"stack\" (by default)\n\niris_df %&gt;% ggplot(aes(fill=Species, x=Sepal.Length.Category)) + geom_bar()\n\n\n\n\n\n\n\n\n\n\nposition=\"fill\" - scaling from 0 to 1\n\niris_df %&gt;% ggplot(aes(fill=Species, x=Sepal.Length.Category)) + \n  geom_bar(position = 'fill')\n\n\n\n\n\n\n\n\n\n\nposition=\"dodge\"\n\niris_df %&gt;% ggplot(aes(fill=Species, x=Sepal.Length.Category)) + \n  geom_bar(position = 'dodge')"
  },
  {
    "objectID": "code/datavis.html#barplot-1",
    "href": "code/datavis.html#barplot-1",
    "title": "Data visualization",
    "section": "Barplot",
    "text": "Barplot\n\niris_df %&gt;%  ggbarplot(x=\"Species\", y=\"Sepal.Width\",\n                       fill='Species',\n                       add = \"mean_sd\" # calculate mean and sd\n                       )"
  },
  {
    "objectID": "code/datavis.html#boxplot-1",
    "href": "code/datavis.html#boxplot-1",
    "title": "Data visualization",
    "section": "Boxplot",
    "text": "Boxplot\n\nStatisctics inside!\n\np_pubr = iris_df %&gt;%  ggboxplot(x='Species', y='Sepal.Length', col='Species')\n\ncomparisons &lt;- list( c(\"setosa\", \"versicolor\"), \n                     c(\"setosa\", \"virginica\"), \n                     c(\"virginica\", \"versicolor\") )\n\np_pubr + stat_compare_means(comparisons = comparisons, \n                            label = \"p.signif\")+ \n  stat_compare_means(label.y = 10)"
  },
  {
    "objectID": "code/stats_intro.html",
    "href": "code/stats_intro.html",
    "title": "stats_intro",
    "section": "",
    "text": "Distributions\nRandom values from distributions"
  },
  {
    "objectID": "code/basic_r.html",
    "href": "code/basic_r.html",
    "title": "Prac #1. Basic R",
    "section": "",
    "text": "Here you can see\n\nThis file with code on top of the screen\nConsole, where you can write code line by line. In fact, when you execute the code from the file, the entire script is run via the console\nFiles, Help etc. on the bottom right below\nEnvironment containing all created variables on the top right\n\nWe can create new files, projects and even presentations or websites. RStudio provides us with useful tools for programming, especially in R, but we can also do it in python, bash and other languages.\n\n\nPress Tab while writing something and RStudio will help you. Often it helps even without pressing the button :)\n\n\n\nPrint\n\n?getwd\n\nTo open help for a function (here, getwd).\nOr just go to Help on the bottom right below"
  },
  {
    "objectID": "code/basic_r.html#tips-for-you",
    "href": "code/basic_r.html#tips-for-you",
    "title": "Prac #1. Basic R",
    "section": "",
    "text": "Press Tab while writing something and RStudio will help you. Often it helps even without pressing the button :)"
  },
  {
    "objectID": "code/basic_r.html#help",
    "href": "code/basic_r.html#help",
    "title": "Prac #1. Basic R",
    "section": "",
    "text": "Print\n\n?getwd\n\nTo open help for a function (here, getwd).\nOr just go to Help on the bottom right below"
  },
  {
    "objectID": "code/basic_r.html#markdown",
    "href": "code/basic_r.html#markdown",
    "title": "Prac #1. Basic R",
    "section": "Markdown",
    "text": "Markdown\n\nMarkdown - is markup language for creating formatted text\n\nMost useful formattings:\n\n**bold text** - bold text\n*italic text* - italic text\n# Head - Heading as above “R markdown”. Main section.\nMultiple # (##/####/####, etc.) - Headings of subsections (as ‘Markdown’ written above)\n&gt; - quote\n\nR Markdown also supports LaTeX which useful for writing mathematical equations:\n\n$E = mc^2$ is turned into \\(E = mc^2\\)"
  },
  {
    "objectID": "code/basic_r.html#knit",
    "href": "code/basic_r.html#knit",
    "title": "Prac #1. Basic R",
    "section": "knit",
    "text": "knit\nR Markdown allows us to “knit” this project and create beautiful report in html, pdf and even Word. To do that find the blue ball on top of the screen and click on it. While knitting all chunks will be executed again taking into account you options set for chunks."
  },
  {
    "objectID": "code/basic_r.html#hotkeys",
    "href": "code/basic_r.html#hotkeys",
    "title": "Prac #1. Basic R",
    "section": "Hotkeys",
    "text": "Hotkeys\n\n\n\nAction\nWindows/Linux\nMac\n\n\n\n\nKnit the document\nCtrl + Shift + K\nCmd + Shift + K\n\n\nCreate a chunk\nCtrl + Alt + I\nCmd + Option + I\n\n\nRun current line\nCtrl + Enter\nCmd + Enter\n\n\nRun current chunk\nCtrl + Alt + C\nCmd + Option + C\n\n\nShow all shortcuts\nAlt + Shift + K\nOption + Shift + K\n\n\nDelete current line\nCtrl + D\nCmd + D\n\n\nComment current line\nCtrl + Shift + C\nCmd + Shift + C"
  },
  {
    "objectID": "code/basic_r.html#variables",
    "href": "code/basic_r.html#variables",
    "title": "Prac #1. Basic R",
    "section": "Variables",
    "text": "Variables\nAll you need to know about variables is that they can store values which we assign\n\nvariable &lt;- 37\nvar_character = 'biology'\nvar_bool = TRUE\n\nWe can just run code with name of variable to see its value\n\nvariable\n\n[1] 37\n\nvar_character\n\n[1] \"biology\"\n\nvar_bool\n\n[1] TRUE\n\n\nChange the value:\n\nvariable = variable + 100\nvariable\n\n[1] 137\n\n\n\nMathematical operations\n\nx = 19\ny = 9\n\n\n- x\n\n[1] -19\n\nx + y\n\n[1] 28\n\nx - y\n\n[1] 10\n\nx * y\n\n[1] 171\n\nx / y \n\n[1] 2.111111\n\nx ^ y # x to the power of y\n\n[1] 322687697779\n\nsqrt(x) # square root\n\n[1] 4.358899\n\nx %% y # ‘remainder’ of division \n\n[1] 1\n\nx %/% y # integer division\n\n[1] 2\n\n\n\n\nLogical operations\n\nx &gt; y\n\n[1] TRUE\n\nx &lt; y\n\n[1] FALSE\n\nx == y # is equal\n\n[1] FALSE\n\nx != y # is not equal\n\n[1] TRUE\n\n\n\n10 &lt; 10\n\n[1] FALSE\n\n10 &lt;= 10\n\n[1] TRUE\n\n\n\nx &lt; 10 & y &lt; 10 \n\n[1] FALSE\n\nx &lt; 10 | y &lt;= 10\n\n[1] TRUE\n\n\n\nbool1 = TRUE\nbool2 = FALSE\n\n! &lt;-&gt; “not”\n\n!bool1\n\n[1] FALSE\n\n!bool2\n\n[1] TRUE"
  },
  {
    "objectID": "code/basic_r.html#vectors",
    "href": "code/basic_r.html#vectors",
    "title": "Prac #1. Basic R",
    "section": "Vectors",
    "text": "Vectors\nVector is a simple one-dimensional array. In R it can contain only one type of data. The function used to create vector is c().\nHere we create some vectors and store them in corresponding variables:\n\nv_numeric = c(1,2,3,4)\nv_logical = c(T,F,F,T)\nv_character = c(\"1\",\"2\",\"3\",\"4\")\n\n(R allows us not to write whole FALSE and TRUE, bur write only first letter)\nSimple way to create integer vector\n\n1:5\n\n[1] 1 2 3 4 5\n\n5:1\n\n[1] 5 4 3 2 1\n\n\n\nc(1:5, c(11,13,14))\n\n[1]  1  2  3  4  5 11 13 14\n\n\n\nValues in vector are not sorted and unique by default!\n\n\nIndexes\nWe can access to the values of vector by indexes.\n\nvec = c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\")\nvec[3]\n\n[1] \"C\"\n\nvec[7]\n\n[1] NA\n\nvec[-1]\n\n[1] \"B\" \"C\" \"D\" \"E\" \"F\"\n\n\nNA indicates a missing value. It appears here because the 7th element does not exist in the vector\nWhat if we use vectors as indexes…?\n\n# vec[1,2,3] # ERROR\nvec[1:3]\n\n[1] \"A\" \"B\" \"C\"\n\nvec[3:1]\n\n[1] \"C\" \"B\" \"A\"\n\nvec[c(3,1,5)]\n\n[1] \"C\" \"A\" \"E\"\n\n\nInside of [ ] vector is interpreted as a indexes of values in vec\n\n\nGreat feature of R language - vectorization\n\nMathematical operations\nWhat will be the result of this operation?\n\nvec1234 = c(1, 2, 3, 4)\nvec1234 + 5\n\n[1] 6 7 8 9\n\n# c(vec1234, 5)\n\nWow! Isn’t it cool? We can do anything with vectors not by using some operation for each value step by step, but using operation for each value only once\n\nc(1, 2, 3, 4) * 5\n\n[1]  5 10 15 20\n\nc(1, 2, 3, 4) ^ 2\n\n[1]  1  4  9 16\n\n\nMoreover, we can perform mathematical operations on two vectors\n\nvec123 = c(1, 2, 3) \nvec321 = c(3, 2, 1)\n\nvec_new = vec123 * vec321\nvec_new\n\n[1] 3 4 3\n\n\nThe result is also vector!\n\n\nLogical operations\nAlso vectorized\n\nvec1234 &gt; 2\n\n[1] FALSE FALSE  TRUE  TRUE\n\n\n\nvec123 &gt;= vec321\n\n[1] FALSE  TRUE  TRUE"
  },
  {
    "objectID": "code/basic_r.html#the-fun-is-just-started",
    "href": "code/basic_r.html#the-fun-is-just-started",
    "title": "Prac #1. Basic R",
    "section": "The fun is just started!",
    "text": "The fun is just started!\n\nCreate vectors from vectors\n\nweghts_of_seed = c(1:4, 10:15, 4:7)\nweghts_of_seed\n\n [1]  1  2  3  4 10 11 12 13 14 15  4  5  6  7\n\n\n\n\nUse conditions (logic) inside square brackets\n\nweghts_of_seed[weghts_of_seed &lt; 5]\n\n[1] 1 2 3 4 4\n\n\nLets break out this. Firstly, logical vector is created inside the brackets to filter the data. For example, we filter data with values more than 5\n\nlogical_vector = weghts_of_seed &lt; 5\nlogical_vector\n\n [1]  TRUE  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE FALSE\n[13] FALSE FALSE\n\n\nThan logical vector “make” to filter out values which have “FALSE” in corresponding index\n\nweghts_of_seed[logical_vector]\n\n[1] 1 2 3 4 4\n\n\nIt is VERY useful for filtering simple data.\n\nweghts_of_seed[weghts_of_seed &lt; 10 & weghts_of_seed &gt; 0]\n\n[1] 1 2 3 4 4 5 6 7"
  },
  {
    "objectID": "code/basic_r.html#basic-statistics",
    "href": "code/basic_r.html#basic-statistics",
    "title": "Prac #1. Basic R",
    "section": "Basic statistics",
    "text": "Basic statistics\nWe can already compute some statistics on numerical vectors!\n\nsum(weghts_of_seed)\n\n[1] 107\n\nmean(weghts_of_seed)\n\n[1] 7.642857\n\nmedian(weghts_of_seed)\n\n[1] 6.5\n\n\n\nvar(weghts_of_seed)\n\n[1] 22.55495\n\nsd(weghts_of_seed)\n\n[1] 4.749205\n\nvar(weghts_of_seed) == sd(weghts_of_seed)^2\n\n[1] FALSE\n\n\n\nMin and max\n\nmax(weghts_of_seed)\n\n[1] 15\n\nmin(weghts_of_seed)\n\n[1] 1\n\n\n\n\nQuantiles\n\nquantile(weghts_of_seed)\n\n   0%   25%   50%   75%  100% \n 1.00  4.00  6.50 11.75 15.00 \n\nquantile(weghts_of_seed, probs = c(0.1, 0.5, 0.9))\n\n 10%  50%  90% \n 2.3  6.5 13.7 \n\nquantile(weghts_of_seed, probs = c(0.5)) == median(weghts_of_seed)\n\n 50% \nTRUE \n\n\n\n\nValues above the mean\n\nmean_value = mean(weghts_of_seed)\nweghts_of_seed[weghts_of_seed &gt; mean_value]\n\n[1] 10 11 12 13 14 15"
  },
  {
    "objectID": "code/basic_r.html#two-associated-vectors",
    "href": "code/basic_r.html#two-associated-vectors",
    "title": "Prac #1. Basic R",
    "section": "Two “associated” vectors",
    "text": "Two “associated” vectors\n\nNamed vectors\n\nstudents_names = c('Daniel', 'Sasha', 'Robert', 'Alice', \n                   'Diana', 'Anastasia', 'Alexey', 'Julia')\nage = c(15, 32, 18, 8, 23, 17,22, 23)\n\nStudents older than 18\n\nstudents_names[age &gt; 18] # ANY logical vector\n\n[1] \"Sasha\"  \"Diana\"  \"Alexey\" \"Julia\" \n\n\nStudents aged 18 or more\n\nstudents_names[age &gt;= 18]\n\n[1] \"Sasha\"  \"Robert\" \"Diana\"  \"Alexey\" \"Julia\" \n\n\nWhat if we want to extract names AND their age. We can set names for each value in vector using names() function\nnames() function returns names from vector. Vector student_age had no names:\n\nstudents_age_vec = age\nnames(students_age_vec)\n\nNULL\n\n\nAnd we can set such names as we do it with variables:\n\nnames(students_age_vec) = students_names\nstudents_age_vec\n\n   Daniel     Sasha    Robert     Alice     Diana Anastasia    Alexey     Julia \n       15        32        18         8        23        17        22        23 \n\n\nNow we can access values using names!\n\nstudents_age_vec['Alice']\n\nAlice \n    8 \n\n\nAnother way to create “named” vector:\n\nnamed_vec = c(\"vlaue1\" = 1, \"value2\" = 2, \"value3\" = 3)\nnamed_vec\n\nvlaue1 value2 value3 \n     1      2      3 \n\n\n\n\nList\n\nstudents_age_list = list(students_names, age)\nstudents_age_list\n\n[[1]]\n[1] \"Daniel\"    \"Sasha\"     \"Robert\"    \"Alice\"     \"Diana\"     \"Anastasia\"\n[7] \"Alexey\"    \"Julia\"    \n\n[[2]]\n[1] 15 32 18  8 23 17 22 23\n\n\n\n# students_age_list['Alice'] # NOTHING\n\nNow we can add several vectors inside same “structure”. Let’s add weight and height and set names to each vector:\n\nheight = c(175, 181, 188, 120, 170, 168, 178, 172)\nweight = c(70, 75, 80, 45, 55, 50, 78, 62)\n\nstudents_list = list(names = students_names,\n                     age=age,\n                     height=height,\n                     weight=weight)\n\nstudents_list\n\n$names\n[1] \"Daniel\"    \"Sasha\"     \"Robert\"    \"Alice\"     \"Diana\"     \"Anastasia\"\n[7] \"Alexey\"    \"Julia\"    \n\n$age\n[1] 15 32 18  8 23 17 22 23\n\n$height\n[1] 175 181 188 120 170 168 178 172\n\n$weight\n[1] 70 75 80 45 55 50 78 62\n\n\nEach vector represents a piece of information about each student. Vectors here are like columns in a table (data frame)\n\nList data access\nWe can access vectors in several ways\n\nstudents_list[2] # NOT A VECTOR\n\n$age\n[1] 15 32 18  8 23 17 22 23\n\nstudents_list[[2]] # VECTOR\n\n[1] 15 32 18  8 23 17 22 23\n\nstudents_list$height  # vector\n\n[1] 175 181 188 120 170 168 178 172\n\n\nCertain values:\n\n# students_list[[2]][5]\n\nstudents_list$age[5]\n\n[1] 23\n\n\n\n\nImportant note\nThe list may contain many vectors, and not of the same length!\n\nlist(\n  c(1,2,3,4,5),\n  c('A', 'B', 'C')\n)\n\n[[1]]\n[1] 1 2 3 4 5\n\n[[2]]\n[1] \"A\" \"B\" \"C\"\n\n\nIt is not necessary to include NA (empty) values to save the “table” structure. This makes the list a little bit more flexible, but inconvenient for storing tabular data.\n\nmarks_of_students = list(\n  Alice = c(5,4,5,3,4,4),\n  Sasha = c(3,3,3),\n  Robert = c(5,5,5,5)\n)\n\nmarks_of_students\n\n$Alice\n[1] 5 4 5 3 4 4\n\n$Sasha\n[1] 3 3 3\n\n$Robert\n[1] 5 5 5 5\n\n\nIf each value in every vector represent piece of information about the same students, then we should know the student’s name index and then access all vectors by this index. In other words, how to extract the row?\n\nindex_alice = which(students_list$names == 'Alice')\n\nstudents_list$age[index_alice]\n\n[1] 8\n\nstudents_list$weight[index_alice]\n\n[1] 45\n\n# lapply(students_list, function(x) x[index_alice])\n\n\nwhich(logical_vector) - return positions where logical_vector contain TRUE\n\nIs there more convenient way to store tabular data?"
  },
  {
    "objectID": "code/basic_r.html#data-frames",
    "href": "code/basic_r.html#data-frames",
    "title": "Prac #1. Basic R",
    "section": "Data frames",
    "text": "Data frames\nWe created 4 vectors for each trait.\n\nstudents_names = c('Daniel', 'Sasha', 'Robert', 'Alice', \n                   'Diana', 'Anastasia', 'Alexey', 'Julia')\nage = c(15, 32, 18, 8, 23, 17,22, 23)\nheight = c(175, 181, 188, 120, 170, 168, 178, 172)\nweight = c(70, 75, 80, 45, 55, 50, 78, 62)\n\nNow create data-frame\n\nstudents_df = data.frame(age=age,\n                         height=height,\n                         weight=weight,\n                         row.names = students_names)\n\nstudents_df\n\n          age height weight\nDaniel     15    175     70\nSasha      32    181     75\nRobert     18    188     80\nAlice       8    120     45\nDiana      23    170     55\nAnastasia  17    168     50\nAlexey     22    178     78\nJulia      23    172     62\n\n\nNow we have a beautiful representation of tabular data. In addition, data-frames make it easier to manipulate data.\n\nData access\nIn some principles, data.frame is similar to list\n\nstudents_df[1] # differs from list :)\n\n          age\nDaniel     15\nSasha      32\nRobert     18\nAlice       8\nDiana      23\nAnastasia  17\nAlexey     22\nJulia      23\n\nstudents_df[[1]]\n\n[1] 15 32 18  8 23 17 22 23\n\n# with one value inside [] it is iterpreted as a column name (name of vector in list)\nstudents_df[\"age\"]\n\n          age\nDaniel     15\nSasha      32\nRobert     18\nAlice       8\nDiana      23\nAnastasia  17\nAlexey     22\nJulia      23\n\nstudents_df$age\n\n[1] 15 32 18  8 23 17 22 23\n\n\nAccessing the data in specific row and column:\n\n# With two values: [row_name, column_name]\nstudents_df[\"Daniel\", 'weight'] \n\n[1] 70\n\nstudents_df[1, 3] \n\n[1] 70\n\n\n\nstudents_df[2:4, 2:3] \n\n       height weight\nSasha     181     75\nRobert    188     80\nAlice     120     45\n\nstudents_df[c('Sasha', 'Robert', 'Alice'), c(\"height\", \"weight\")]\n\n       height weight\nSasha     181     75\nRobert    188     80\nAlice     120     45\n\n# \"empty\" column value mean \"all columns\"\nstudents_df[c('Sasha', 'Robert', 'Alice'), ]\n\n       age height weight\nSasha   32    181     75\nRobert  18    188     80\nAlice    8    120     45\n\n\n\n\nNew column\n\n# factor variables (why to use them over character)\n# students_df$column = c(1,2,3,4,4,5,5)\nstudents_df$city = c(rep('Moscow', 3), rep('SPb', 3), rep('Kazan', 2))\n\nstudents_df$is_tall = ifelse(students_df$height &gt;= 180, 'Tall', 'Short')\n\nstudents_df$age_range = cut(\n  students_df$age,\n  breaks = c(0, 10, 20, 30, Inf),\n  # labels = c(\"Child\", \"Sub-adult\", \"Adult\", 'Old')\n)\n\nstudents_df\n\n          age height weight   city is_tall age_range\nDaniel     15    175     70 Moscow   Short   (10,20]\nSasha      32    181     75 Moscow    Tall  (30,Inf]\nRobert     18    188     80 Moscow    Tall   (10,20]\nAlice       8    120     45    SPb   Short    (0,10]\nDiana      23    170     55    SPb   Short   (20,30]\nAnastasia  17    168     50    SPb   Short   (10,20]\nAlexey     22    178     78  Kazan   Short   (20,30]\nJulia      23    172     62  Kazan   Short   (20,30]\n\n\n\nrep(value, number) - creates vector containing value number times\nifelse(condition, value_if_true, value_if_false) - returns value_if_true, if condition is TRUE and value_if_false otherwise\ncut(vector, breaks = c(...)) - breaks values in vector into ranges according to breaks and returns ranges in format (x, y]\n\n\nTransforming types\n\nstudents_df$is_tall = as.factor(students_df$is_tall)\nstudents_df$city =  as.factor(students_df$city)\n\n\nas.factor() - transform column with numeric or character type into factor\nas.numeric(), as.character, as.list() ….\n\n\n\n\nDeleting a column\n\nstudents_df$weight = NULL\n\n\n\nOrdering\n\nstudents_df[order(students_df$age), ]\n\n          age height   city is_tall age_range\nAlice       8    120    SPb   Short    (0,10]\nDaniel     15    175 Moscow   Short   (10,20]\nAnastasia  17    168    SPb   Short   (10,20]\nRobert     18    188 Moscow    Tall   (10,20]\nAlexey     22    178  Kazan   Short   (20,30]\nDiana      23    170    SPb   Short   (20,30]\nJulia      23    172  Kazan   Short   (20,30]\nSasha      32    181 Moscow    Tall  (30,Inf]\n\n# vec[c(3,1,5)]\n\nstudents_df[order(students_df$age, decreasing = T),]\n\n          age height   city is_tall age_range\nSasha      32    181 Moscow    Tall  (30,Inf]\nDiana      23    170    SPb   Short   (20,30]\nJulia      23    172  Kazan   Short   (20,30]\nAlexey     22    178  Kazan   Short   (20,30]\nRobert     18    188 Moscow    Tall   (10,20]\nAnastasia  17    168    SPb   Short   (10,20]\nDaniel     15    175 Moscow   Short   (10,20]\nAlice       8    120    SPb   Short    (0,10]\n\n\n\n\nFiltering\n\nstudents_df[students_df$height &gt; 170, ]\n\n       age height   city is_tall age_range\nDaniel  15    175 Moscow   Short   (10,20]\nSasha   32    181 Moscow    Tall  (30,Inf]\nRobert  18    188 Moscow    Tall   (10,20]\nAlexey  22    178  Kazan   Short   (20,30]\nJulia   23    172  Kazan   Short   (20,30]\n\nstudents_df[students_df$height &gt; 170 & age &gt; 20, ]\n\n       age height   city is_tall age_range\nSasha   32    181 Moscow    Tall  (30,Inf]\nAlexey  22    178  Kazan   Short   (20,30]\nJulia   23    172  Kazan   Short   (20,30]\n\nstudents_df[students_df$city %in% c('Moscow', 'SPb'), ]\n\n          age height   city is_tall age_range\nDaniel     15    175 Moscow   Short   (10,20]\nSasha      32    181 Moscow    Tall  (30,Inf]\nRobert     18    188 Moscow    Tall   (10,20]\nAlice       8    120    SPb   Short    (0,10]\nDiana      23    170    SPb   Short   (20,30]\nAnastasia  17    168    SPb   Short   (10,20]\n\nsubset(students_df, age &gt; 18)\n\n       age height   city is_tall age_range\nSasha   32    181 Moscow    Tall  (30,Inf]\nDiana   23    170    SPb   Short   (20,30]\nAlexey  22    178  Kazan   Short   (20,30]\nJulia   23    172  Kazan   Short   (20,30]\n\n\n\n\nDescribe data-frame\n\nstr(students_df) # useful for a first look at the data\n\n'data.frame':   8 obs. of  5 variables:\n $ age      : num  15 32 18 8 23 17 22 23\n $ height   : num  175 181 188 120 170 168 178 172\n $ city     : Factor w/ 3 levels \"Kazan\",\"Moscow\",..: 2 2 2 3 3 3 1 1\n $ is_tall  : Factor w/ 2 levels \"Short\",\"Tall\": 1 2 2 1 1 1 1 1\n $ age_range: Factor w/ 4 levels \"(0,10]\",\"(10,20]\",..: 2 4 2 1 3 2 3 3\n\n\n\ncolnames(students_df)\n\n[1] \"age\"       \"height\"    \"city\"      \"is_tall\"   \"age_range\"\n\nrownames(students_df)\n\n[1] \"Daniel\"    \"Sasha\"     \"Robert\"    \"Alice\"     \"Diana\"     \"Anastasia\"\n[7] \"Alexey\"    \"Julia\"    \n\ndim(students_df) #rows and columns number\n\n[1] 8 5\n\n\n\n\nSummary statistics\n\nsummary(students_df)\n\n      age            height          city    is_tall     age_range\n Min.   : 8.00   Min.   :120.0   Kazan :2   Short:6   (0,10]  :1  \n 1st Qu.:16.50   1st Qu.:169.5   Moscow:3   Tall :2   (10,20] :3  \n Median :20.00   Median :173.5   SPb   :3             (20,30] :3  \n Mean   :19.75   Mean   :169.0                        (30,Inf]:1  \n 3rd Qu.:23.00   3rd Qu.:178.8                                    \n Max.   :32.00   Max.   :188.0                                    \n\n\nCreate contingency table of the counts at each combination of factor levels\n\ntable(students_df$city)\n\n\n Kazan Moscow    SPb \n     2      3      3 \n\ntable(students_df$city, students_df$age_range)\n\n        \n         (0,10] (10,20] (20,30] (30,Inf]\n  Kazan       0       0       2        0\n  Moscow      0       2       0        1\n  SPb         1       1       1        0"
  },
  {
    "objectID": "code/basic_r.html#p.s.",
    "href": "code/basic_r.html#p.s.",
    "title": "Prac #1. Basic R",
    "section": "P.S.",
    "text": "P.S.\n\nAggregation\n\naggregate(age ~ city, students_df, mean)\n\n    city      age\n1  Kazan 22.50000\n2 Moscow 21.66667\n3    SPb 16.00000\n\n\nWe grouped ages by city and than run function (here we calculated mean) for values in these groups\nMedian of heights inside each group of age_range:\n\naggregate(height ~ age_range, students_df, median)\n\n  age_range height\n1    (0,10]    120\n2   (10,20]    175\n3   (20,30]    172\n4  (30,Inf]    181"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Biostatistics in R",
    "section": "",
    "text": "Code\n\nPrac #1.1 Basic R\nPrac #1.2 Advanced Dataframes\nPrac #2.2 Visualization\n\n\n\nPresentations\n\nPrac #2.1 Distributions\n\nHomeworks"
  },
  {
    "objectID": "homeworks/index.html",
    "href": "homeworks/index.html",
    "title": "Homeworks",
    "section": "",
    "text": "HW #1\nHW #2\nHW #3"
  },
  {
    "objectID": "homeworks/HW2.html#bubble-plot",
    "href": "homeworks/HW2.html#bubble-plot",
    "title": "Homework #2",
    "section": "Bubble plot",
    "text": "Bubble plot"
  }
]